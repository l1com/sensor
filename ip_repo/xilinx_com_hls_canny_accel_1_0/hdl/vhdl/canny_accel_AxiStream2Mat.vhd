-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_AxiStream2Mat is
port (
    ldata1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    in_mat_421_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    in_mat_421_full_n : IN STD_LOGIC;
    in_mat_421_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of canny_accel_AxiStream2Mat is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal cols_npc_aligned47_U0_ap_start : STD_LOGIC;
    signal cols_npc_aligned47_U0_ap_done : STD_LOGIC;
    signal cols_npc_aligned47_U0_ap_continue : STD_LOGIC;
    signal cols_npc_aligned47_U0_ap_idle : STD_LOGIC;
    signal cols_npc_aligned47_U0_ap_ready : STD_LOGIC;
    signal cols_npc_aligned47_U0_start_out : STD_LOGIC;
    signal cols_npc_aligned47_U0_start_write : STD_LOGIC;
    signal cols_npc_aligned47_U0_cols_read : STD_LOGIC;
    signal cols_npc_aligned47_U0_rows_read : STD_LOGIC;
    signal cols_npc_aligned47_U0_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_npc_aligned47_U0_cols_out_write : STD_LOGIC;
    signal cols_npc_aligned47_U0_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_npc_aligned47_U0_rows_out_write : STD_LOGIC;
    signal cols_npc_aligned47_U0_ret_out_din : STD_LOGIC_VECTOR (28 downto 0);
    signal cols_npc_aligned47_U0_ret_out_write : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_ap_start : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_ap_done : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_ap_continue : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_ap_idle : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_ap_ready : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_return_r : STD_LOGIC_VECTOR (6 downto 0);
    signal last_blk_pxl_width_1_U0_return_r_ap_vld : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_cols_read : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_cols_bound_per_npc_read : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_cols_bound_per_npc_out_din : STD_LOGIC_VECTOR (28 downto 0);
    signal last_blk_pxl_width_1_U0_cols_bound_per_npc_out_write : STD_LOGIC;
    signal ap_channel_done_p_channel : STD_LOGIC;
    signal p_channel_full_n : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_start : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_done : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_continue : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_idle : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ap_ready : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_ldata1_read : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_in_mat_421_din : STD_LOGIC_VECTOR (63 downto 0);
    signal AxiStream2MatStream_2_U0_in_mat_421_write : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_rows_read : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_cols_bound_per_npc_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal cols_c_i_full_n : STD_LOGIC;
    signal cols_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_c_i_empty_n : STD_LOGIC;
    signal rows_c_i_full_n : STD_LOGIC;
    signal rows_c_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_i_empty_n : STD_LOGIC;
    signal p_c_i_full_n : STD_LOGIC;
    signal p_c_i_dout : STD_LOGIC_VECTOR (28 downto 0);
    signal p_c_i_empty_n : STD_LOGIC;
    signal p_channel_dout : STD_LOGIC_VECTOR (6 downto 0);
    signal p_channel_empty_n : STD_LOGIC;
    signal p_c11_i_full_n : STD_LOGIC;
    signal p_c11_i_dout : STD_LOGIC_VECTOR (28 downto 0);
    signal p_c11_i_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_last_blk_pxl_width_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_last_blk_pxl_width_1_U0_full_n : STD_LOGIC;
    signal start_for_last_blk_pxl_width_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_last_blk_pxl_width_1_U0_empty_n : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_start_full_n : STD_LOGIC;
    signal last_blk_pxl_width_1_U0_start_write : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_start_full_n : STD_LOGIC;
    signal AxiStream2MatStream_2_U0_start_write : STD_LOGIC;

    component canny_accel_cols_npc_aligned47 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC;
        rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        ret_out_din : OUT STD_LOGIC_VECTOR (28 downto 0);
        ret_out_full_n : IN STD_LOGIC;
        ret_out_write : OUT STD_LOGIC );
    end component;


    component canny_accel_last_blk_pxl_width_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        return_r : OUT STD_LOGIC_VECTOR (6 downto 0);
        return_r_ap_vld : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (28 downto 0);
        cols_bound_per_npc_empty_n : IN STD_LOGIC;
        cols_bound_per_npc_read : OUT STD_LOGIC;
        cols_bound_per_npc_out_din : OUT STD_LOGIC_VECTOR (28 downto 0);
        cols_bound_per_npc_out_full_n : IN STD_LOGIC;
        cols_bound_per_npc_out_write : OUT STD_LOGIC );
    end component;


    component canny_accel_AxiStream2MatStream_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ldata1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ldata1_empty_n : IN STD_LOGIC;
        ldata1_read : OUT STD_LOGIC;
        in_mat_421_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_mat_421_full_n : IN STD_LOGIC;
        in_mat_421_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (28 downto 0);
        cols_bound_per_npc_empty_n : IN STD_LOGIC;
        cols_bound_per_npc_read : OUT STD_LOGIC;
        last_blk_width : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component canny_accel_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component canny_accel_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component canny_accel_fifo_w29_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (28 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (28 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component canny_accel_fifo_w7_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (6 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component canny_accel_start_for_last_blk_pxl_width_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    cols_npc_aligned47_U0 : component canny_accel_cols_npc_aligned47
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cols_npc_aligned47_U0_ap_start,
        start_full_n => start_for_last_blk_pxl_width_1_U0_full_n,
        ap_done => cols_npc_aligned47_U0_ap_done,
        ap_continue => cols_npc_aligned47_U0_ap_continue,
        ap_idle => cols_npc_aligned47_U0_ap_idle,
        ap_ready => cols_npc_aligned47_U0_ap_ready,
        start_out => cols_npc_aligned47_U0_start_out,
        start_write => cols_npc_aligned47_U0_start_write,
        cols_dout => cols_dout,
        cols_empty_n => cols_empty_n,
        cols_read => cols_npc_aligned47_U0_cols_read,
        rows_dout => rows_dout,
        rows_empty_n => rows_empty_n,
        rows_read => cols_npc_aligned47_U0_rows_read,
        cols_out_din => cols_npc_aligned47_U0_cols_out_din,
        cols_out_full_n => cols_c_i_full_n,
        cols_out_write => cols_npc_aligned47_U0_cols_out_write,
        rows_out_din => cols_npc_aligned47_U0_rows_out_din,
        rows_out_full_n => rows_c_i_full_n,
        rows_out_write => cols_npc_aligned47_U0_rows_out_write,
        ret_out_din => cols_npc_aligned47_U0_ret_out_din,
        ret_out_full_n => p_c_i_full_n,
        ret_out_write => cols_npc_aligned47_U0_ret_out_write);

    last_blk_pxl_width_1_U0 : component canny_accel_last_blk_pxl_width_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => last_blk_pxl_width_1_U0_ap_start,
        ap_done => last_blk_pxl_width_1_U0_ap_done,
        ap_continue => last_blk_pxl_width_1_U0_ap_continue,
        ap_idle => last_blk_pxl_width_1_U0_ap_idle,
        ap_ready => last_blk_pxl_width_1_U0_ap_ready,
        return_r => last_blk_pxl_width_1_U0_return_r,
        return_r_ap_vld => last_blk_pxl_width_1_U0_return_r_ap_vld,
        cols_dout => cols_c_i_dout,
        cols_empty_n => cols_c_i_empty_n,
        cols_read => last_blk_pxl_width_1_U0_cols_read,
        cols_bound_per_npc_dout => p_c_i_dout,
        cols_bound_per_npc_empty_n => p_c_i_empty_n,
        cols_bound_per_npc_read => last_blk_pxl_width_1_U0_cols_bound_per_npc_read,
        cols_bound_per_npc_out_din => last_blk_pxl_width_1_U0_cols_bound_per_npc_out_din,
        cols_bound_per_npc_out_full_n => p_c11_i_full_n,
        cols_bound_per_npc_out_write => last_blk_pxl_width_1_U0_cols_bound_per_npc_out_write);

    AxiStream2MatStream_2_U0 : component canny_accel_AxiStream2MatStream_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AxiStream2MatStream_2_U0_ap_start,
        ap_done => AxiStream2MatStream_2_U0_ap_done,
        ap_continue => AxiStream2MatStream_2_U0_ap_continue,
        ap_idle => AxiStream2MatStream_2_U0_ap_idle,
        ap_ready => AxiStream2MatStream_2_U0_ap_ready,
        ldata1_dout => ldata1_dout,
        ldata1_empty_n => ldata1_empty_n,
        ldata1_read => AxiStream2MatStream_2_U0_ldata1_read,
        in_mat_421_din => AxiStream2MatStream_2_U0_in_mat_421_din,
        in_mat_421_full_n => in_mat_421_full_n,
        in_mat_421_write => AxiStream2MatStream_2_U0_in_mat_421_write,
        rows_dout => rows_c_i_dout,
        rows_empty_n => rows_c_i_empty_n,
        rows_read => AxiStream2MatStream_2_U0_rows_read,
        cols_bound_per_npc_dout => p_c11_i_dout,
        cols_bound_per_npc_empty_n => p_c11_i_empty_n,
        cols_bound_per_npc_read => AxiStream2MatStream_2_U0_cols_bound_per_npc_read,
        last_blk_width => p_channel_dout);

    cols_c_i_U : component canny_accel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cols_npc_aligned47_U0_cols_out_din,
        if_full_n => cols_c_i_full_n,
        if_write => cols_npc_aligned47_U0_cols_out_write,
        if_dout => cols_c_i_dout,
        if_empty_n => cols_c_i_empty_n,
        if_read => last_blk_pxl_width_1_U0_cols_read);

    rows_c_i_U : component canny_accel_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cols_npc_aligned47_U0_rows_out_din,
        if_full_n => rows_c_i_full_n,
        if_write => cols_npc_aligned47_U0_rows_out_write,
        if_dout => rows_c_i_dout,
        if_empty_n => rows_c_i_empty_n,
        if_read => AxiStream2MatStream_2_U0_rows_read);

    p_c_i_U : component canny_accel_fifo_w29_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cols_npc_aligned47_U0_ret_out_din,
        if_full_n => p_c_i_full_n,
        if_write => cols_npc_aligned47_U0_ret_out_write,
        if_dout => p_c_i_dout,
        if_empty_n => p_c_i_empty_n,
        if_read => last_blk_pxl_width_1_U0_cols_bound_per_npc_read);

    p_channel_U : component canny_accel_fifo_w7_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => last_blk_pxl_width_1_U0_return_r,
        if_full_n => p_channel_full_n,
        if_write => last_blk_pxl_width_1_U0_ap_done,
        if_dout => p_channel_dout,
        if_empty_n => p_channel_empty_n,
        if_read => AxiStream2MatStream_2_U0_ap_ready);

    p_c11_i_U : component canny_accel_fifo_w29_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => last_blk_pxl_width_1_U0_cols_bound_per_npc_out_din,
        if_full_n => p_c11_i_full_n,
        if_write => last_blk_pxl_width_1_U0_cols_bound_per_npc_out_write,
        if_dout => p_c11_i_dout,
        if_empty_n => p_c11_i_empty_n,
        if_read => AxiStream2MatStream_2_U0_cols_bound_per_npc_read);

    start_for_last_blk_pxl_width_1_U0_U : component canny_accel_start_for_last_blk_pxl_width_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_last_blk_pxl_width_1_U0_din,
        if_full_n => start_for_last_blk_pxl_width_1_U0_full_n,
        if_write => cols_npc_aligned47_U0_start_write,
        if_dout => start_for_last_blk_pxl_width_1_U0_dout,
        if_empty_n => start_for_last_blk_pxl_width_1_U0_empty_n,
        if_read => last_blk_pxl_width_1_U0_ap_ready);




    AxiStream2MatStream_2_U0_ap_continue <= ap_continue;
    AxiStream2MatStream_2_U0_ap_start <= p_channel_empty_n;
    AxiStream2MatStream_2_U0_start_full_n <= ap_const_logic_1;
    AxiStream2MatStream_2_U0_start_write <= ap_const_logic_0;
    ap_channel_done_p_channel <= last_blk_pxl_width_1_U0_ap_done;
    ap_done <= AxiStream2MatStream_2_U0_ap_done;
    ap_idle <= (last_blk_pxl_width_1_U0_ap_idle and (p_channel_empty_n xor ap_const_logic_1) and cols_npc_aligned47_U0_ap_idle and AxiStream2MatStream_2_U0_ap_idle);
    ap_ready <= cols_npc_aligned47_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= AxiStream2MatStream_2_U0_ap_done;
    ap_sync_ready <= cols_npc_aligned47_U0_ap_ready;
    cols_npc_aligned47_U0_ap_continue <= ap_const_logic_1;
    cols_npc_aligned47_U0_ap_start <= ap_start;
    cols_read <= cols_npc_aligned47_U0_cols_read;
    in_mat_421_din <= AxiStream2MatStream_2_U0_in_mat_421_din;
    in_mat_421_write <= AxiStream2MatStream_2_U0_in_mat_421_write;
    last_blk_pxl_width_1_U0_ap_continue <= p_channel_full_n;
    last_blk_pxl_width_1_U0_ap_start <= start_for_last_blk_pxl_width_1_U0_empty_n;
    last_blk_pxl_width_1_U0_start_full_n <= ap_const_logic_1;
    last_blk_pxl_width_1_U0_start_write <= ap_const_logic_0;
    ldata1_read <= AxiStream2MatStream_2_U0_ldata1_read;
    rows_read <= cols_npc_aligned47_U0_rows_read;
    start_for_last_blk_pxl_width_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
