-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_xFMagnitudeKernel_3_3_800_1280_4_4_8_2_2_2_32_32_160_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gradx1_mat_43_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    gradx1_mat_43_empty_n : IN STD_LOGIC;
    gradx1_mat_43_read : OUT STD_LOGIC;
    grady1_mat_46_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    grady1_mat_46_empty_n : IN STD_LOGIC;
    grady1_mat_46_read : OUT STD_LOGIC;
    magnitude_mat_48_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    magnitude_mat_48_full_n : IN STD_LOGIC;
    magnitude_mat_48_write : OUT STD_LOGIC;
    imgheight_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    imgheight_empty_n : IN STD_LOGIC;
    imgheight_read : OUT STD_LOGIC;
    imgwidth_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgwidth_empty_n : IN STD_LOGIC;
    imgwidth_read : OUT STD_LOGIC );
end;


architecture behav of canny_accel_xFMagnitudeKernel_3_3_800_1280_4_4_8_2_2_2_32_32_160_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gradx1_mat_43_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln81_reg_764 : STD_LOGIC_VECTOR (0 downto 0);
    signal grady1_mat_46_blk_n : STD_LOGIC;
    signal magnitude_mat_48_blk_n : STD_LOGIC;
    signal imgheight_blk_n : STD_LOGIC;
    signal imgwidth_blk_n : STD_LOGIC;
    signal j_reg_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal imgheight_read_reg_740 : STD_LOGIC_VECTOR (9 downto 0);
    signal imgwidth_read_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_149_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_750 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln74_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_160_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln81_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_reg_127 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_fu_171_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_fu_187_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_fu_175_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_201_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_fu_209_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_1_fu_215_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_1_fu_193_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_2_fu_229_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_1_fu_257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_2_fu_239_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_1_fu_279_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_3_fu_285_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_3_fu_263_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_4_fu_299_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_2_fu_327_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_4_fu_309_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_2_fu_349_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_5_fu_355_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_5_fu_333_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_6_fu_369_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_3_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_6_fu_379_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_3_fu_419_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_7_fu_425_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_7_fu_403_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_8_fu_439_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_4_fu_467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_8_fu_449_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_4_fu_489_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_9_fu_495_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_9_fu_473_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_10_fu_509_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_5_fu_537_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_10_fu_519_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_5_fu_559_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_11_fu_565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_11_fu_543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_12_fu_579_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_6_fu_607_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_12_fu_589_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_6_fu_629_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_13_fu_635_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_13_fu_613_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_14_fu_649_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_7_fu_677_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_14_fu_659_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_48_fu_691_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln101_7_fu_699_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_15_fu_705_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_15_fu_683_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_713_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_643_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_503_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_fu_293_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_223_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln74_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln74_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln74_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_127 <= i_2_reg_750;
            elsif ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_127 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln81_fu_166_p2 = ap_const_lv1_0))) then 
                j_reg_138 <= j_2_fu_160_p2;
            elsif (((icmp_ln74_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_138 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_750 <= i_2_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln81_reg_764 <= icmp_ln81_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                imgheight_read_reg_740 <= imgheight_dout;
                imgwidth_read_reg_745 <= imgwidth_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n, ap_CS_fsm_state2, icmp_ln74_fu_155_p2, ap_enable_reg_pp0_iter0, icmp_ln81_fu_166_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln74_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln81_fu_166_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln81_fu_166_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(gradx1_mat_43_empty_n, grady1_mat_46_empty_n, magnitude_mat_48_full_n, ap_enable_reg_pp0_iter1, icmp_ln81_reg_764)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln81_reg_764 = ap_const_lv1_0) and (magnitude_mat_48_full_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (grady1_mat_46_empty_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (gradx1_mat_43_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(gradx1_mat_43_empty_n, grady1_mat_46_empty_n, magnitude_mat_48_full_n, ap_enable_reg_pp0_iter1, icmp_ln81_reg_764)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln81_reg_764 = ap_const_lv1_0) and (magnitude_mat_48_full_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (grady1_mat_46_empty_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (gradx1_mat_43_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(gradx1_mat_43_empty_n, grady1_mat_46_empty_n, magnitude_mat_48_full_n, ap_enable_reg_pp0_iter1, icmp_ln81_reg_764)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln81_reg_764 = ap_const_lv1_0) and (magnitude_mat_48_full_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (grady1_mat_46_empty_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (gradx1_mat_43_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, imgheight_empty_n, imgwidth_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(gradx1_mat_43_empty_n, grady1_mat_46_empty_n, magnitude_mat_48_full_n, icmp_ln81_reg_764)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln81_reg_764 = ap_const_lv1_0) and (magnitude_mat_48_full_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (grady1_mat_46_empty_n = ap_const_logic_0)) or ((icmp_ln81_reg_764 = ap_const_lv1_0) and (gradx1_mat_43_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln81_fu_166_p2)
    begin
        if ((icmp_ln81_fu_166_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln74_fu_155_p2)
    begin
        if (((icmp_ln74_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln74_fu_155_p2)
    begin
        if (((icmp_ln74_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gradx1_mat_43_blk_n_assign_proc : process(gradx1_mat_43_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln81_reg_764)
    begin
        if (((icmp_ln81_reg_764 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradx1_mat_43_blk_n <= gradx1_mat_43_empty_n;
        else 
            gradx1_mat_43_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gradx1_mat_43_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_764, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln81_reg_764 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradx1_mat_43_read <= ap_const_logic_1;
        else 
            gradx1_mat_43_read <= ap_const_logic_0;
        end if; 
    end process;


    grady1_mat_46_blk_n_assign_proc : process(grady1_mat_46_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln81_reg_764)
    begin
        if (((icmp_ln81_reg_764 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grady1_mat_46_blk_n <= grady1_mat_46_empty_n;
        else 
            grady1_mat_46_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    grady1_mat_46_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_764, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln81_reg_764 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grady1_mat_46_read <= ap_const_logic_1;
        else 
            grady1_mat_46_read <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_149_p2 <= std_logic_vector(unsigned(i_reg_127) + unsigned(ap_const_lv10_1));
    icmp_ln74_fu_155_p2 <= "1" when (i_reg_127 = imgheight_read_reg_740) else "0";
    icmp_ln81_fu_166_p2 <= "1" when (j_reg_138 = imgwidth_read_reg_745) else "0";

    imgheight_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgheight_blk_n <= imgheight_empty_n;
        else 
            imgheight_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgheight_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgheight_read <= ap_const_logic_1;
        else 
            imgheight_read <= ap_const_logic_0;
        end if; 
    end process;


    imgwidth_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgwidth_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgwidth_blk_n <= imgwidth_empty_n;
        else 
            imgwidth_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgwidth_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgwidth_read <= ap_const_logic_1;
        else 
            imgwidth_read <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_160_p2 <= std_logic_vector(unsigned(j_reg_138) + unsigned(ap_const_lv8_1));

    magnitude_mat_48_blk_n_assign_proc : process(magnitude_mat_48_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln81_reg_764)
    begin
        if (((icmp_ln81_reg_764 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            magnitude_mat_48_blk_n <= magnitude_mat_48_full_n;
        else 
            magnitude_mat_48_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    magnitude_mat_48_din <= (((((((tmp_57_fu_713_p2 & tmp_56_fu_643_p2) & tmp_55_fu_573_p2) & tmp_54_fu_503_p2) & tmp_53_fu_433_p2) & tmp_52_fu_363_p2) & tmp_51_fu_293_p2) & tmp_50_fu_223_p2);

    magnitude_mat_48_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_764, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln81_reg_764 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            magnitude_mat_48_write <= ap_const_logic_1;
        else 
            magnitude_mat_48_write <= ap_const_logic_0;
        end if; 
    end process;

    p_10_fu_509_p4 <= gradx1_mat_43_dout(95 downto 80);
    p_11_fu_543_p3 <= 
        sub_ln100_5_fu_537_p2 when (tmp_41_fu_529_p3(0) = '1') else 
        p_10_fu_509_p4;
    p_12_fu_579_p4 <= gradx1_mat_43_dout(111 downto 96);
    p_13_fu_613_p3 <= 
        sub_ln100_6_fu_607_p2 when (tmp_44_fu_599_p3(0) = '1') else 
        p_12_fu_579_p4;
    p_14_fu_649_p4 <= gradx1_mat_43_dout(127 downto 112);
    p_15_fu_683_p3 <= 
        sub_ln100_7_fu_677_p2 when (tmp_47_fu_669_p3(0) = '1') else 
        p_14_fu_649_p4;
    p_1_fu_193_p3 <= 
        sub_ln100_fu_187_p2 when (tmp_28_fu_179_p3(0) = '1') else 
        p_fu_171_p1;
    p_2_fu_229_p4 <= gradx1_mat_43_dout(31 downto 16);
    p_3_fu_263_p3 <= 
        sub_ln100_1_fu_257_p2 when (tmp_fu_249_p3(0) = '1') else 
        p_2_fu_229_p4;
    p_4_fu_299_p4 <= gradx1_mat_43_dout(47 downto 32);
    p_5_fu_333_p3 <= 
        sub_ln100_2_fu_327_p2 when (tmp_32_fu_319_p3(0) = '1') else 
        p_4_fu_299_p4;
    p_6_fu_369_p4 <= gradx1_mat_43_dout(63 downto 48);
    p_7_fu_403_p3 <= 
        sub_ln100_3_fu_397_p2 when (tmp_35_fu_389_p3(0) = '1') else 
        p_6_fu_369_p4;
    p_8_fu_439_p4 <= gradx1_mat_43_dout(79 downto 64);
    p_9_fu_473_p3 <= 
        sub_ln100_4_fu_467_p2 when (tmp_38_fu_459_p3(0) = '1') else 
        p_8_fu_439_p4;
    p_fu_171_p1 <= gradx1_mat_43_dout(16 - 1 downto 0);
    q_10_fu_519_p4 <= grady1_mat_46_dout(95 downto 80);
    q_11_fu_565_p3 <= 
        sub_ln101_5_fu_559_p2 when (tmp_42_fu_551_p3(0) = '1') else 
        q_10_fu_519_p4;
    q_12_fu_589_p4 <= grady1_mat_46_dout(111 downto 96);
    q_13_fu_635_p3 <= 
        sub_ln101_6_fu_629_p2 when (tmp_45_fu_621_p3(0) = '1') else 
        q_12_fu_589_p4;
    q_14_fu_659_p4 <= grady1_mat_46_dout(127 downto 112);
    q_15_fu_705_p3 <= 
        sub_ln101_7_fu_699_p2 when (tmp_48_fu_691_p3(0) = '1') else 
        q_14_fu_659_p4;
    q_1_fu_215_p3 <= 
        sub_ln101_fu_209_p2 when (tmp_29_fu_201_p3(0) = '1') else 
        q_fu_175_p1;
    q_2_fu_239_p4 <= grady1_mat_46_dout(31 downto 16);
    q_3_fu_285_p3 <= 
        sub_ln101_1_fu_279_p2 when (tmp_30_fu_271_p3(0) = '1') else 
        q_2_fu_239_p4;
    q_4_fu_309_p4 <= grady1_mat_46_dout(47 downto 32);
    q_5_fu_355_p3 <= 
        sub_ln101_2_fu_349_p2 when (tmp_33_fu_341_p3(0) = '1') else 
        q_4_fu_309_p4;
    q_6_fu_379_p4 <= grady1_mat_46_dout(63 downto 48);
    q_7_fu_425_p3 <= 
        sub_ln101_3_fu_419_p2 when (tmp_36_fu_411_p3(0) = '1') else 
        q_6_fu_379_p4;
    q_8_fu_449_p4 <= grady1_mat_46_dout(79 downto 64);
    q_9_fu_495_p3 <= 
        sub_ln101_4_fu_489_p2 when (tmp_39_fu_481_p3(0) = '1') else 
        q_8_fu_449_p4;
    q_fu_175_p1 <= grady1_mat_46_dout(16 - 1 downto 0);
    sub_ln100_1_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_2_fu_229_p4));
    sub_ln100_2_fu_327_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_4_fu_299_p4));
    sub_ln100_3_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_6_fu_369_p4));
    sub_ln100_4_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_8_fu_439_p4));
    sub_ln100_5_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_10_fu_509_p4));
    sub_ln100_6_fu_607_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_12_fu_579_p4));
    sub_ln100_7_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_14_fu_649_p4));
    sub_ln100_fu_187_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_fu_171_p1));
    sub_ln101_1_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_2_fu_239_p4));
    sub_ln101_2_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_4_fu_309_p4));
    sub_ln101_3_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_6_fu_379_p4));
    sub_ln101_4_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_8_fu_449_p4));
    sub_ln101_5_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_10_fu_519_p4));
    sub_ln101_6_fu_629_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_12_fu_589_p4));
    sub_ln101_7_fu_699_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_14_fu_659_p4));
    sub_ln101_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(q_fu_175_p1));
    tmp_28_fu_179_p3 <= gradx1_mat_43_dout(15 downto 15);
    tmp_29_fu_201_p3 <= grady1_mat_46_dout(15 downto 15);
    tmp_30_fu_271_p3 <= grady1_mat_46_dout(31 downto 31);
    tmp_32_fu_319_p3 <= gradx1_mat_43_dout(47 downto 47);
    tmp_33_fu_341_p3 <= grady1_mat_46_dout(47 downto 47);
    tmp_35_fu_389_p3 <= gradx1_mat_43_dout(63 downto 63);
    tmp_36_fu_411_p3 <= grady1_mat_46_dout(63 downto 63);
    tmp_38_fu_459_p3 <= gradx1_mat_43_dout(79 downto 79);
    tmp_39_fu_481_p3 <= grady1_mat_46_dout(79 downto 79);
    tmp_41_fu_529_p3 <= gradx1_mat_43_dout(95 downto 95);
    tmp_42_fu_551_p3 <= grady1_mat_46_dout(95 downto 95);
    tmp_44_fu_599_p3 <= gradx1_mat_43_dout(111 downto 111);
    tmp_45_fu_621_p3 <= grady1_mat_46_dout(111 downto 111);
    tmp_47_fu_669_p3 <= gradx1_mat_43_dout(127 downto 127);
    tmp_48_fu_691_p3 <= grady1_mat_46_dout(127 downto 127);
    tmp_50_fu_223_p2 <= std_logic_vector(unsigned(q_1_fu_215_p3) + unsigned(p_1_fu_193_p3));
    tmp_51_fu_293_p2 <= std_logic_vector(unsigned(q_3_fu_285_p3) + unsigned(p_3_fu_263_p3));
    tmp_52_fu_363_p2 <= std_logic_vector(unsigned(q_5_fu_355_p3) + unsigned(p_5_fu_333_p3));
    tmp_53_fu_433_p2 <= std_logic_vector(unsigned(q_7_fu_425_p3) + unsigned(p_7_fu_403_p3));
    tmp_54_fu_503_p2 <= std_logic_vector(unsigned(q_9_fu_495_p3) + unsigned(p_9_fu_473_p3));
    tmp_55_fu_573_p2 <= std_logic_vector(unsigned(q_11_fu_565_p3) + unsigned(p_11_fu_543_p3));
    tmp_56_fu_643_p2 <= std_logic_vector(unsigned(q_13_fu_635_p3) + unsigned(p_13_fu_613_p3));
    tmp_57_fu_713_p2 <= std_logic_vector(unsigned(q_15_fu_705_p3) + unsigned(p_15_fu_683_p3));
    tmp_fu_249_p3 <= gradx1_mat_43_dout(31 downto 31);
end behav;
