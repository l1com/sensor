-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_accel_xFFindmax3x3_4_0_13_s is
port (
    ap_ready : OUT STD_LOGIC;
    p_i00 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i01 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i02 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i20 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i21 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_i22 : IN STD_LOGIC_VECTOR (15 downto 0);
    angle : IN STD_LOGIC_VECTOR (7 downto 0);
    p_low_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
    p_high_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of canny_accel_xFFindmax3x3_4_0_13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal zext_ln886_fu_116_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln882_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln886_1_fu_156_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln886_2_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln882_1_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln870_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_5_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln870_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln870_1_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_6_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln870_1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln870_2_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln870_2_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_7_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_7_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_6_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_1_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_2_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln298_fu_166_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln882_1_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln870_3_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_5_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln105_fu_282_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln886_4_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln870_4_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_3_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_fu_308_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln882_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln870_5_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_1_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_334_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln46_fu_360_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln46_2_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_2_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln65_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_3_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_3_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_2_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln85_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln870_3_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln870_6_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_3_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln870_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln870_1_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln886_fu_368_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    and_ln105_1_fu_270_p2 <= (icmp_ln886_7_fu_222_p2 and icmp_ln886_6_fu_216_p2);
    and_ln105_2_fu_276_p2 <= (and_ln105_fu_264_p2 and and_ln105_1_fu_270_p2);
    and_ln105_fu_264_p2 <= (icmp_ln870_7_fu_210_p2 and and_ln870_2_fu_258_p2);
    and_ln46_1_fu_354_p2 <= (icmp_ln886_1_fu_132_p2 and and_ln46_fu_348_p2);
    and_ln46_2_fu_376_p2 <= (xor_ln882_fu_144_p2 and icmp_ln886_1_fu_132_p2);
    and_ln46_3_fu_388_p2 <= (xor_ln46_fu_382_p2 and and_ln870_5_fu_342_p2);
    and_ln46_fu_348_p2 <= (xor_ln882_fu_144_p2 and and_ln870_5_fu_342_p2);
    and_ln65_1_fu_328_p2 <= (icmp_ln886_3_fu_174_p2 and and_ln65_fu_322_p2);
    and_ln65_2_fu_394_p2 <= (icmp_ln886_4_fu_180_p2 and icmp_ln886_3_fu_174_p2);
    and_ln65_3_fu_406_p2 <= (xor_ln65_fu_400_p2 and and_ln870_4_fu_316_p2);
    and_ln65_fu_322_p2 <= (icmp_ln886_4_fu_180_p2 and and_ln870_4_fu_316_p2);
    and_ln85_1_fu_302_p2 <= (icmp_ln886_5_fu_192_p2 and and_ln85_fu_296_p2);
    and_ln85_2_fu_418_p2 <= (xor_ln882_1_fu_204_p2 and icmp_ln886_5_fu_192_p2);
    and_ln85_3_fu_430_p2 <= (xor_ln85_fu_424_p2 and and_ln870_3_fu_290_p2);
    and_ln85_fu_296_p2 <= (xor_ln882_1_fu_204_p2 and and_ln870_3_fu_290_p2);
    and_ln870_1_fu_246_p2 <= (xor_ln870_1_fu_240_p2 and and_ln870_fu_234_p2);
    and_ln870_2_fu_258_p2 <= (xor_ln870_2_fu_252_p2 and and_ln870_1_fu_246_p2);
    and_ln870_3_fu_290_p2 <= (icmp_ln870_6_fu_186_p2 and and_ln870_1_fu_246_p2);
    and_ln870_4_fu_316_p2 <= (icmp_ln870_5_fu_150_p2 and and_ln870_fu_234_p2);
    and_ln870_5_fu_342_p2 <= (icmp_ln886_fu_120_p2 and icmp_ln870_fu_126_p2);
    and_ln870_6_fu_442_p2 <= (xor_ln870_3_fu_436_p2 and and_ln870_2_fu_258_p2);
    and_ln870_fu_234_p2 <= (xor_ln870_fu_228_p2 and icmp_ln886_fu_120_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        ap_const_lv2_0 when (or_ln870_1_fu_454_p2(0) = '1') else 
        select_ln886_fu_368_p3;
    icmp_ln870_5_fu_150_p2 <= "1" when (angle = ap_const_lv8_2D) else "0";
    icmp_ln870_6_fu_186_p2 <= "1" when (angle = ap_const_lv8_5A) else "0";
    icmp_ln870_7_fu_210_p2 <= "1" when (angle = ap_const_lv8_87) else "0";
    icmp_ln870_fu_126_p2 <= "1" when (angle = ap_const_lv8_0) else "0";
    icmp_ln882_1_fu_198_p2 <= "1" when (signed(p_i11) < signed(p_i21)) else "0";
    icmp_ln882_fu_138_p2 <= "1" when (signed(p_i11) < signed(p_i12)) else "0";
    icmp_ln886_1_fu_132_p2 <= "1" when (signed(p_i11) > signed(p_i10)) else "0";
    icmp_ln886_2_fu_160_p2 <= "1" when (signed(zext_ln886_1_fu_156_p1) < signed(p_i11)) else "0";
    icmp_ln886_3_fu_174_p2 <= "1" when (signed(p_i11) > signed(p_i02)) else "0";
    icmp_ln886_4_fu_180_p2 <= "1" when (signed(p_i11) > signed(p_i20)) else "0";
    icmp_ln886_5_fu_192_p2 <= "1" when (signed(p_i11) > signed(p_i01)) else "0";
    icmp_ln886_6_fu_216_p2 <= "1" when (signed(p_i11) > signed(p_i00)) else "0";
    icmp_ln886_7_fu_222_p2 <= "1" when (signed(p_i11) > signed(p_i22)) else "0";
    icmp_ln886_fu_120_p2 <= "1" when (signed(zext_ln886_fu_116_p1) < signed(p_i11)) else "0";
    or_ln65_fu_412_p2 <= (and_ln65_3_fu_406_p2 or and_ln46_3_fu_388_p2);
    or_ln870_1_fu_454_p2 <= (or_ln870_fu_448_p2 or or_ln65_fu_412_p2);
    or_ln870_fu_448_p2 <= (and_ln870_6_fu_442_p2 or and_ln85_3_fu_430_p2);
    select_ln105_fu_282_p3 <= 
        select_ln298_fu_166_p3 when (and_ln105_2_fu_276_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln298_fu_166_p3 <= 
        ap_const_lv2_3 when (icmp_ln886_2_fu_160_p2(0) = '1') else 
        ap_const_lv2_1;
    select_ln46_fu_360_p3 <= 
        select_ln298_fu_166_p3 when (and_ln46_1_fu_354_p2(0) = '1') else 
        select_ln65_fu_334_p3;
    select_ln65_fu_334_p3 <= 
        select_ln298_fu_166_p3 when (and_ln65_1_fu_328_p2(0) = '1') else 
        select_ln85_fu_308_p3;
    select_ln85_fu_308_p3 <= 
        select_ln298_fu_166_p3 when (and_ln85_1_fu_302_p2(0) = '1') else 
        select_ln105_fu_282_p3;
    select_ln886_fu_368_p3 <= 
        select_ln46_fu_360_p3 when (icmp_ln886_fu_120_p2(0) = '1') else 
        ap_const_lv2_0;
    xor_ln46_fu_382_p2 <= (ap_const_lv1_1 xor and_ln46_2_fu_376_p2);
    xor_ln65_fu_400_p2 <= (ap_const_lv1_1 xor and_ln65_2_fu_394_p2);
    xor_ln85_fu_424_p2 <= (ap_const_lv1_1 xor and_ln85_2_fu_418_p2);
    xor_ln870_1_fu_240_p2 <= (icmp_ln870_5_fu_150_p2 xor ap_const_lv1_1);
    xor_ln870_2_fu_252_p2 <= (icmp_ln870_6_fu_186_p2 xor ap_const_lv1_1);
    xor_ln870_3_fu_436_p2 <= (icmp_ln870_7_fu_210_p2 xor ap_const_lv1_1);
    xor_ln870_fu_228_p2 <= (icmp_ln870_fu_126_p2 xor ap_const_lv1_1);
    xor_ln882_1_fu_204_p2 <= (icmp_ln882_1_fu_198_p2 xor ap_const_lv1_1);
    xor_ln882_fu_144_p2 <= (icmp_ln882_fu_138_p2 xor ap_const_lv1_1);
    zext_ln886_1_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_high_threshold),16));
    zext_ln886_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_low_threshold),16));
end behav;
