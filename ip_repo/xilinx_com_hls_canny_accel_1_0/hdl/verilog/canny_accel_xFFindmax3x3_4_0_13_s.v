// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFFindmax3x3_4_0_13_s (
        ap_ready,
        p_i00,
        p_i01,
        p_i02,
        p_i10,
        p_i11,
        p_i12,
        p_i20,
        p_i21,
        p_i22,
        angle,
        p_low_threshold,
        p_high_threshold,
        ap_return
);


output   ap_ready;
input  [15:0] p_i00;
input  [15:0] p_i01;
input  [15:0] p_i02;
input  [15:0] p_i10;
input  [15:0] p_i11;
input  [15:0] p_i12;
input  [15:0] p_i20;
input  [15:0] p_i21;
input  [15:0] p_i22;
input  [7:0] angle;
input  [7:0] p_low_threshold;
input  [7:0] p_high_threshold;
output  [1:0] ap_return;

wire   [15:0] zext_ln886_fu_116_p1;
wire   [0:0] icmp_ln882_fu_138_p2;
wire   [15:0] zext_ln886_1_fu_156_p1;
wire   [0:0] icmp_ln886_2_fu_160_p2;
wire   [0:0] icmp_ln882_1_fu_198_p2;
wire   [0:0] icmp_ln870_fu_126_p2;
wire   [0:0] icmp_ln886_fu_120_p2;
wire   [0:0] xor_ln870_fu_228_p2;
wire   [0:0] icmp_ln870_5_fu_150_p2;
wire   [0:0] and_ln870_fu_234_p2;
wire   [0:0] xor_ln870_1_fu_240_p2;
wire   [0:0] icmp_ln870_6_fu_186_p2;
wire   [0:0] and_ln870_1_fu_246_p2;
wire   [0:0] xor_ln870_2_fu_252_p2;
wire   [0:0] and_ln870_2_fu_258_p2;
wire   [0:0] icmp_ln870_7_fu_210_p2;
wire   [0:0] icmp_ln886_7_fu_222_p2;
wire   [0:0] icmp_ln886_6_fu_216_p2;
wire   [0:0] and_ln105_1_fu_270_p2;
wire   [0:0] and_ln105_fu_264_p2;
wire   [0:0] and_ln105_2_fu_276_p2;
wire   [1:0] select_ln298_fu_166_p3;
wire   [0:0] xor_ln882_1_fu_204_p2;
wire   [0:0] and_ln870_3_fu_290_p2;
wire   [0:0] and_ln85_fu_296_p2;
wire   [0:0] icmp_ln886_5_fu_192_p2;
wire   [0:0] and_ln85_1_fu_302_p2;
wire   [1:0] select_ln105_fu_282_p3;
wire   [0:0] icmp_ln886_4_fu_180_p2;
wire   [0:0] and_ln870_4_fu_316_p2;
wire   [0:0] and_ln65_fu_322_p2;
wire   [0:0] icmp_ln886_3_fu_174_p2;
wire   [0:0] and_ln65_1_fu_328_p2;
wire   [1:0] select_ln85_fu_308_p3;
wire   [0:0] xor_ln882_fu_144_p2;
wire   [0:0] and_ln870_5_fu_342_p2;
wire   [0:0] and_ln46_fu_348_p2;
wire   [0:0] icmp_ln886_1_fu_132_p2;
wire   [0:0] and_ln46_1_fu_354_p2;
wire   [1:0] select_ln65_fu_334_p3;
wire   [1:0] select_ln46_fu_360_p3;
wire   [0:0] and_ln46_2_fu_376_p2;
wire   [0:0] xor_ln46_fu_382_p2;
wire   [0:0] and_ln65_2_fu_394_p2;
wire   [0:0] xor_ln65_fu_400_p2;
wire   [0:0] and_ln65_3_fu_406_p2;
wire   [0:0] and_ln46_3_fu_388_p2;
wire   [0:0] and_ln85_2_fu_418_p2;
wire   [0:0] xor_ln85_fu_424_p2;
wire   [0:0] xor_ln870_3_fu_436_p2;
wire   [0:0] and_ln870_6_fu_442_p2;
wire   [0:0] and_ln85_3_fu_430_p2;
wire   [0:0] or_ln870_fu_448_p2;
wire   [0:0] or_ln65_fu_412_p2;
wire   [0:0] or_ln870_1_fu_454_p2;
wire   [1:0] select_ln886_fu_368_p3;
wire    ap_ce_reg;

assign and_ln105_1_fu_270_p2 = (icmp_ln886_7_fu_222_p2 & icmp_ln886_6_fu_216_p2);

assign and_ln105_2_fu_276_p2 = (and_ln105_fu_264_p2 & and_ln105_1_fu_270_p2);

assign and_ln105_fu_264_p2 = (icmp_ln870_7_fu_210_p2 & and_ln870_2_fu_258_p2);

assign and_ln46_1_fu_354_p2 = (icmp_ln886_1_fu_132_p2 & and_ln46_fu_348_p2);

assign and_ln46_2_fu_376_p2 = (xor_ln882_fu_144_p2 & icmp_ln886_1_fu_132_p2);

assign and_ln46_3_fu_388_p2 = (xor_ln46_fu_382_p2 & and_ln870_5_fu_342_p2);

assign and_ln46_fu_348_p2 = (xor_ln882_fu_144_p2 & and_ln870_5_fu_342_p2);

assign and_ln65_1_fu_328_p2 = (icmp_ln886_3_fu_174_p2 & and_ln65_fu_322_p2);

assign and_ln65_2_fu_394_p2 = (icmp_ln886_4_fu_180_p2 & icmp_ln886_3_fu_174_p2);

assign and_ln65_3_fu_406_p2 = (xor_ln65_fu_400_p2 & and_ln870_4_fu_316_p2);

assign and_ln65_fu_322_p2 = (icmp_ln886_4_fu_180_p2 & and_ln870_4_fu_316_p2);

assign and_ln85_1_fu_302_p2 = (icmp_ln886_5_fu_192_p2 & and_ln85_fu_296_p2);

assign and_ln85_2_fu_418_p2 = (xor_ln882_1_fu_204_p2 & icmp_ln886_5_fu_192_p2);

assign and_ln85_3_fu_430_p2 = (xor_ln85_fu_424_p2 & and_ln870_3_fu_290_p2);

assign and_ln85_fu_296_p2 = (xor_ln882_1_fu_204_p2 & and_ln870_3_fu_290_p2);

assign and_ln870_1_fu_246_p2 = (xor_ln870_1_fu_240_p2 & and_ln870_fu_234_p2);

assign and_ln870_2_fu_258_p2 = (xor_ln870_2_fu_252_p2 & and_ln870_1_fu_246_p2);

assign and_ln870_3_fu_290_p2 = (icmp_ln870_6_fu_186_p2 & and_ln870_1_fu_246_p2);

assign and_ln870_4_fu_316_p2 = (icmp_ln870_5_fu_150_p2 & and_ln870_fu_234_p2);

assign and_ln870_5_fu_342_p2 = (icmp_ln886_fu_120_p2 & icmp_ln870_fu_126_p2);

assign and_ln870_6_fu_442_p2 = (xor_ln870_3_fu_436_p2 & and_ln870_2_fu_258_p2);

assign and_ln870_fu_234_p2 = (xor_ln870_fu_228_p2 & icmp_ln886_fu_120_p2);

assign ap_ready = 1'b1;

assign ap_return = ((or_ln870_1_fu_454_p2[0:0] == 1'b1) ? 2'd0 : select_ln886_fu_368_p3);

assign icmp_ln870_5_fu_150_p2 = ((angle == 8'd45) ? 1'b1 : 1'b0);

assign icmp_ln870_6_fu_186_p2 = ((angle == 8'd90) ? 1'b1 : 1'b0);

assign icmp_ln870_7_fu_210_p2 = ((angle == 8'd135) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_126_p2 = ((angle == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln882_1_fu_198_p2 = (($signed(p_i11) < $signed(p_i21)) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_138_p2 = (($signed(p_i11) < $signed(p_i12)) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_132_p2 = (($signed(p_i11) > $signed(p_i10)) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_160_p2 = (($signed(zext_ln886_1_fu_156_p1) < $signed(p_i11)) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_174_p2 = (($signed(p_i11) > $signed(p_i02)) ? 1'b1 : 1'b0);

assign icmp_ln886_4_fu_180_p2 = (($signed(p_i11) > $signed(p_i20)) ? 1'b1 : 1'b0);

assign icmp_ln886_5_fu_192_p2 = (($signed(p_i11) > $signed(p_i01)) ? 1'b1 : 1'b0);

assign icmp_ln886_6_fu_216_p2 = (($signed(p_i11) > $signed(p_i00)) ? 1'b1 : 1'b0);

assign icmp_ln886_7_fu_222_p2 = (($signed(p_i11) > $signed(p_i22)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_120_p2 = (($signed(zext_ln886_fu_116_p1) < $signed(p_i11)) ? 1'b1 : 1'b0);

assign or_ln65_fu_412_p2 = (and_ln65_3_fu_406_p2 | and_ln46_3_fu_388_p2);

assign or_ln870_1_fu_454_p2 = (or_ln870_fu_448_p2 | or_ln65_fu_412_p2);

assign or_ln870_fu_448_p2 = (and_ln870_6_fu_442_p2 | and_ln85_3_fu_430_p2);

assign select_ln105_fu_282_p3 = ((and_ln105_2_fu_276_p2[0:0] == 1'b1) ? select_ln298_fu_166_p3 : 2'd0);

assign select_ln298_fu_166_p3 = ((icmp_ln886_2_fu_160_p2[0:0] == 1'b1) ? 2'd3 : 2'd1);

assign select_ln46_fu_360_p3 = ((and_ln46_1_fu_354_p2[0:0] == 1'b1) ? select_ln298_fu_166_p3 : select_ln65_fu_334_p3);

assign select_ln65_fu_334_p3 = ((and_ln65_1_fu_328_p2[0:0] == 1'b1) ? select_ln298_fu_166_p3 : select_ln85_fu_308_p3);

assign select_ln85_fu_308_p3 = ((and_ln85_1_fu_302_p2[0:0] == 1'b1) ? select_ln298_fu_166_p3 : select_ln105_fu_282_p3);

assign select_ln886_fu_368_p3 = ((icmp_ln886_fu_120_p2[0:0] == 1'b1) ? select_ln46_fu_360_p3 : 2'd0);

assign xor_ln46_fu_382_p2 = (1'd1 ^ and_ln46_2_fu_376_p2);

assign xor_ln65_fu_400_p2 = (1'd1 ^ and_ln65_2_fu_394_p2);

assign xor_ln85_fu_424_p2 = (1'd1 ^ and_ln85_2_fu_418_p2);

assign xor_ln870_1_fu_240_p2 = (icmp_ln870_5_fu_150_p2 ^ 1'd1);

assign xor_ln870_2_fu_252_p2 = (icmp_ln870_6_fu_186_p2 ^ 1'd1);

assign xor_ln870_3_fu_436_p2 = (icmp_ln870_7_fu_210_p2 ^ 1'd1);

assign xor_ln870_fu_228_p2 = (icmp_ln870_fu_126_p2 ^ 1'd1);

assign xor_ln882_1_fu_204_p2 = (icmp_ln882_1_fu_198_p2 ^ 1'd1);

assign xor_ln882_fu_144_p2 = (icmp_ln882_fu_138_p2 ^ 1'd1);

assign zext_ln886_1_fu_156_p1 = p_high_threshold;

assign zext_ln886_fu_116_p1 = p_low_threshold;

endmodule //canny_accel_xFFindmax3x3_4_0_13_s
