// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFPackNMS_11_11_800_1280_13_13_8_32_2_2_6_24_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        nms_mat_410_dout,
        nms_mat_410_empty_n,
        nms_mat_410_read,
        dst_mat_422_din,
        dst_mat_422_full_n,
        dst_mat_422_write,
        imgheight_dout,
        imgheight_empty_n,
        imgheight_read,
        imgwidth_dout,
        imgwidth_empty_n,
        imgwidth_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] nms_mat_410_dout;
input   nms_mat_410_empty_n;
output   nms_mat_410_read;
output  [63:0] dst_mat_422_din;
input   dst_mat_422_full_n;
output   dst_mat_422_write;
input  [9:0] imgheight_dout;
input   imgheight_empty_n;
output   imgheight_read;
input  [10:0] imgwidth_dout;
input   imgwidth_empty_n;
output   imgwidth_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nms_mat_410_read;
reg dst_mat_422_write;
reg imgheight_read;
reg imgwidth_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    nms_mat_410_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln129_reg_502;
reg   [0:0] icmp_ln139_reg_506;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln139_1_reg_510;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln139_2_reg_514;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln139_3_reg_518;
reg    dst_mat_422_blk_n;
reg    imgheight_blk_n;
reg    imgwidth_blk_n;
reg   [31:0] j_reg_144;
reg   [9:0] imgheight_read_reg_470;
wire   [31:0] zext_ln116_fu_241_p1;
reg   [31:0] zext_ln116_reg_475;
wire   [9:0] zext_ln117_fu_267_p1;
reg   [9:0] zext_ln117_reg_483;
wire   [9:0] i_1_fu_271_p2;
reg   [9:0] i_1_reg_488;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln122_fu_277_p2;
wire   [31:0] zext_ln129_fu_305_p1;
reg   [31:0] zext_ln129_reg_497;
wire   [0:0] icmp_ln129_fu_309_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op82_read_state7;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln139_fu_314_p2;
wire   [0:0] icmp_ln139_1_fu_325_p2;
wire   [0:0] icmp_ln139_2_fu_336_p2;
wire   [0:0] icmp_ln139_3_fu_347_p2;
wire   [63:0] p_Result_s_fu_355_p5;
reg    ap_predicate_op63_read_state4;
reg    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [63:0] p_Result_6_fu_367_p5;
wire   [63:0] p_Result_8_fu_379_p5;
reg    ap_predicate_op69_read_state5;
reg    ap_block_state5_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [63:0] p_Result_7_fu_391_p5;
wire   [63:0] p_Result_10_fu_403_p5;
reg    ap_predicate_op75_read_state6;
reg    ap_block_state6_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [63:0] p_Result_9_fu_415_p5;
wire   [31:0] j_1_fu_427_p2;
reg   [31:0] j_1_reg_552;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage3_subdone;
reg   [9:0] i_reg_133;
reg    ap_block_state1;
wire    ap_CS_fsm_state8;
reg   [31:0] ap_phi_mux_j_phi_fu_148_p4;
reg   [63:0] ap_phi_reg_pp0_iter0_val_V_13_reg_156;
reg   [63:0] ap_phi_reg_pp0_iter0_val_V_14_reg_165;
wire   [63:0] ap_phi_reg_pp0_iter0_val_V_15_reg_174;
reg   [63:0] ap_phi_reg_pp0_iter1_val_V_15_reg_174;
reg   [63:0] ap_phi_mux_val_V_12_phi_fu_186_p4;
wire   [63:0] p_Result_12_fu_433_p5;
wire   [63:0] ap_phi_reg_pp0_iter1_val_V_12_reg_183;
wire   [63:0] p_Result_11_fu_446_p5;
reg   [63:0] val_V_fu_104;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] tmp_fu_197_p4;
wire   [10:0] and_ln_fu_207_p3;
wire   [4:0] trunc_ln110_fu_193_p1;
wire   [11:0] zext_ln111_fu_215_p1;
wire   [7:0] col_loop_count_ac_fu_231_p4;
wire   [11:0] add_ln111_fu_225_p2;
wire   [0:0] icmp_ln111_fu_219_p2;
wire   [8:0] tmp_s_fu_245_p4;
wire   [8:0] zext_ln111_1_fu_255_p1;
wire   [8:0] col_loop_count_fu_259_p3;
wire   [9:0] add_ln129_fu_282_p2;
wire   [7:0] tmp_20_fu_287_p4;
wire   [9:0] tmp_21_fu_297_p3;
wire   [31:0] or_ln139_fu_319_p2;
wire   [31:0] or_ln139_1_fu_330_p2;
wire   [31:0] or_ln139_2_fu_341_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_493;
reg    ap_condition_498;
reg    ap_condition_225;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_493)) begin
        if ((icmp_ln139_reg_506 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_val_V_13_reg_156 <= p_Result_6_fu_367_p5;
        end else if ((icmp_ln139_reg_506 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_val_V_13_reg_156 <= p_Result_s_fu_355_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_498)) begin
        if ((icmp_ln139_1_reg_510 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_val_V_14_reg_165 <= p_Result_7_fu_391_p5;
        end else if ((icmp_ln139_1_reg_510 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_val_V_14_reg_165 <= p_Result_8_fu_379_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_225)) begin
        if (((icmp_ln139_2_reg_514 == 1'd1) & (icmp_ln129_reg_502 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_val_V_15_reg_174 <= p_Result_9_fu_415_p5;
        end else if (((icmp_ln139_2_reg_514 == 1'd0) & (icmp_ln129_reg_502 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_val_V_15_reg_174 <= p_Result_10_fu_403_p5;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_val_V_15_reg_174 <= ap_phi_reg_pp0_iter0_val_V_15_reg_174;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_133 <= i_1_reg_488;
    end else if ((~((imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_133 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_144 <= j_1_reg_552;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd0))) begin
        j_reg_144 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_488 <= i_1_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln129_reg_502 <= icmp_ln129_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln129_fu_309_p2 == 1'd0))) begin
        icmp_ln139_1_reg_510 <= icmp_ln139_1_fu_325_p2;
        icmp_ln139_2_reg_514 <= icmp_ln139_2_fu_336_p2;
        icmp_ln139_3_reg_518 <= icmp_ln139_3_fu_347_p2;
        icmp_ln139_reg_506 <= icmp_ln139_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        imgheight_read_reg_470 <= imgheight_dout;
        zext_ln116_reg_475[7 : 0] <= zext_ln116_fu_241_p1[7 : 0];
        zext_ln117_reg_483[8 : 0] <= zext_ln117_fu_267_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        j_1_reg_552 <= j_1_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        val_V_fu_104 <= ap_phi_mux_val_V_12_phi_fu_186_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd0))) begin
        zext_ln129_reg_497[9 : 2] <= zext_ln129_fu_305_p1[9 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln129_fu_309_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_148_p4 = j_1_reg_552;
    end else begin
        ap_phi_mux_j_phi_fu_148_p4 = j_reg_144;
    end
end

always @ (*) begin
    if ((icmp_ln129_reg_502 == 1'd0)) begin
        if ((icmp_ln139_3_reg_518 == 1'd1)) begin
            ap_phi_mux_val_V_12_phi_fu_186_p4 = p_Result_11_fu_446_p5;
        end else if ((icmp_ln139_3_reg_518 == 1'd0)) begin
            ap_phi_mux_val_V_12_phi_fu_186_p4 = p_Result_12_fu_433_p5;
        end else begin
            ap_phi_mux_val_V_12_phi_fu_186_p4 = ap_phi_reg_pp0_iter1_val_V_12_reg_183;
        end
    end else begin
        ap_phi_mux_val_V_12_phi_fu_186_p4 = ap_phi_reg_pp0_iter1_val_V_12_reg_183;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_mat_422_blk_n = dst_mat_422_full_n;
    end else begin
        dst_mat_422_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dst_mat_422_write = 1'b1;
    end else begin
        dst_mat_422_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_blk_n = imgheight_empty_n;
    end else begin
        imgheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_read = 1'b1;
    end else begin
        imgheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_blk_n = imgwidth_empty_n;
    end else begin
        imgwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_read = 1'b1;
    end else begin
        imgwidth_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln139_2_reg_514 == 1'd1) & (icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln139_1_reg_510 == 1'd1) & (icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln139_reg_506 == 1'd1) & (icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln139_3_reg_518 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        nms_mat_410_blk_n = nms_mat_410_empty_n;
    end else begin
        nms_mat_410_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op75_read_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op69_read_state5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op63_read_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op82_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        nms_mat_410_read = 1'b1;
    end else begin
        nms_mat_410_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln122_fu_277_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln129_fu_309_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln129_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_fu_225_p2 = (zext_ln111_fu_215_p1 + 12'd32);

assign add_ln129_fu_282_p2 = (zext_ln117_reg_483 + 10'd3);

assign and_ln_fu_207_p3 = {{tmp_fu_197_p4}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln129_reg_502 == 1'd0) & (dst_mat_422_full_n == 1'b0)) | ((nms_mat_410_empty_n == 1'b0) & (ap_predicate_op82_read_state7 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln129_reg_502 == 1'd0) & (dst_mat_422_full_n == 1'b0)) | ((nms_mat_410_empty_n == 1'b0) & (ap_predicate_op82_read_state7 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln129_reg_502 == 1'd0) & (dst_mat_422_full_n == 1'b0)) | ((nms_mat_410_empty_n == 1'b0) & (ap_predicate_op82_read_state7 == 1'b1))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (nms_mat_410_empty_n == 1'b0) & (ap_predicate_op63_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (nms_mat_410_empty_n == 1'b0) & (ap_predicate_op63_read_state4 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (nms_mat_410_empty_n == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (nms_mat_410_empty_n == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (nms_mat_410_empty_n == 1'b0) & (ap_predicate_op75_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (nms_mat_410_empty_n == 1'b0) & (ap_predicate_op75_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((nms_mat_410_empty_n == 1'b0) & (ap_predicate_op63_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage2_iter0 = ((nms_mat_410_empty_n == 1'b0) & (ap_predicate_op69_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage3_iter0 = ((nms_mat_410_empty_n == 1'b0) & (ap_predicate_op75_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = (((icmp_ln129_reg_502 == 1'd0) & (dst_mat_422_full_n == 1'b0)) | ((nms_mat_410_empty_n == 1'b0) & (ap_predicate_op82_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_condition_225 = ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_493 = ((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_498 = ((icmp_ln129_reg_502 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_val_V_15_reg_174 = 'bx;

assign ap_phi_reg_pp0_iter1_val_V_12_reg_183 = 'bx;

always @ (*) begin
    ap_predicate_op63_read_state4 = ((icmp_ln139_reg_506 == 1'd1) & (icmp_ln129_reg_502 == 1'd0));
end

always @ (*) begin
    ap_predicate_op69_read_state5 = ((icmp_ln139_1_reg_510 == 1'd1) & (icmp_ln129_reg_502 == 1'd0));
end

always @ (*) begin
    ap_predicate_op75_read_state6 = ((icmp_ln139_2_reg_514 == 1'd1) & (icmp_ln129_reg_502 == 1'd0));
end

always @ (*) begin
    ap_predicate_op82_read_state7 = ((icmp_ln129_reg_502 == 1'd0) & (icmp_ln139_3_reg_518 == 1'd1));
end

assign col_loop_count_ac_fu_231_p4 = {{imgwidth_dout[10:3]}};

assign col_loop_count_fu_259_p3 = ((icmp_ln111_fu_219_p2[0:0] == 1'b1) ? tmp_s_fu_245_p4 : zext_ln111_1_fu_255_p1);

assign dst_mat_422_din = ap_phi_mux_val_V_12_phi_fu_186_p4;

assign i_1_fu_271_p2 = (i_reg_133 + 10'd1);

assign icmp_ln111_fu_219_p2 = ((trunc_ln110_fu_193_p1 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_277_p2 = ((i_reg_133 == imgheight_read_reg_470) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_309_p2 = ((ap_phi_mux_j_phi_fu_148_p4 == zext_ln129_reg_497) ? 1'b1 : 1'b0);

assign icmp_ln139_1_fu_325_p2 = (($signed(or_ln139_fu_319_p2) < $signed(zext_ln116_reg_475)) ? 1'b1 : 1'b0);

assign icmp_ln139_2_fu_336_p2 = (($signed(or_ln139_1_fu_330_p2) < $signed(zext_ln116_reg_475)) ? 1'b1 : 1'b0);

assign icmp_ln139_3_fu_347_p2 = (($signed(or_ln139_2_fu_341_p2) < $signed(zext_ln116_reg_475)) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_314_p2 = (($signed(ap_phi_mux_j_phi_fu_148_p4) < $signed(zext_ln116_reg_475)) ? 1'b1 : 1'b0);

assign j_1_fu_427_p2 = (j_reg_144 + 32'd4);

assign or_ln139_1_fu_330_p2 = (ap_phi_mux_j_phi_fu_148_p4 | 32'd2);

assign or_ln139_2_fu_341_p2 = (ap_phi_mux_j_phi_fu_148_p4 | 32'd3);

assign or_ln139_fu_319_p2 = (ap_phi_mux_j_phi_fu_148_p4 | 32'd1);

assign p_Result_10_fu_403_p5 = {{ap_phi_reg_pp0_iter0_val_V_14_reg_165[63:48]}, {16'd0}, {ap_phi_reg_pp0_iter0_val_V_14_reg_165[31:0]}};

assign p_Result_11_fu_446_p5 = {{nms_mat_410_dout}, {ap_phi_reg_pp0_iter1_val_V_15_reg_174[47:0]}};

assign p_Result_12_fu_433_p5 = {{16'd0}, {ap_phi_reg_pp0_iter1_val_V_15_reg_174[47:0]}};

assign p_Result_6_fu_367_p5 = {{val_V_fu_104[63:16]}, {nms_mat_410_dout}};

assign p_Result_7_fu_391_p5 = {{ap_phi_reg_pp0_iter0_val_V_13_reg_156[63:32]}, {nms_mat_410_dout}, {ap_phi_reg_pp0_iter0_val_V_13_reg_156[15:0]}};

assign p_Result_8_fu_379_p5 = {{ap_phi_reg_pp0_iter0_val_V_13_reg_156[63:32]}, {16'd0}, {ap_phi_reg_pp0_iter0_val_V_13_reg_156[15:0]}};

assign p_Result_9_fu_415_p5 = {{ap_phi_reg_pp0_iter0_val_V_14_reg_165[63:48]}, {nms_mat_410_dout}, {ap_phi_reg_pp0_iter0_val_V_14_reg_165[31:0]}};

assign p_Result_s_fu_355_p5 = {{val_V_fu_104[63:16]}, {16'd0}};

assign tmp_20_fu_287_p4 = {{add_ln129_fu_282_p2[9:2]}};

assign tmp_21_fu_297_p3 = {{tmp_20_fu_287_p4}, {2'd0}};

assign tmp_fu_197_p4 = {{imgwidth_dout[10:5]}};

assign tmp_s_fu_245_p4 = {{add_ln111_fu_225_p2[11:3]}};

assign trunc_ln110_fu_193_p1 = imgwidth_dout[4:0];

assign zext_ln111_1_fu_255_p1 = col_loop_count_ac_fu_231_p4;

assign zext_ln111_fu_215_p1 = and_ln_fu_207_p3;

assign zext_ln116_fu_241_p1 = col_loop_count_ac_fu_231_p4;

assign zext_ln117_fu_267_p1 = col_loop_count_fu_259_p3;

assign zext_ln129_fu_305_p1 = tmp_21_fu_297_p3;

always @ (posedge ap_clk) begin
    zext_ln116_reg_475[31:8] <= 24'b000000000000000000000000;
    zext_ln117_reg_483[9] <= 1'b0;
    zext_ln129_reg_497[1:0] <= 2'b00;
    zext_ln129_reg_497[31:10] <= 22'b0000000000000000000000;
end

endmodule //canny_accel_xFPackNMS_11_11_800_1280_13_13_8_32_2_2_6_24_s
