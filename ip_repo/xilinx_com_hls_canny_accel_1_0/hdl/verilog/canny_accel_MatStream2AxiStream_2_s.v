// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_MatStream2AxiStream_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dst_mat_422_dout,
        dst_mat_422_empty_n,
        dst_mat_422_read,
        ldata1_din,
        ldata1_full_n,
        ldata1_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] dst_mat_422_dout;
input   dst_mat_422_empty_n;
output   dst_mat_422_read;
output  [63:0] ldata1_din;
input   ldata1_full_n;
output   ldata1_write;
input  [15:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [6:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [6:0] last_blk_width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dst_mat_422_read;
reg[63:0] ldata1_din;
reg ldata1_write;
reg rows_read;
reg cols_bound_per_npc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_mat_422_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1301_reg_420;
reg   [0:0] icmp_ln878_reg_424;
reg    ldata1_blk_n;
reg   [0:0] icmp_ln878_1_reg_433;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln874_fu_363_p2;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg   [22:0] indvar_flatten_reg_115;
reg   [6:0] j_V_reg_126;
reg   [6:0] filled_V_reg_137;
reg   [6:0] cols_bound_per_npc_read_reg_383;
reg   [6:0] last_blk_width_read_reg_400;
wire    ap_CS_fsm_state4;
wire   [7:0] op2_assign_fu_190_p2;
reg   [7:0] op2_assign_reg_405;
wire   [22:0] grp_fu_369_p2;
reg   [22:0] mul_ln1286_reg_410;
wire   [22:0] add_ln1301_fu_196_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_predicate_op57_read_state6;
reg    ap_predicate_op64_write_state6;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1301_fu_202_p2;
wire   [0:0] icmp_ln878_fu_241_p2;
wire   [7:0] zext_ln781_fu_246_p1;
reg   [7:0] zext_ln781_reg_428;
wire   [0:0] icmp_ln878_1_fu_256_p2;
wire   [6:0] filled_V_1_fu_269_p2;
reg   [6:0] filled_V_1_reg_437;
wire   [6:0] j_V_2_fu_275_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg   [6:0] ap_phi_mux_filled_V_phi_fu_141_p4;
reg   [6:0] ap_phi_mux_conv_i9_i_i673_pn_i_phi_fu_152_p4;
wire   [6:0] xor_ln213_fu_262_p2;
wire   [6:0] ap_phi_reg_pp0_iter0_conv_i9_i_i673_pn_i_reg_149;
wire   [6:0] xf_bits_per_clock_fu_229_p3;
reg   [63:0] ap_phi_mux_val_V_16_phi_fu_162_p4;
reg   [63:0] ap_phi_reg_pp0_iter1_val_V_16_reg_158;
wire   [63:0] ap_phi_reg_pp0_iter0_val_V_16_reg_158;
reg   [63:0] localbuffer_V_fu_80;
wire   [63:0] localbuffer_V_3_fu_345_p3;
wire   [63:0] ret_fu_291_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state7;
wire   [7:0] cols_bound_per_npc_cast6_i_fu_187_p1;
wire   [0:0] icmp_ln1306_fu_207_p2;
wire   [6:0] select_ln1295_fu_212_p3;
wire   [7:0] zext_ln1306_fu_220_p1;
wire   [0:0] bLast_fu_224_p2;
wire   [7:0] zext_ln1313_fu_237_p1;
wire   [7:0] sub_ln1324_fu_250_p2;
wire   [63:0] zext_ln781_1_fu_281_p1;
wire   [63:0] r_30_fu_285_p2;
wire   [7:0] ret_43_fu_298_p2;
wire   [5:0] trunc_ln789_fu_315_p1;
wire   [5:0] sub_ln546_fu_319_p2;
wire   [63:0] zext_ln781_2_fu_325_p1;
wire   [6:0] trunc_ln455_fu_311_p1;
wire   [63:0] zext_ln799_fu_335_p1;
wire   [0:0] p_Result_s_fu_303_p3;
wire   [63:0] r_fu_329_p2;
wire   [63:0] r_29_fu_339_p2;
wire   [15:0] grp_fu_369_p0;
wire   [6:0] grp_fu_369_p1;
reg    grp_fu_369_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [22:0] grp_fu_369_p00;
wire   [22:0] grp_fu_369_p10;
reg    ap_condition_134;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

canny_accel_mul_mul_16ns_7ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 23 ))
mul_mul_16ns_7ns_23_4_1_U251(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_369_p0),
    .din1(grp_fu_369_p1),
    .ce(grp_fu_369_ce),
    .dout(grp_fu_369_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln874_fu_363_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if (((icmp_ln878_fu_241_p2 == 1'd0) & (icmp_ln1301_fu_202_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_val_V_16_reg_158 <= 64'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_val_V_16_reg_158 <= ap_phi_reg_pp0_iter0_val_V_16_reg_158;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1301_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filled_V_reg_137 <= filled_V_1_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        filled_V_reg_137 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1301_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_115 <= add_ln1301_fu_196_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_115 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1301_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_V_reg_126 <= j_V_2_fu_275_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_V_reg_126 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        localbuffer_V_fu_80 <= 64'd0;
    end else if (((icmp_ln878_1_reg_433 == 1'd1) & (icmp_ln1301_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        localbuffer_V_fu_80 <= ret_fu_291_p2;
    end else if (((icmp_ln878_1_reg_433 == 1'd0) & (icmp_ln1301_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        localbuffer_V_fu_80 <= localbuffer_V_3_fu_345_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_bound_per_npc_read_reg_383 <= cols_bound_per_npc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1301_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        filled_V_1_reg_437 <= filled_V_1_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1301_reg_420 <= icmp_ln1301_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1301_fu_202_p2 == 1'd0))) begin
        icmp_ln878_1_reg_433 <= icmp_ln878_1_fu_256_p2;
        icmp_ln878_reg_424 <= icmp_ln878_fu_241_p2;
        zext_ln781_reg_428[6 : 0] <= zext_ln781_fu_246_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        last_blk_width_read_reg_400 <= last_blk_width;
        mul_ln1286_reg_410 <= grp_fu_369_p2;
        op2_assign_reg_405 <= op2_assign_fu_190_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1301_fu_202_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln874_fu_363_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1301_fu_202_p2 == 1'd0)) begin
        if ((icmp_ln878_1_fu_256_p2 == 1'd1)) begin
            ap_phi_mux_conv_i9_i_i673_pn_i_phi_fu_152_p4 = xf_bits_per_clock_fu_229_p3;
        end else if ((icmp_ln878_1_fu_256_p2 == 1'd0)) begin
            ap_phi_mux_conv_i9_i_i673_pn_i_phi_fu_152_p4 = xor_ln213_fu_262_p2;
        end else begin
            ap_phi_mux_conv_i9_i_i673_pn_i_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_conv_i9_i_i673_pn_i_reg_149;
        end
    end else begin
        ap_phi_mux_conv_i9_i_i673_pn_i_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_conv_i9_i_i673_pn_i_reg_149;
    end
end

always @ (*) begin
    if (((icmp_ln1301_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_filled_V_phi_fu_141_p4 = filled_V_1_reg_437;
    end else begin
        ap_phi_mux_filled_V_phi_fu_141_p4 = filled_V_reg_137;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_424 == 1'd1) & (icmp_ln1301_reg_420 == 1'd0))) begin
        ap_phi_mux_val_V_16_phi_fu_162_p4 = dst_mat_422_dout;
    end else begin
        ap_phi_mux_val_V_16_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_val_V_16_reg_158;
    end
end

always @ (*) begin
    if ((~((icmp_ln874_fu_363_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln878_reg_424 == 1'd1) & (icmp_ln1301_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_mat_422_blk_n = dst_mat_422_empty_n;
    end else begin
        dst_mat_422_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op57_read_state6 == 1'b1))) begin
        dst_mat_422_read = 1'b1;
    end else begin
        dst_mat_422_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_pp0_stage0) | ((1'b1 == ap_CS_fsm_state1) & ((cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_369_ce = 1'b0;
    end else begin
        grp_fu_369_ce = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln874_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln878_1_reg_433 == 1'd0) & (icmp_ln1301_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ldata1_blk_n = ldata1_full_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln874_fu_363_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln874_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ldata1_din = localbuffer_V_fu_80;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op64_write_state6 == 1'b1))) begin
        ldata1_din = ret_fu_291_p2;
    end else begin
        ldata1_din = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln874_fu_363_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln874_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op64_write_state6 == 1'b1)))) begin
        ldata1_write = 1'b1;
    end else begin
        ldata1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1301_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1301_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((icmp_ln874_fu_363_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1301_fu_196_p2 = (indvar_flatten_reg_115 + 23'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ldata1_full_n == 1'b0) & (ap_predicate_op64_write_state6 == 1'b1)) | ((dst_mat_422_empty_n == 1'b0) & (ap_predicate_op57_read_state6 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ldata1_full_n == 1'b0) & (ap_predicate_op64_write_state6 == 1'b1)) | ((dst_mat_422_empty_n == 1'b0) & (ap_predicate_op57_read_state6 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ldata1_full_n == 1'b0) & (ap_predicate_op64_write_state6 == 1'b1)) | ((dst_mat_422_empty_n == 1'b0) & (ap_predicate_op57_read_state6 == 1'b1))));
end

always @ (*) begin
    ap_block_state1 = ((cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = (((ldata1_full_n == 1'b0) & (ap_predicate_op64_write_state6 == 1'b1)) | ((dst_mat_422_empty_n == 1'b0) & (ap_predicate_op57_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_state7 = ((icmp_ln874_fu_363_p2 == 1'd0) & (ldata1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_134 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_conv_i9_i_i673_pn_i_reg_149 = 'bx;

assign ap_phi_reg_pp0_iter0_val_V_16_reg_158 = 'bx;

always @ (*) begin
    ap_predicate_op57_read_state6 = ((icmp_ln878_reg_424 == 1'd1) & (icmp_ln1301_reg_420 == 1'd0));
end

always @ (*) begin
    ap_predicate_op64_write_state6 = ((icmp_ln878_1_reg_433 == 1'd0) & (icmp_ln1301_reg_420 == 1'd0));
end

assign bLast_fu_224_p2 = ((zext_ln1306_fu_220_p1 == op2_assign_reg_405) ? 1'b1 : 1'b0);

assign cols_bound_per_npc_cast6_i_fu_187_p1 = cols_bound_per_npc_read_reg_383;

assign filled_V_1_fu_269_p2 = (ap_phi_mux_conv_i9_i_i673_pn_i_phi_fu_152_p4 + ap_phi_mux_filled_V_phi_fu_141_p4);

assign grp_fu_369_p0 = grp_fu_369_p00;

assign grp_fu_369_p00 = rows_dout;

assign grp_fu_369_p1 = grp_fu_369_p10;

assign grp_fu_369_p10 = cols_bound_per_npc_dout;

assign icmp_ln1301_fu_202_p2 = ((indvar_flatten_reg_115 == mul_ln1286_reg_410) ? 1'b1 : 1'b0);

assign icmp_ln1306_fu_207_p2 = ((j_V_reg_126 == cols_bound_per_npc_read_reg_383) ? 1'b1 : 1'b0);

assign icmp_ln874_fu_363_p2 = ((filled_V_reg_137 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_256_p2 = (($signed(zext_ln781_fu_246_p1) < $signed(sub_ln1324_fu_250_p2)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_241_p2 = ((select_ln1295_fu_212_p3 < cols_bound_per_npc_read_reg_383) ? 1'b1 : 1'b0);

assign j_V_2_fu_275_p2 = (select_ln1295_fu_212_p3 + 7'd1);

assign localbuffer_V_3_fu_345_p3 = ((p_Result_s_fu_303_p3[0:0] == 1'b1) ? r_fu_329_p2 : r_29_fu_339_p2);

assign op2_assign_fu_190_p2 = ($signed(cols_bound_per_npc_cast6_i_fu_187_p1) + $signed(8'd255));

assign p_Result_s_fu_303_p3 = ret_43_fu_298_p2[32'd7];

assign r_29_fu_339_p2 = ap_phi_mux_val_V_16_phi_fu_162_p4 >> zext_ln799_fu_335_p1;

assign r_30_fu_285_p2 = ap_phi_mux_val_V_16_phi_fu_162_p4 << zext_ln781_1_fu_281_p1;

assign r_fu_329_p2 = ap_phi_mux_val_V_16_phi_fu_162_p4 << zext_ln781_2_fu_325_p1;

assign ret_43_fu_298_p2 = (8'd64 - zext_ln781_reg_428);

assign ret_fu_291_p2 = (r_30_fu_285_p2 | localbuffer_V_fu_80);

assign select_ln1295_fu_212_p3 = ((icmp_ln1306_fu_207_p2[0:0] == 1'b1) ? 7'd0 : j_V_reg_126);

assign sub_ln1324_fu_250_p2 = (8'd64 - zext_ln1313_fu_237_p1);

assign sub_ln546_fu_319_p2 = (6'd0 - trunc_ln789_fu_315_p1);

assign trunc_ln455_fu_311_p1 = ret_43_fu_298_p2[6:0];

assign trunc_ln789_fu_315_p1 = ret_43_fu_298_p2[5:0];

assign xf_bits_per_clock_fu_229_p3 = ((bLast_fu_224_p2[0:0] == 1'b1) ? last_blk_width_read_reg_400 : 7'd64);

assign xor_ln213_fu_262_p2 = (xf_bits_per_clock_fu_229_p3 ^ 7'd64);

assign zext_ln1306_fu_220_p1 = select_ln1295_fu_212_p3;

assign zext_ln1313_fu_237_p1 = xf_bits_per_clock_fu_229_p3;

assign zext_ln781_1_fu_281_p1 = filled_V_reg_137;

assign zext_ln781_2_fu_325_p1 = sub_ln546_fu_319_p2;

assign zext_ln781_fu_246_p1 = ap_phi_mux_filled_V_phi_fu_141_p4;

assign zext_ln799_fu_335_p1 = trunc_ln455_fu_311_p1;

always @ (posedge ap_clk) begin
    zext_ln781_reg_428[7] <= 1'b0;
end

endmodule //canny_accel_MatStream2AxiStream_2_s
