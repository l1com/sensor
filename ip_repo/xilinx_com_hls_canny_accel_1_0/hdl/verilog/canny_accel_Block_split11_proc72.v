// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_Block_split11_proc72 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cols,
        rows,
        img_inp,
        img_out,
        low_threshold,
        high_threshold,
        in_mat_rows_out_din,
        in_mat_rows_out_full_n,
        in_mat_rows_out_write,
        in_mat_cols_out_din,
        in_mat_cols_out_full_n,
        in_mat_cols_out_write,
        dst_mat_rows_out_din,
        dst_mat_rows_out_full_n,
        dst_mat_rows_out_write,
        dst_mat_cols_out_din,
        dst_mat_cols_out_full_n,
        dst_mat_cols_out_write,
        img_inp_out_din,
        img_inp_out_full_n,
        img_inp_out_write,
        img_out_out_din,
        img_out_out_full_n,
        img_out_out_write,
        low_threshold_out_din,
        low_threshold_out_full_n,
        low_threshold_out_write,
        high_threshold_out_din,
        high_threshold_out_full_n,
        high_threshold_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] cols;
input  [31:0] rows;
input  [63:0] img_inp;
input  [63:0] img_out;
input  [31:0] low_threshold;
input  [31:0] high_threshold;
output  [31:0] in_mat_rows_out_din;
input   in_mat_rows_out_full_n;
output   in_mat_rows_out_write;
output  [31:0] in_mat_cols_out_din;
input   in_mat_cols_out_full_n;
output   in_mat_cols_out_write;
output  [31:0] dst_mat_rows_out_din;
input   dst_mat_rows_out_full_n;
output   dst_mat_rows_out_write;
output  [10:0] dst_mat_cols_out_din;
input   dst_mat_cols_out_full_n;
output   dst_mat_cols_out_write;
output  [63:0] img_inp_out_din;
input   img_inp_out_full_n;
output   img_inp_out_write;
output  [63:0] img_out_out_din;
input   img_out_out_full_n;
output   img_out_out_write;
output  [31:0] low_threshold_out_din;
input   low_threshold_out_full_n;
output   low_threshold_out_write;
output  [31:0] high_threshold_out_din;
input   high_threshold_out_full_n;
output   high_threshold_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_mat_rows_out_write;
reg in_mat_cols_out_write;
reg dst_mat_rows_out_write;
reg dst_mat_cols_out_write;
reg img_inp_out_write;
reg img_out_out_write;
reg low_threshold_out_write;
reg high_threshold_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_mat_rows_out_blk_n;
reg    in_mat_cols_out_blk_n;
reg    dst_mat_rows_out_blk_n;
reg    dst_mat_cols_out_blk_n;
reg    img_inp_out_blk_n;
reg    img_out_out_blk_n;
reg    low_threshold_out_blk_n;
reg    high_threshold_out_blk_n;
reg    ap_block_state1;
wire   [10:0] empty_fu_163_p1;
wire   [10:0] add_ln31_fu_167_p2;
wire   [5:0] tmp_fu_173_p4;
wire   [4:0] empty_331_fu_191_p1;
wire   [0:0] icmp_ln32_fu_195_p2;
wire   [10:0] npcColsNxt_fu_183_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_mat_cols_out_blk_n = dst_mat_cols_out_full_n;
    end else begin
        dst_mat_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_mat_cols_out_write = 1'b1;
    end else begin
        dst_mat_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_mat_rows_out_blk_n = dst_mat_rows_out_full_n;
    end else begin
        dst_mat_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_mat_rows_out_write = 1'b1;
    end else begin
        dst_mat_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        high_threshold_out_blk_n = high_threshold_out_full_n;
    end else begin
        high_threshold_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        high_threshold_out_write = 1'b1;
    end else begin
        high_threshold_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inp_out_blk_n = img_inp_out_full_n;
    end else begin
        img_inp_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inp_out_write = 1'b1;
    end else begin
        img_inp_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_out_out_blk_n = img_out_out_full_n;
    end else begin
        img_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_out_out_write = 1'b1;
    end else begin
        img_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_cols_out_blk_n = in_mat_cols_out_full_n;
    end else begin
        in_mat_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_cols_out_write = 1'b1;
    end else begin
        in_mat_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_rows_out_blk_n = in_mat_rows_out_full_n;
    end else begin
        in_mat_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_rows_out_write = 1'b1;
    end else begin
        in_mat_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        low_threshold_out_blk_n = low_threshold_out_full_n;
    end else begin
        low_threshold_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        low_threshold_out_write = 1'b1;
    end else begin
        low_threshold_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_167_p2 = (empty_fu_163_p1 + 11'd32);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (high_threshold_out_full_n == 1'b0) | (low_threshold_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_out_full_n == 1'b0) | (dst_mat_cols_out_full_n == 1'b0) | (dst_mat_rows_out_full_n == 1'b0) | (in_mat_cols_out_full_n == 1'b0) | (in_mat_rows_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign dst_mat_cols_out_din = ((icmp_ln32_fu_195_p2[0:0] == 1'b1) ? npcColsNxt_fu_183_p3 : empty_fu_163_p1);

assign dst_mat_rows_out_din = rows;

assign empty_331_fu_191_p1 = cols[4:0];

assign empty_fu_163_p1 = cols[10:0];

assign high_threshold_out_din = high_threshold;

assign icmp_ln32_fu_195_p2 = ((empty_331_fu_191_p1 != 5'd0) ? 1'b1 : 1'b0);

assign img_inp_out_din = img_inp;

assign img_out_out_din = img_out;

assign in_mat_cols_out_din = cols;

assign in_mat_rows_out_din = rows;

assign low_threshold_out_din = low_threshold;

assign npcColsNxt_fu_183_p3 = {{tmp_fu_173_p4}, {5'd0}};

assign start_out = real_start;

assign tmp_fu_173_p4 = {{add_ln31_fu_167_p2[10:5]}};

endmodule //canny_accel_Block_split11_proc72
