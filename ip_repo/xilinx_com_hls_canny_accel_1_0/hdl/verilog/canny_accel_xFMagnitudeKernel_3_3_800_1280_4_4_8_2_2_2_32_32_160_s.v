// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFMagnitudeKernel_3_3_800_1280_4_4_8_2_2_2_32_32_160_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gradx1_mat_43_dout,
        gradx1_mat_43_empty_n,
        gradx1_mat_43_read,
        grady1_mat_46_dout,
        grady1_mat_46_empty_n,
        grady1_mat_46_read,
        magnitude_mat_48_din,
        magnitude_mat_48_full_n,
        magnitude_mat_48_write,
        imgheight_dout,
        imgheight_empty_n,
        imgheight_read,
        imgwidth_dout,
        imgwidth_empty_n,
        imgwidth_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] gradx1_mat_43_dout;
input   gradx1_mat_43_empty_n;
output   gradx1_mat_43_read;
input  [127:0] grady1_mat_46_dout;
input   grady1_mat_46_empty_n;
output   grady1_mat_46_read;
output  [127:0] magnitude_mat_48_din;
input   magnitude_mat_48_full_n;
output   magnitude_mat_48_write;
input  [9:0] imgheight_dout;
input   imgheight_empty_n;
output   imgheight_read;
input  [7:0] imgwidth_dout;
input   imgwidth_empty_n;
output   imgwidth_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gradx1_mat_43_read;
reg grady1_mat_46_read;
reg magnitude_mat_48_write;
reg imgheight_read;
reg imgwidth_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gradx1_mat_43_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln81_reg_764;
reg    grady1_mat_46_blk_n;
reg    magnitude_mat_48_blk_n;
reg    imgheight_blk_n;
reg    imgwidth_blk_n;
reg   [7:0] j_reg_138;
reg   [9:0] imgheight_read_reg_740;
reg   [7:0] imgwidth_read_reg_745;
wire   [9:0] i_2_fu_149_p2;
reg   [9:0] i_2_reg_750;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln74_fu_155_p2;
wire   [7:0] j_2_fu_160_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln81_fu_166_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] i_reg_127;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] p_fu_171_p1;
wire   [0:0] tmp_28_fu_179_p3;
wire   [15:0] sub_ln100_fu_187_p2;
wire   [15:0] q_fu_175_p1;
wire   [0:0] tmp_29_fu_201_p3;
wire   [15:0] sub_ln101_fu_209_p2;
wire   [15:0] q_1_fu_215_p3;
wire   [15:0] p_1_fu_193_p3;
wire   [15:0] p_2_fu_229_p4;
wire   [0:0] tmp_fu_249_p3;
wire   [15:0] sub_ln100_1_fu_257_p2;
wire   [15:0] q_2_fu_239_p4;
wire   [0:0] tmp_30_fu_271_p3;
wire   [15:0] sub_ln101_1_fu_279_p2;
wire   [15:0] q_3_fu_285_p3;
wire   [15:0] p_3_fu_263_p3;
wire   [15:0] p_4_fu_299_p4;
wire   [0:0] tmp_32_fu_319_p3;
wire   [15:0] sub_ln100_2_fu_327_p2;
wire   [15:0] q_4_fu_309_p4;
wire   [0:0] tmp_33_fu_341_p3;
wire   [15:0] sub_ln101_2_fu_349_p2;
wire   [15:0] q_5_fu_355_p3;
wire   [15:0] p_5_fu_333_p3;
wire   [15:0] p_6_fu_369_p4;
wire   [0:0] tmp_35_fu_389_p3;
wire   [15:0] sub_ln100_3_fu_397_p2;
wire   [15:0] q_6_fu_379_p4;
wire   [0:0] tmp_36_fu_411_p3;
wire   [15:0] sub_ln101_3_fu_419_p2;
wire   [15:0] q_7_fu_425_p3;
wire   [15:0] p_7_fu_403_p3;
wire   [15:0] p_8_fu_439_p4;
wire   [0:0] tmp_38_fu_459_p3;
wire   [15:0] sub_ln100_4_fu_467_p2;
wire   [15:0] q_8_fu_449_p4;
wire   [0:0] tmp_39_fu_481_p3;
wire   [15:0] sub_ln101_4_fu_489_p2;
wire   [15:0] q_9_fu_495_p3;
wire   [15:0] p_9_fu_473_p3;
wire   [15:0] p_10_fu_509_p4;
wire   [0:0] tmp_41_fu_529_p3;
wire   [15:0] sub_ln100_5_fu_537_p2;
wire   [15:0] q_10_fu_519_p4;
wire   [0:0] tmp_42_fu_551_p3;
wire   [15:0] sub_ln101_5_fu_559_p2;
wire   [15:0] q_11_fu_565_p3;
wire   [15:0] p_11_fu_543_p3;
wire   [15:0] p_12_fu_579_p4;
wire   [0:0] tmp_44_fu_599_p3;
wire   [15:0] sub_ln100_6_fu_607_p2;
wire   [15:0] q_12_fu_589_p4;
wire   [0:0] tmp_45_fu_621_p3;
wire   [15:0] sub_ln101_6_fu_629_p2;
wire   [15:0] q_13_fu_635_p3;
wire   [15:0] p_13_fu_613_p3;
wire   [15:0] p_14_fu_649_p4;
wire   [0:0] tmp_47_fu_669_p3;
wire   [15:0] sub_ln100_7_fu_677_p2;
wire   [15:0] q_14_fu_659_p4;
wire   [0:0] tmp_48_fu_691_p3;
wire   [15:0] sub_ln101_7_fu_699_p2;
wire   [15:0] q_15_fu_705_p3;
wire   [15:0] p_15_fu_683_p3;
wire   [15:0] tmp_57_fu_713_p2;
wire   [15:0] tmp_56_fu_643_p2;
wire   [15:0] tmp_55_fu_573_p2;
wire   [15:0] tmp_54_fu_503_p2;
wire   [15:0] tmp_53_fu_433_p2;
wire   [15:0] tmp_52_fu_363_p2;
wire   [15:0] tmp_51_fu_293_p2;
wire   [15:0] tmp_50_fu_223_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln74_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln74_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln74_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_127 <= i_2_reg_750;
    end else if ((~((ap_start == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_127 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln81_fu_166_p2 == 1'd0))) begin
        j_reg_138 <= j_2_fu_160_p2;
    end else if (((icmp_ln74_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_138 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_750 <= i_2_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln81_reg_764 <= icmp_ln81_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        imgheight_read_reg_740 <= imgheight_dout;
        imgwidth_read_reg_745 <= imgwidth_dout;
    end
end

always @ (*) begin
    if ((icmp_ln81_fu_166_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_764 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx1_mat_43_blk_n = gradx1_mat_43_empty_n;
    end else begin
        gradx1_mat_43_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_764 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx1_mat_43_read = 1'b1;
    end else begin
        gradx1_mat_43_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_764 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady1_mat_46_blk_n = grady1_mat_46_empty_n;
    end else begin
        grady1_mat_46_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_764 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady1_mat_46_read = 1'b1;
    end else begin
        grady1_mat_46_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_blk_n = imgheight_empty_n;
    end else begin
        imgheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_read = 1'b1;
    end else begin
        imgheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_blk_n = imgwidth_empty_n;
    end else begin
        imgwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_read = 1'b1;
    end else begin
        imgwidth_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_764 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        magnitude_mat_48_blk_n = magnitude_mat_48_full_n;
    end else begin
        magnitude_mat_48_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_764 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        magnitude_mat_48_write = 1'b1;
    end else begin
        magnitude_mat_48_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln74_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln81_fu_166_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln81_fu_166_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln81_reg_764 == 1'd0) & (magnitude_mat_48_full_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (grady1_mat_46_empty_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (gradx1_mat_43_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln81_reg_764 == 1'd0) & (magnitude_mat_48_full_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (grady1_mat_46_empty_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (gradx1_mat_43_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln81_reg_764 == 1'd0) & (magnitude_mat_48_full_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (grady1_mat_46_empty_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (gradx1_mat_43_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln81_reg_764 == 1'd0) & (magnitude_mat_48_full_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (grady1_mat_46_empty_n == 1'b0)) | ((icmp_ln81_reg_764 == 1'd0) & (gradx1_mat_43_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_2_fu_149_p2 = (i_reg_127 + 10'd1);

assign icmp_ln74_fu_155_p2 = ((i_reg_127 == imgheight_read_reg_740) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_166_p2 = ((j_reg_138 == imgwidth_read_reg_745) ? 1'b1 : 1'b0);

assign j_2_fu_160_p2 = (j_reg_138 + 8'd1);

assign magnitude_mat_48_din = {{{{{{{{tmp_57_fu_713_p2}, {tmp_56_fu_643_p2}}, {tmp_55_fu_573_p2}}, {tmp_54_fu_503_p2}}, {tmp_53_fu_433_p2}}, {tmp_52_fu_363_p2}}, {tmp_51_fu_293_p2}}, {tmp_50_fu_223_p2}};

assign p_10_fu_509_p4 = {{gradx1_mat_43_dout[95:80]}};

assign p_11_fu_543_p3 = ((tmp_41_fu_529_p3[0:0] == 1'b1) ? sub_ln100_5_fu_537_p2 : p_10_fu_509_p4);

assign p_12_fu_579_p4 = {{gradx1_mat_43_dout[111:96]}};

assign p_13_fu_613_p3 = ((tmp_44_fu_599_p3[0:0] == 1'b1) ? sub_ln100_6_fu_607_p2 : p_12_fu_579_p4);

assign p_14_fu_649_p4 = {{gradx1_mat_43_dout[127:112]}};

assign p_15_fu_683_p3 = ((tmp_47_fu_669_p3[0:0] == 1'b1) ? sub_ln100_7_fu_677_p2 : p_14_fu_649_p4);

assign p_1_fu_193_p3 = ((tmp_28_fu_179_p3[0:0] == 1'b1) ? sub_ln100_fu_187_p2 : p_fu_171_p1);

assign p_2_fu_229_p4 = {{gradx1_mat_43_dout[31:16]}};

assign p_3_fu_263_p3 = ((tmp_fu_249_p3[0:0] == 1'b1) ? sub_ln100_1_fu_257_p2 : p_2_fu_229_p4);

assign p_4_fu_299_p4 = {{gradx1_mat_43_dout[47:32]}};

assign p_5_fu_333_p3 = ((tmp_32_fu_319_p3[0:0] == 1'b1) ? sub_ln100_2_fu_327_p2 : p_4_fu_299_p4);

assign p_6_fu_369_p4 = {{gradx1_mat_43_dout[63:48]}};

assign p_7_fu_403_p3 = ((tmp_35_fu_389_p3[0:0] == 1'b1) ? sub_ln100_3_fu_397_p2 : p_6_fu_369_p4);

assign p_8_fu_439_p4 = {{gradx1_mat_43_dout[79:64]}};

assign p_9_fu_473_p3 = ((tmp_38_fu_459_p3[0:0] == 1'b1) ? sub_ln100_4_fu_467_p2 : p_8_fu_439_p4);

assign p_fu_171_p1 = gradx1_mat_43_dout[15:0];

assign q_10_fu_519_p4 = {{grady1_mat_46_dout[95:80]}};

assign q_11_fu_565_p3 = ((tmp_42_fu_551_p3[0:0] == 1'b1) ? sub_ln101_5_fu_559_p2 : q_10_fu_519_p4);

assign q_12_fu_589_p4 = {{grady1_mat_46_dout[111:96]}};

assign q_13_fu_635_p3 = ((tmp_45_fu_621_p3[0:0] == 1'b1) ? sub_ln101_6_fu_629_p2 : q_12_fu_589_p4);

assign q_14_fu_659_p4 = {{grady1_mat_46_dout[127:112]}};

assign q_15_fu_705_p3 = ((tmp_48_fu_691_p3[0:0] == 1'b1) ? sub_ln101_7_fu_699_p2 : q_14_fu_659_p4);

assign q_1_fu_215_p3 = ((tmp_29_fu_201_p3[0:0] == 1'b1) ? sub_ln101_fu_209_p2 : q_fu_175_p1);

assign q_2_fu_239_p4 = {{grady1_mat_46_dout[31:16]}};

assign q_3_fu_285_p3 = ((tmp_30_fu_271_p3[0:0] == 1'b1) ? sub_ln101_1_fu_279_p2 : q_2_fu_239_p4);

assign q_4_fu_309_p4 = {{grady1_mat_46_dout[47:32]}};

assign q_5_fu_355_p3 = ((tmp_33_fu_341_p3[0:0] == 1'b1) ? sub_ln101_2_fu_349_p2 : q_4_fu_309_p4);

assign q_6_fu_379_p4 = {{grady1_mat_46_dout[63:48]}};

assign q_7_fu_425_p3 = ((tmp_36_fu_411_p3[0:0] == 1'b1) ? sub_ln101_3_fu_419_p2 : q_6_fu_379_p4);

assign q_8_fu_449_p4 = {{grady1_mat_46_dout[79:64]}};

assign q_9_fu_495_p3 = ((tmp_39_fu_481_p3[0:0] == 1'b1) ? sub_ln101_4_fu_489_p2 : q_8_fu_449_p4);

assign q_fu_175_p1 = grady1_mat_46_dout[15:0];

assign sub_ln100_1_fu_257_p2 = (16'd0 - p_2_fu_229_p4);

assign sub_ln100_2_fu_327_p2 = (16'd0 - p_4_fu_299_p4);

assign sub_ln100_3_fu_397_p2 = (16'd0 - p_6_fu_369_p4);

assign sub_ln100_4_fu_467_p2 = (16'd0 - p_8_fu_439_p4);

assign sub_ln100_5_fu_537_p2 = (16'd0 - p_10_fu_509_p4);

assign sub_ln100_6_fu_607_p2 = (16'd0 - p_12_fu_579_p4);

assign sub_ln100_7_fu_677_p2 = (16'd0 - p_14_fu_649_p4);

assign sub_ln100_fu_187_p2 = (16'd0 - p_fu_171_p1);

assign sub_ln101_1_fu_279_p2 = (16'd0 - q_2_fu_239_p4);

assign sub_ln101_2_fu_349_p2 = (16'd0 - q_4_fu_309_p4);

assign sub_ln101_3_fu_419_p2 = (16'd0 - q_6_fu_379_p4);

assign sub_ln101_4_fu_489_p2 = (16'd0 - q_8_fu_449_p4);

assign sub_ln101_5_fu_559_p2 = (16'd0 - q_10_fu_519_p4);

assign sub_ln101_6_fu_629_p2 = (16'd0 - q_12_fu_589_p4);

assign sub_ln101_7_fu_699_p2 = (16'd0 - q_14_fu_659_p4);

assign sub_ln101_fu_209_p2 = (16'd0 - q_fu_175_p1);

assign tmp_28_fu_179_p3 = gradx1_mat_43_dout[32'd15];

assign tmp_29_fu_201_p3 = grady1_mat_46_dout[32'd15];

assign tmp_30_fu_271_p3 = grady1_mat_46_dout[32'd31];

assign tmp_32_fu_319_p3 = gradx1_mat_43_dout[32'd47];

assign tmp_33_fu_341_p3 = grady1_mat_46_dout[32'd47];

assign tmp_35_fu_389_p3 = gradx1_mat_43_dout[32'd63];

assign tmp_36_fu_411_p3 = grady1_mat_46_dout[32'd63];

assign tmp_38_fu_459_p3 = gradx1_mat_43_dout[32'd79];

assign tmp_39_fu_481_p3 = grady1_mat_46_dout[32'd79];

assign tmp_41_fu_529_p3 = gradx1_mat_43_dout[32'd95];

assign tmp_42_fu_551_p3 = grady1_mat_46_dout[32'd95];

assign tmp_44_fu_599_p3 = gradx1_mat_43_dout[32'd111];

assign tmp_45_fu_621_p3 = grady1_mat_46_dout[32'd111];

assign tmp_47_fu_669_p3 = gradx1_mat_43_dout[32'd127];

assign tmp_48_fu_691_p3 = grady1_mat_46_dout[32'd127];

assign tmp_50_fu_223_p2 = (q_1_fu_215_p3 + p_1_fu_193_p3);

assign tmp_51_fu_293_p2 = (q_3_fu_285_p3 + p_3_fu_263_p3);

assign tmp_52_fu_363_p2 = (q_5_fu_355_p3 + p_5_fu_333_p3);

assign tmp_53_fu_433_p2 = (q_7_fu_425_p3 + p_7_fu_403_p3);

assign tmp_54_fu_503_p2 = (q_9_fu_495_p3 + p_9_fu_473_p3);

assign tmp_55_fu_573_p2 = (q_11_fu_565_p3 + p_11_fu_543_p3);

assign tmp_56_fu_643_p2 = (q_13_fu_635_p3 + p_13_fu_613_p3);

assign tmp_57_fu_713_p2 = (q_15_fu_705_p3 + p_15_fu_683_p3);

assign tmp_fu_249_p3 = gradx1_mat_43_dout[32'd31];

endmodule //canny_accel_xFMagnitudeKernel_3_3_800_1280_4_4_8_2_2_2_32_32_160_s
