-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgetracing_accel_TopDown_11_3_1024_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    iBuff_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_ce0 : OUT STD_LOGIC;
    iBuff_we0 : OUT STD_LOGIC;
    iBuff_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff_ce1 : OUT STD_LOGIC;
    iBuff_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff1_ce0 : OUT STD_LOGIC;
    iBuff1_we0 : OUT STD_LOGIC;
    iBuff1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff1_ce1 : OUT STD_LOGIC;
    iBuff1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff2_ce0 : OUT STD_LOGIC;
    iBuff2_we0 : OUT STD_LOGIC;
    iBuff2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff2_ce1 : OUT STD_LOGIC;
    iBuff2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff3_ce0 : OUT STD_LOGIC;
    iBuff3_we0 : OUT STD_LOGIC;
    iBuff3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff3_ce1 : OUT STD_LOGIC;
    iBuff3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff4_ce0 : OUT STD_LOGIC;
    iBuff4_we0 : OUT STD_LOGIC;
    iBuff4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff4_ce1 : OUT STD_LOGIC;
    iBuff4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff5_ce0 : OUT STD_LOGIC;
    iBuff5_we0 : OUT STD_LOGIC;
    iBuff5_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff5_ce1 : OUT STD_LOGIC;
    iBuff5_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff6_ce0 : OUT STD_LOGIC;
    iBuff6_we0 : OUT STD_LOGIC;
    iBuff6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff6_ce1 : OUT STD_LOGIC;
    iBuff6_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff7_ce0 : OUT STD_LOGIC;
    iBuff7_we0 : OUT STD_LOGIC;
    iBuff7_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff7_ce1 : OUT STD_LOGIC;
    iBuff7_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff8_ce0 : OUT STD_LOGIC;
    iBuff8_we0 : OUT STD_LOGIC;
    iBuff8_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff8_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff8_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff8_ce1 : OUT STD_LOGIC;
    iBuff8_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff9_ce0 : OUT STD_LOGIC;
    iBuff9_we0 : OUT STD_LOGIC;
    iBuff9_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff9_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff9_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff9_ce1 : OUT STD_LOGIC;
    iBuff9_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff10_ce0 : OUT STD_LOGIC;
    iBuff10_we0 : OUT STD_LOGIC;
    iBuff10_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    iBuff10_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    iBuff10_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    iBuff10_ce1 : OUT STD_LOGIC;
    iBuff10_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bramtotal : IN STD_LOGIC_VECTOR (3 downto 0);
    bdrows : IN STD_LOGIC_VECTOR (10 downto 0);
    ram_row_depth : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of edgetracing_accel_TopDown_11_3_1024_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal el_reg_566 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_31_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_29_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_27_reg_595 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_25_reg_604 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_23_reg_613 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_21_reg_622 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_19_reg_631 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_17_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_15_reg_649 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_13_reg_658 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_11_reg_667 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr3_V_10_0_reg_676 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_9_0_reg_685 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_8_0_reg_694 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_7_0_reg_703 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_6_0_reg_712 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_5_0_reg_721 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_4_0_reg_730 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_3_0_reg_739 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_2_0_reg_748 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_1_0_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_0_0_reg_766 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2712_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_reg_2804 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_2718_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul143_reg_2809 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub145_t_fu_822_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub145_t_reg_2814 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_837_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_reg_2874 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_841_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_2879 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal arr3_V_0_fu_853_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_1_fu_857_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_2_fu_861_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_3_fu_865_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_4_fu_869_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_5_fu_873_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_6_fu_877_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_7_fu_881_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_8_fu_885_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_9_fu_889_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_10_fu_893_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_t617_cast5_fu_897_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_t617_cast5_reg_2998 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t593_cast_fu_905_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t593_cast_reg_3004 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t569_cast_fu_914_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t569_cast_reg_3010 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t545_cast_fu_924_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t545_cast_reg_3016 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t521_cast_fu_936_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t521_cast_reg_3022 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t497_cast_fu_946_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t497_cast_reg_3028 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t473_fu_950_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t473_reg_3034 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t449_fu_956_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t449_reg_3040 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t1_fu_962_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t1_reg_3046 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln233_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_reg_3052 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_1_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_1_reg_3076 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln239_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln239_reg_3110 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_3122 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln189_reg_3122_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp144_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp144_reg_3181 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp144_reg_3181_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln189_fu_1017_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln189_reg_3185 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln190_fu_1021_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal arr1_V_0_1_reg_3196 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal arr1_V_1_1_reg_3201 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_2_1_reg_3206 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_3_1_reg_3211 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_4_1_reg_3216 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_5_1_reg_3221 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_6_1_reg_3226 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_7_1_reg_3231 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_8_1_reg_3236 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_9_1_reg_3241 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr1_V_10_1_reg_3246 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_0_2_fu_1594_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_0_2_reg_3251 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr3_V_0_3_fu_1684_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_1_5_fu_1701_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_2_4_fu_1725_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_3_4_fu_2121_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_4_4_fu_2145_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_5_4_fu_2169_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_6_4_fu_2574_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_7_4_fu_2598_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_10_4_fu_2622_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_9_4_fu_2636_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_8_4_fu_2650_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_2662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_3311 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_addr_2_reg_3316 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_2685_p13 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_3321 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal call_ret_PixelProcessNew_1_s_fu_775_ap_ready : STD_LOGIC;
    signal call_ret_PixelProcessNew_1_s_fu_775_k1 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret_PixelProcessNew_1_s_fu_775_k2 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret_PixelProcessNew_1_s_fu_775_k3 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret_PixelProcessNew_1_s_fu_775_ap_return_0 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret_PixelProcessNew_1_s_fu_775_ap_return_1 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret_PixelProcessNew_1_s_fu_775_ap_return_2 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret1_PixelProcessNew_1_s_fu_782_ap_ready : STD_LOGIC;
    signal call_ret1_PixelProcessNew_1_s_fu_782_k1 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret1_PixelProcessNew_1_s_fu_782_k2 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret1_PixelProcessNew_1_s_fu_782_k3 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret1_PixelProcessNew_1_s_fu_782_ap_return_0 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret1_PixelProcessNew_1_s_fu_782_ap_return_1 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret1_PixelProcessNew_1_s_fu_782_ap_return_2 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret2_PixelProcessNew_1_s_fu_789_ap_ready : STD_LOGIC;
    signal call_ret2_PixelProcessNew_1_s_fu_789_k1 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret2_PixelProcessNew_1_s_fu_789_k2 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret2_PixelProcessNew_1_s_fu_789_k3 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret2_PixelProcessNew_1_s_fu_789_ap_return_0 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret2_PixelProcessNew_1_s_fu_789_ap_return_1 : STD_LOGIC_VECTOR (67 downto 0);
    signal call_ret2_PixelProcessNew_1_s_fu_789_ap_return_2 : STD_LOGIC_VECTOR (67 downto 0);
    signal j_reg_554 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_p_Val2_31_phi_fu_580_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_Val2_29_phi_fu_589_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_27_phi_fu_598_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_25_phi_fu_607_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_23_phi_fu_616_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_21_phi_fu_625_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_19_phi_fu_634_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_17_phi_fu_643_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_15_phi_fu_652_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_13_phi_fu_661_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_Val2_11_phi_fu_670_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln189_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast7_fu_2680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_504_fu_1037_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_17_fu_1064_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_18_fu_1091_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_19_fu_1114_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_20_fu_1137_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_21_fu_1160_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_22_fu_1183_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_23_fu_1206_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_24_fu_1229_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_25_fu_1252_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_26_fu_1279_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_1_4_fu_1626_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_2_10_fu_1659_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_3_10_fu_2030_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_4_10_fu_2063_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_5_10_fu_2096_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_6_10_fu_2474_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_7_10_fu_2507_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_8_10_fu_2549_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_9_9_fu_2541_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_10_4_fu_2526_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bdrows_cast8_fu_800_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub142_fu_812_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln175_fu_828_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_831_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_t617_cast_fu_901_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_t569_fu_908_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_t545_fu_918_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_t_fu_928_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_t497_fu_940_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln189_1_fu_1003_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_1027_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_2_fu_1054_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_4_fu_1081_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_6_fu_1104_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_9_fu_1127_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_1_fu_1150_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_3_fu_1173_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_7_fu_1196_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_10_fu_1219_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_12_fu_1242_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_14_fu_1269_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Val2_33_fu_1407_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_fu_1444_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln_fu_1296_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_34_fu_1457_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_9_fu_1494_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_1_fu_1333_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_35_fu_1507_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_10_fu_1544_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_2_fu_1370_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_2_11_fu_1569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_2_fu_1573_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_3_11_fu_1601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_3_fu_1605_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_2_5_fu_1580_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_1_2_fu_1587_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_4_11_fu_1634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_4_fu_1638_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_3_5_fu_1612_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_2_8_fu_1619_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr3_V_0_4_fu_1667_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_1_1_fu_1077_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_0_1_fu_1050_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_1_6_fu_1691_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_1_3_fu_1677_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_2_5_fu_1708_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln239_fu_1718_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_42_fu_1843_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_14_fu_1880_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_3_fu_1732_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_43_fu_1893_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_15_fu_1930_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_4_fu_1769_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_44_fu_1943_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_16_fu_1980_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_5_fu_1806_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_5_11_fu_2005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_5_fu_2009_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_4_5_fu_1645_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_3_8_fu_1652_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_6_11_fu_2038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_6_fu_2042_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_5_5_fu_2016_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_4_8_fu_2023_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_7_11_fu_2071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_7_fu_2075_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_6_5_fu_2049_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_5_8_fu_2056_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr3_V_3_5_fu_2104_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln237_fu_2114_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_4_5_fu_2128_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln238_fu_2138_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_5_5_fu_2152_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln239_2_fu_2162_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_51_fu_2287_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_20_fu_2324_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_6_fu_2176_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_52_fu_2337_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_21_fu_2374_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_7_fu_2213_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_53_fu_2387_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_22_fu_2424_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln215_8_fu_2250_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_8_11_fu_2449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_8_fu_2453_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_7_5_fu_2082_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_6_8_fu_2089_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_9_10_fu_2482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_9_fu_2486_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_8_5_fu_2460_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_7_8_fu_2467_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_10_5_fu_2515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_10_fu_2519_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_9_6_fu_2493_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_9_8_fu_2534_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr4_V_8_8_fu_2500_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr3_V_6_5_fu_2557_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln237_3_fu_2567_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_7_5_fu_2581_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln238_3_fu_2591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_10_1_fu_1292_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_8_5_fu_2605_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_10_3_fu_2615_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal arr3_V_9_1_fu_1265_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln239_6_fu_2629_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln239_8_fu_2643_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_505_fu_2657_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_506_fu_2676_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_2685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2712_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2712_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2718_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln175_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_120 : BOOLEAN;
    signal ap_enable_state7_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_173 : BOOLEAN;
    signal ap_enable_state8_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_369 : BOOLEAN;
    signal ap_enable_state9_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_372 : BOOLEAN;
    signal ap_enable_operation_122 : BOOLEAN;
    signal ap_enable_operation_178 : BOOLEAN;
    signal ap_enable_operation_349 : BOOLEAN;
    signal ap_enable_operation_124 : BOOLEAN;
    signal ap_enable_operation_183 : BOOLEAN;
    signal ap_enable_operation_351 : BOOLEAN;
    signal ap_enable_operation_126 : BOOLEAN;
    signal ap_enable_operation_187 : BOOLEAN;
    signal ap_enable_operation_353 : BOOLEAN;
    signal ap_enable_operation_128 : BOOLEAN;
    signal ap_enable_operation_191 : BOOLEAN;
    signal ap_enable_operation_355 : BOOLEAN;
    signal ap_enable_operation_130 : BOOLEAN;
    signal ap_enable_operation_195 : BOOLEAN;
    signal ap_enable_operation_357 : BOOLEAN;
    signal ap_enable_operation_132 : BOOLEAN;
    signal ap_enable_operation_199 : BOOLEAN;
    signal ap_enable_operation_359 : BOOLEAN;
    signal ap_enable_operation_134 : BOOLEAN;
    signal ap_enable_operation_203 : BOOLEAN;
    signal ap_enable_operation_361 : BOOLEAN;
    signal ap_enable_operation_136 : BOOLEAN;
    signal ap_enable_operation_207 : BOOLEAN;
    signal ap_enable_operation_363 : BOOLEAN;
    signal ap_enable_operation_138 : BOOLEAN;
    signal ap_enable_operation_211 : BOOLEAN;
    signal ap_enable_operation_365 : BOOLEAN;
    signal ap_enable_operation_140 : BOOLEAN;
    signal ap_enable_operation_216 : BOOLEAN;
    signal ap_enable_operation_367 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_2712_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2712_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2718_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgetracing_accel_PixelProcessNew_1_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        k1 : IN STD_LOGIC_VECTOR (67 downto 0);
        k2 : IN STD_LOGIC_VECTOR (67 downto 0);
        k3 : IN STD_LOGIC_VECTOR (67 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (67 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (67 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;


    component edgetracing_accel_mux_164_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgetracing_accel_mux_114_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_6ns_11ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_12s_6ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    call_ret_PixelProcessNew_1_s_fu_775 : component edgetracing_accel_PixelProcessNew_1_s
    port map (
        ap_ready => call_ret_PixelProcessNew_1_s_fu_775_ap_ready,
        k1 => call_ret_PixelProcessNew_1_s_fu_775_k1,
        k2 => call_ret_PixelProcessNew_1_s_fu_775_k2,
        k3 => call_ret_PixelProcessNew_1_s_fu_775_k3,
        ap_return_0 => call_ret_PixelProcessNew_1_s_fu_775_ap_return_0,
        ap_return_1 => call_ret_PixelProcessNew_1_s_fu_775_ap_return_1,
        ap_return_2 => call_ret_PixelProcessNew_1_s_fu_775_ap_return_2);

    call_ret1_PixelProcessNew_1_s_fu_782 : component edgetracing_accel_PixelProcessNew_1_s
    port map (
        ap_ready => call_ret1_PixelProcessNew_1_s_fu_782_ap_ready,
        k1 => call_ret1_PixelProcessNew_1_s_fu_782_k1,
        k2 => call_ret1_PixelProcessNew_1_s_fu_782_k2,
        k3 => call_ret1_PixelProcessNew_1_s_fu_782_k3,
        ap_return_0 => call_ret1_PixelProcessNew_1_s_fu_782_ap_return_0,
        ap_return_1 => call_ret1_PixelProcessNew_1_s_fu_782_ap_return_1,
        ap_return_2 => call_ret1_PixelProcessNew_1_s_fu_782_ap_return_2);

    call_ret2_PixelProcessNew_1_s_fu_789 : component edgetracing_accel_PixelProcessNew_1_s
    port map (
        ap_ready => call_ret2_PixelProcessNew_1_s_fu_789_ap_ready,
        k1 => call_ret2_PixelProcessNew_1_s_fu_789_k1,
        k2 => call_ret2_PixelProcessNew_1_s_fu_789_k2,
        k3 => call_ret2_PixelProcessNew_1_s_fu_789_k3,
        ap_return_0 => call_ret2_PixelProcessNew_1_s_fu_789_ap_return_0,
        ap_return_1 => call_ret2_PixelProcessNew_1_s_fu_789_ap_return_1,
        ap_return_2 => call_ret2_PixelProcessNew_1_s_fu_789_ap_return_2);

    mux_164_64_1_1_U4 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_s_504_fu_1037_p3,
        din1 => p_Result_17_fu_1064_p3,
        din2 => p_Result_18_fu_1091_p3,
        din3 => p_Result_18_fu_1091_p3,
        din4 => p_Result_18_fu_1091_p3,
        din5 => p_Result_18_fu_1091_p3,
        din6 => p_Result_18_fu_1091_p3,
        din7 => p_Result_18_fu_1091_p3,
        din8 => p_Result_18_fu_1091_p3,
        din9 => p_Result_18_fu_1091_p3,
        din10 => p_Result_18_fu_1091_p3,
        din11 => p_Result_18_fu_1091_p3,
        din12 => p_Result_18_fu_1091_p3,
        din13 => p_Result_18_fu_1091_p3,
        din14 => p_Result_18_fu_1091_p3,
        din15 => p_Result_18_fu_1091_p3,
        din16 => j_t617_cast5_reg_2998,
        dout => phi_ln_fu_1296_p18);

    mux_164_64_1_1_U5 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_19_fu_1114_p3,
        din1 => p_Result_17_fu_1064_p3,
        din2 => p_Result_18_fu_1091_p3,
        din3 => p_Result_19_fu_1114_p3,
        din4 => p_Result_19_fu_1114_p3,
        din5 => p_Result_19_fu_1114_p3,
        din6 => p_Result_19_fu_1114_p3,
        din7 => p_Result_19_fu_1114_p3,
        din8 => p_Result_19_fu_1114_p3,
        din9 => p_Result_19_fu_1114_p3,
        din10 => p_Result_19_fu_1114_p3,
        din11 => p_Result_19_fu_1114_p3,
        din12 => p_Result_19_fu_1114_p3,
        din13 => p_Result_19_fu_1114_p3,
        din14 => p_Result_19_fu_1114_p3,
        din15 => p_Result_19_fu_1114_p3,
        din16 => p_t593_cast_reg_3004,
        dout => phi_ln215_1_fu_1333_p18);

    mux_164_64_1_1_U6 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_20_fu_1137_p3,
        din1 => p_Result_20_fu_1137_p3,
        din2 => p_Result_18_fu_1091_p3,
        din3 => p_Result_19_fu_1114_p3,
        din4 => p_Result_20_fu_1137_p3,
        din5 => p_Result_20_fu_1137_p3,
        din6 => p_Result_20_fu_1137_p3,
        din7 => p_Result_20_fu_1137_p3,
        din8 => p_Result_20_fu_1137_p3,
        din9 => p_Result_20_fu_1137_p3,
        din10 => p_Result_20_fu_1137_p3,
        din11 => p_Result_20_fu_1137_p3,
        din12 => p_Result_20_fu_1137_p3,
        din13 => p_Result_20_fu_1137_p3,
        din14 => p_Result_20_fu_1137_p3,
        din15 => p_Result_20_fu_1137_p3,
        din16 => p_t569_cast_reg_3010,
        dout => phi_ln215_2_fu_1370_p18);

    mux_164_64_1_1_U7 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff_q1,
        din1 => iBuff1_q1,
        din2 => iBuff2_q1,
        din3 => iBuff2_q1,
        din4 => iBuff2_q1,
        din5 => iBuff2_q1,
        din6 => iBuff2_q1,
        din7 => iBuff2_q1,
        din8 => iBuff2_q1,
        din9 => iBuff2_q1,
        din10 => iBuff2_q1,
        din11 => iBuff2_q1,
        din12 => iBuff2_q1,
        din13 => iBuff2_q1,
        din14 => iBuff2_q1,
        din15 => iBuff2_q1,
        din16 => j_t617_cast5_reg_2998,
        dout => p_Val2_33_fu_1407_p18);

    mux_164_64_1_1_U8 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff3_q1,
        din1 => iBuff1_q1,
        din2 => iBuff2_q1,
        din3 => iBuff3_q1,
        din4 => iBuff3_q1,
        din5 => iBuff3_q1,
        din6 => iBuff3_q1,
        din7 => iBuff3_q1,
        din8 => iBuff3_q1,
        din9 => iBuff3_q1,
        din10 => iBuff3_q1,
        din11 => iBuff3_q1,
        din12 => iBuff3_q1,
        din13 => iBuff3_q1,
        din14 => iBuff3_q1,
        din15 => iBuff3_q1,
        din16 => p_t593_cast_reg_3004,
        dout => p_Val2_34_fu_1457_p18);

    mux_164_64_1_1_U9 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff4_q1,
        din1 => iBuff4_q1,
        din2 => iBuff2_q1,
        din3 => iBuff3_q1,
        din4 => iBuff4_q1,
        din5 => iBuff4_q1,
        din6 => iBuff4_q1,
        din7 => iBuff4_q1,
        din8 => iBuff4_q1,
        din9 => iBuff4_q1,
        din10 => iBuff4_q1,
        din11 => iBuff4_q1,
        din12 => iBuff4_q1,
        din13 => iBuff4_q1,
        din14 => iBuff4_q1,
        din15 => iBuff4_q1,
        din16 => p_t569_cast_reg_3010,
        dout => p_Val2_35_fu_1507_p18);

    mux_164_64_1_1_U10 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_21_fu_1160_p3,
        din1 => p_Result_21_fu_1160_p3,
        din2 => p_Result_21_fu_1160_p3,
        din3 => p_Result_19_fu_1114_p3,
        din4 => p_Result_20_fu_1137_p3,
        din5 => p_Result_21_fu_1160_p3,
        din6 => p_Result_21_fu_1160_p3,
        din7 => p_Result_21_fu_1160_p3,
        din8 => p_Result_21_fu_1160_p3,
        din9 => p_Result_21_fu_1160_p3,
        din10 => p_Result_21_fu_1160_p3,
        din11 => p_Result_21_fu_1160_p3,
        din12 => p_Result_21_fu_1160_p3,
        din13 => p_Result_21_fu_1160_p3,
        din14 => p_Result_21_fu_1160_p3,
        din15 => p_Result_21_fu_1160_p3,
        din16 => p_t545_cast_reg_3016,
        dout => phi_ln215_3_fu_1732_p18);

    mux_164_64_1_1_U11 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_22_fu_1183_p3,
        din1 => p_Result_22_fu_1183_p3,
        din2 => p_Result_22_fu_1183_p3,
        din3 => p_Result_22_fu_1183_p3,
        din4 => p_Result_20_fu_1137_p3,
        din5 => p_Result_21_fu_1160_p3,
        din6 => p_Result_22_fu_1183_p3,
        din7 => p_Result_22_fu_1183_p3,
        din8 => p_Result_22_fu_1183_p3,
        din9 => p_Result_22_fu_1183_p3,
        din10 => p_Result_22_fu_1183_p3,
        din11 => p_Result_22_fu_1183_p3,
        din12 => p_Result_22_fu_1183_p3,
        din13 => p_Result_22_fu_1183_p3,
        din14 => p_Result_22_fu_1183_p3,
        din15 => p_Result_22_fu_1183_p3,
        din16 => p_t521_cast_reg_3022,
        dout => phi_ln215_4_fu_1769_p18);

    mux_164_64_1_1_U12 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_23_fu_1206_p3,
        din1 => p_Result_23_fu_1206_p3,
        din2 => p_Result_23_fu_1206_p3,
        din3 => p_Result_23_fu_1206_p3,
        din4 => p_Result_23_fu_1206_p3,
        din5 => p_Result_21_fu_1160_p3,
        din6 => p_Result_22_fu_1183_p3,
        din7 => p_Result_23_fu_1206_p3,
        din8 => p_Result_23_fu_1206_p3,
        din9 => p_Result_23_fu_1206_p3,
        din10 => p_Result_23_fu_1206_p3,
        din11 => p_Result_23_fu_1206_p3,
        din12 => p_Result_23_fu_1206_p3,
        din13 => p_Result_23_fu_1206_p3,
        din14 => p_Result_23_fu_1206_p3,
        din15 => p_Result_23_fu_1206_p3,
        din16 => p_t497_cast_reg_3028,
        dout => phi_ln215_5_fu_1806_p18);

    mux_164_64_1_1_U13 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff5_q1,
        din1 => iBuff5_q1,
        din2 => iBuff5_q1,
        din3 => iBuff3_q1,
        din4 => iBuff4_q1,
        din5 => iBuff5_q1,
        din6 => iBuff5_q1,
        din7 => iBuff5_q1,
        din8 => iBuff5_q1,
        din9 => iBuff5_q1,
        din10 => iBuff5_q1,
        din11 => iBuff5_q1,
        din12 => iBuff5_q1,
        din13 => iBuff5_q1,
        din14 => iBuff5_q1,
        din15 => iBuff5_q1,
        din16 => p_t545_cast_reg_3016,
        dout => p_Val2_42_fu_1843_p18);

    mux_164_64_1_1_U14 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff6_q1,
        din1 => iBuff6_q1,
        din2 => iBuff6_q1,
        din3 => iBuff6_q1,
        din4 => iBuff4_q1,
        din5 => iBuff5_q1,
        din6 => iBuff6_q1,
        din7 => iBuff6_q1,
        din8 => iBuff6_q1,
        din9 => iBuff6_q1,
        din10 => iBuff6_q1,
        din11 => iBuff6_q1,
        din12 => iBuff6_q1,
        din13 => iBuff6_q1,
        din14 => iBuff6_q1,
        din15 => iBuff6_q1,
        din16 => p_t521_cast_reg_3022,
        dout => p_Val2_43_fu_1893_p18);

    mux_164_64_1_1_U15 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff7_q1,
        din1 => iBuff7_q1,
        din2 => iBuff7_q1,
        din3 => iBuff7_q1,
        din4 => iBuff7_q1,
        din5 => iBuff5_q1,
        din6 => iBuff6_q1,
        din7 => iBuff7_q1,
        din8 => iBuff7_q1,
        din9 => iBuff7_q1,
        din10 => iBuff7_q1,
        din11 => iBuff7_q1,
        din12 => iBuff7_q1,
        din13 => iBuff7_q1,
        din14 => iBuff7_q1,
        din15 => iBuff7_q1,
        din16 => p_t497_cast_reg_3028,
        dout => p_Val2_44_fu_1943_p18);

    mux_164_64_1_1_U16 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_24_fu_1229_p3,
        din1 => p_Result_24_fu_1229_p3,
        din2 => p_Result_24_fu_1229_p3,
        din3 => p_Result_24_fu_1229_p3,
        din4 => p_Result_24_fu_1229_p3,
        din5 => p_Result_24_fu_1229_p3,
        din6 => p_Result_22_fu_1183_p3,
        din7 => p_Result_23_fu_1206_p3,
        din8 => p_Result_24_fu_1229_p3,
        din9 => p_Result_24_fu_1229_p3,
        din10 => p_Result_24_fu_1229_p3,
        din11 => p_Result_24_fu_1229_p3,
        din12 => p_Result_24_fu_1229_p3,
        din13 => p_Result_24_fu_1229_p3,
        din14 => p_Result_24_fu_1229_p3,
        din15 => p_Result_24_fu_1229_p3,
        din16 => p_t473_reg_3034,
        dout => phi_ln215_6_fu_2176_p18);

    mux_164_64_1_1_U17 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_25_fu_1252_p3,
        din1 => p_Result_25_fu_1252_p3,
        din2 => p_Result_25_fu_1252_p3,
        din3 => p_Result_25_fu_1252_p3,
        din4 => p_Result_25_fu_1252_p3,
        din5 => p_Result_25_fu_1252_p3,
        din6 => p_Result_25_fu_1252_p3,
        din7 => p_Result_23_fu_1206_p3,
        din8 => p_Result_24_fu_1229_p3,
        din9 => p_Result_25_fu_1252_p3,
        din10 => p_Result_25_fu_1252_p3,
        din11 => p_Result_25_fu_1252_p3,
        din12 => p_Result_25_fu_1252_p3,
        din13 => p_Result_25_fu_1252_p3,
        din14 => p_Result_25_fu_1252_p3,
        din15 => p_Result_25_fu_1252_p3,
        din16 => p_t449_reg_3040,
        dout => phi_ln215_7_fu_2213_p18);

    mux_164_64_1_1_U18 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => p_Result_26_fu_1279_p3,
        din1 => p_Result_26_fu_1279_p3,
        din2 => p_Result_26_fu_1279_p3,
        din3 => p_Result_26_fu_1279_p3,
        din4 => p_Result_26_fu_1279_p3,
        din5 => p_Result_26_fu_1279_p3,
        din6 => p_Result_26_fu_1279_p3,
        din7 => p_Result_26_fu_1279_p3,
        din8 => p_Result_24_fu_1229_p3,
        din9 => p_Result_25_fu_1252_p3,
        din10 => p_Result_26_fu_1279_p3,
        din11 => p_Result_26_fu_1279_p3,
        din12 => p_Result_26_fu_1279_p3,
        din13 => p_Result_26_fu_1279_p3,
        din14 => p_Result_26_fu_1279_p3,
        din15 => p_Result_26_fu_1279_p3,
        din16 => p_t1_reg_3046,
        dout => phi_ln215_8_fu_2250_p18);

    mux_164_64_1_1_U19 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff8_q1,
        din1 => iBuff8_q1,
        din2 => iBuff8_q1,
        din3 => iBuff8_q1,
        din4 => iBuff8_q1,
        din5 => iBuff8_q1,
        din6 => iBuff6_q1,
        din7 => iBuff7_q1,
        din8 => iBuff8_q1,
        din9 => iBuff8_q1,
        din10 => iBuff8_q1,
        din11 => iBuff8_q1,
        din12 => iBuff8_q1,
        din13 => iBuff8_q1,
        din14 => iBuff8_q1,
        din15 => iBuff8_q1,
        din16 => p_t473_reg_3034,
        dout => p_Val2_51_fu_2287_p18);

    mux_164_64_1_1_U20 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff9_q1,
        din1 => iBuff9_q1,
        din2 => iBuff9_q1,
        din3 => iBuff9_q1,
        din4 => iBuff9_q1,
        din5 => iBuff9_q1,
        din6 => iBuff9_q1,
        din7 => iBuff7_q1,
        din8 => iBuff8_q1,
        din9 => iBuff9_q1,
        din10 => iBuff9_q1,
        din11 => iBuff9_q1,
        din12 => iBuff9_q1,
        din13 => iBuff9_q1,
        din14 => iBuff9_q1,
        din15 => iBuff9_q1,
        din16 => p_t449_reg_3040,
        dout => p_Val2_52_fu_2337_p18);

    mux_164_64_1_1_U21 : component edgetracing_accel_mux_164_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff10_q1,
        din1 => iBuff10_q1,
        din2 => iBuff10_q1,
        din3 => iBuff10_q1,
        din4 => iBuff10_q1,
        din5 => iBuff10_q1,
        din6 => iBuff10_q1,
        din7 => iBuff10_q1,
        din8 => iBuff8_q1,
        din9 => iBuff9_q1,
        din10 => iBuff10_q1,
        din11 => iBuff10_q1,
        din12 => iBuff10_q1,
        din13 => iBuff10_q1,
        din14 => iBuff10_q1,
        din15 => iBuff10_q1,
        din16 => p_t1_reg_3046,
        dout => p_Val2_53_fu_2387_p18);

    mux_114_64_1_1_U22 : component edgetracing_accel_mux_114_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_1_fu_2685_p1,
        din1 => arr4_V_1_4_fu_1626_p3,
        din2 => arr4_V_2_10_fu_1659_p3,
        din3 => arr4_V_3_10_fu_2030_p3,
        din4 => arr4_V_4_10_fu_2063_p3,
        din5 => arr4_V_5_10_fu_2096_p3,
        din6 => arr4_V_6_10_fu_2474_p3,
        din7 => arr4_V_7_10_fu_2507_p3,
        din8 => arr4_V_8_10_fu_2549_p3,
        din9 => arr4_V_9_9_fu_2541_p3,
        din10 => arr4_V_10_4_fu_2526_p3,
        din11 => sub145_t_reg_2814,
        dout => tmp_1_fu_2685_p13);

    mul_mul_6ns_11ns_17_4_1_U23 : component edgetracing_accel_mul_mul_6ns_11ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2712_p0,
        din1 => grp_fu_2712_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2712_p2);

    mul_mul_12s_6ns_18_4_1_U24 : component edgetracing_accel_mul_mul_12s_6ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 6,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub142_fu_812_p2,
        din1 => grp_fu_2718_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2718_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state8)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state8))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    arr3_V_0_0_reg_766_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_0_0_reg_766 <= arr3_V_0_3_fu_1684_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_0_0_reg_766 <= arr3_V_0_fu_853_p1;
            end if; 
        end if;
    end process;

    arr3_V_10_0_reg_676_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_10_0_reg_676 <= arr3_V_10_4_fu_2622_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_10_0_reg_676 <= arr3_V_10_fu_893_p1;
            end if; 
        end if;
    end process;

    arr3_V_1_0_reg_757_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_1_0_reg_757 <= arr3_V_1_5_fu_1701_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_1_0_reg_757 <= arr3_V_1_fu_857_p1;
            end if; 
        end if;
    end process;

    arr3_V_2_0_reg_748_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_2_0_reg_748 <= arr3_V_2_4_fu_1725_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_2_0_reg_748 <= arr3_V_2_fu_861_p1;
            end if; 
        end if;
    end process;

    arr3_V_3_0_reg_739_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_3_0_reg_739 <= arr3_V_3_4_fu_2121_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_3_0_reg_739 <= arr3_V_3_fu_865_p1;
            end if; 
        end if;
    end process;

    arr3_V_4_0_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_4_0_reg_730 <= arr3_V_4_4_fu_2145_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_4_0_reg_730 <= arr3_V_4_fu_869_p1;
            end if; 
        end if;
    end process;

    arr3_V_5_0_reg_721_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_5_0_reg_721 <= arr3_V_5_4_fu_2169_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_5_0_reg_721 <= arr3_V_5_fu_873_p1;
            end if; 
        end if;
    end process;

    arr3_V_6_0_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_6_0_reg_712 <= arr3_V_6_4_fu_2574_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_6_0_reg_712 <= arr3_V_6_fu_877_p1;
            end if; 
        end if;
    end process;

    arr3_V_7_0_reg_703_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_7_0_reg_703 <= arr3_V_7_4_fu_2598_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_7_0_reg_703 <= arr3_V_7_fu_881_p1;
            end if; 
        end if;
    end process;

    arr3_V_8_0_reg_694_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_8_0_reg_694 <= arr3_V_8_4_fu_2650_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_8_0_reg_694 <= arr3_V_8_fu_885_p1;
            end if; 
        end if;
    end process;

    arr3_V_9_0_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                arr3_V_9_0_reg_685 <= arr3_V_9_4_fu_2636_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                arr3_V_9_0_reg_685 <= arr3_V_9_fu_889_p1;
            end if; 
        end if;
    end process;

    el_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                el_reg_566 <= add_ln190_fu_1021_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                el_reg_566 <= ap_const_lv17_1;
            end if; 
        end if;
    end process;

    j_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_reg_554 <= empty_reg_2879;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_554 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_11_reg_667_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_11_reg_667 <= arr1_V_0_1_reg_3196;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_11_reg_667 <= iBuff_q0;
            end if; 
        end if;
    end process;

    p_Val2_13_reg_658_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_13_reg_658 <= arr1_V_1_1_reg_3201;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_13_reg_658 <= iBuff1_q0;
            end if; 
        end if;
    end process;

    p_Val2_15_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_15_reg_649 <= arr1_V_2_1_reg_3206;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_15_reg_649 <= iBuff2_q0;
            end if; 
        end if;
    end process;

    p_Val2_17_reg_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_17_reg_640 <= arr1_V_3_1_reg_3211;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_17_reg_640 <= iBuff3_q0;
            end if; 
        end if;
    end process;

    p_Val2_19_reg_631_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_19_reg_631 <= arr1_V_4_1_reg_3216;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_19_reg_631 <= iBuff4_q0;
            end if; 
        end if;
    end process;

    p_Val2_21_reg_622_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_21_reg_622 <= arr1_V_5_1_reg_3221;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_21_reg_622 <= iBuff5_q0;
            end if; 
        end if;
    end process;

    p_Val2_23_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_23_reg_613 <= arr1_V_6_1_reg_3226;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_23_reg_613 <= iBuff6_q0;
            end if; 
        end if;
    end process;

    p_Val2_25_reg_604_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_25_reg_604 <= arr1_V_7_1_reg_3231;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_25_reg_604 <= iBuff7_q0;
            end if; 
        end if;
    end process;

    p_Val2_27_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_27_reg_595 <= arr1_V_8_1_reg_3236;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_27_reg_595 <= iBuff8_q0;
            end if; 
        end if;
    end process;

    p_Val2_29_reg_586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_29_reg_586 <= arr1_V_9_1_reg_3241;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_29_reg_586 <= iBuff9_q0;
            end if; 
        end if;
    end process;

    p_Val2_31_reg_577_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_31_reg_577 <= arr1_V_10_1_reg_3246;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_31_reg_577 <= iBuff10_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                arr1_V_0_1_reg_3196 <= iBuff_q1;
                arr1_V_10_1_reg_3246 <= iBuff10_q1;
                arr1_V_1_1_reg_3201 <= iBuff1_q1;
                arr1_V_2_1_reg_3206 <= iBuff2_q1;
                arr1_V_3_1_reg_3211 <= iBuff3_q1;
                arr1_V_4_1_reg_3216 <= iBuff4_q1;
                arr1_V_5_1_reg_3221 <= iBuff5_q1;
                arr1_V_6_1_reg_3226 <= iBuff6_q1;
                arr1_V_7_1_reg_3231 <= iBuff7_q1;
                arr1_V_8_1_reg_3236 <= iBuff8_q1;
                arr1_V_9_1_reg_3241 <= iBuff9_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                arr4_V_0_2_reg_3251 <= arr4_V_0_2_fu_1594_p3;
                iBuff_addr_2_reg_3316 <= p_cast7_fu_2680_p1(10 - 1 downto 0);
                    p_cast_reg_3311(9 downto 0) <= p_cast_fu_2662_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_fu_1007_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp144_reg_3181 <= cmp144_fu_1012_p2;
                trunc_ln189_reg_3185 <= trunc_ln189_fu_1017_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp144_reg_3181_pp0_iter1_reg <= cmp144_reg_3181;
                icmp_ln189_reg_3122 <= icmp_ln189_fu_1007_p2;
                icmp_ln189_reg_3122_pp0_iter1_reg <= icmp_ln189_reg_3122;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_reg_2879 <= empty_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln233_1_reg_3076 <= icmp_ln233_1_fu_976_p2;
                icmp_ln233_reg_3052 <= icmp_ln233_fu_970_p2;
                    j_t617_cast5_reg_2998(1 downto 0) <= j_t617_cast5_fu_897_p1(1 downto 0);
                or_ln239_reg_3110 <= or_ln239_fu_982_p2;
                    p_t1_reg_3046(1 downto 0) <= p_t1_fu_962_p3(1 downto 0);
                p_t449_reg_3040 <= p_t449_fu_956_p2;
                p_t473_reg_3034 <= p_t473_fu_950_p2;
                    p_t497_cast_reg_3028(2 downto 0) <= p_t497_cast_fu_946_p1(2 downto 0);
                    p_t521_cast_reg_3022(1 downto 0) <= p_t521_cast_fu_936_p1(1 downto 0);
                    p_t545_cast_reg_3016(2 downto 0) <= p_t545_cast_fu_924_p1(2 downto 0);
                    p_t569_cast_reg_3010(2 downto 0) <= p_t569_cast_fu_914_p1(2 downto 0);
                    p_t593_cast_reg_3004(1 downto 0) <= p_t593_cast_fu_905_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul143_reg_2809 <= grp_fu_2718_p2;
                mul_reg_2804 <= grp_fu_2712_p2;
                sub145_t_reg_2814 <= sub145_t_fu_822_p2;
                tmp_cast_reg_2874 <= tmp_cast_fu_837_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp144_reg_3181 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_3321 <= tmp_1_fu_2685_p13;
            end if;
        end if;
    end process;
    j_t617_cast5_reg_2998(3 downto 2) <= "00";
    p_t593_cast_reg_3004(3 downto 2) <= "00";
    p_t569_cast_reg_3010(3) <= '0';
    p_t545_cast_reg_3016(3) <= '0';
    p_t521_cast_reg_3022(3 downto 2) <= "01";
    p_t497_cast_reg_3028(3) <= '0';
    p_t1_reg_3046(3 downto 2) <= "10";
    p_cast_reg_3311(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln175_fu_847_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln175_fu_847_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln190_fu_1021_p2 <= std_logic_vector(unsigned(el_reg_566) + unsigned(ap_const_lv17_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln189_fu_1007_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln189_fu_1007_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln175_fu_847_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln175_fu_847_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_120_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_120 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_122_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_122 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_124_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_124 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_126_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_126 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_128_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_128 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_130_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_130 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_132_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_132 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_134_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_134 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_136_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_136 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_138_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_138 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_140_assign_proc : process(icmp_ln189_fu_1007_p2)
    begin
                ap_enable_operation_140 <= (icmp_ln189_fu_1007_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_173_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_173 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_178_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_178 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_183_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_183 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_187_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_187 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_191_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_191 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_195_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_195 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_199_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_199 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_203_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_203 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_207_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_207 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_211_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_211 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_216_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_216 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_349_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_349 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_351_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_351 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_353_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_353 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_355_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_355 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_357_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_357 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_359_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_359 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_361_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_361 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_363_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_363 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_365_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_365 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_367_assign_proc : process(icmp_ln189_reg_3122)
    begin
                ap_enable_operation_367 <= (icmp_ln189_reg_3122 = ap_const_lv1_1);
    end process;


    ap_enable_operation_369_assign_proc : process(cmp144_reg_3181_pp0_iter1_reg)
    begin
                ap_enable_operation_369 <= (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_372_assign_proc : process(cmp144_reg_3181_pp0_iter1_reg)
    begin
                ap_enable_operation_372 <= (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state7_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state7_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state8_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state8_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state9_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state9_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_11_phi_fu_670_p4_assign_proc : process(p_Val2_11_reg_667, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_0_1_reg_3196, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_11_phi_fu_670_p4 <= arr1_V_0_1_reg_3196;
        else 
            ap_phi_mux_p_Val2_11_phi_fu_670_p4 <= p_Val2_11_reg_667;
        end if; 
    end process;


    ap_phi_mux_p_Val2_13_phi_fu_661_p4_assign_proc : process(p_Val2_13_reg_658, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_1_1_reg_3201, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_13_phi_fu_661_p4 <= arr1_V_1_1_reg_3201;
        else 
            ap_phi_mux_p_Val2_13_phi_fu_661_p4 <= p_Val2_13_reg_658;
        end if; 
    end process;


    ap_phi_mux_p_Val2_15_phi_fu_652_p4_assign_proc : process(p_Val2_15_reg_649, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_2_1_reg_3206, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_15_phi_fu_652_p4 <= arr1_V_2_1_reg_3206;
        else 
            ap_phi_mux_p_Val2_15_phi_fu_652_p4 <= p_Val2_15_reg_649;
        end if; 
    end process;


    ap_phi_mux_p_Val2_17_phi_fu_643_p4_assign_proc : process(p_Val2_17_reg_640, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_3_1_reg_3211, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_17_phi_fu_643_p4 <= arr1_V_3_1_reg_3211;
        else 
            ap_phi_mux_p_Val2_17_phi_fu_643_p4 <= p_Val2_17_reg_640;
        end if; 
    end process;


    ap_phi_mux_p_Val2_19_phi_fu_634_p4_assign_proc : process(p_Val2_19_reg_631, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_4_1_reg_3216, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_19_phi_fu_634_p4 <= arr1_V_4_1_reg_3216;
        else 
            ap_phi_mux_p_Val2_19_phi_fu_634_p4 <= p_Val2_19_reg_631;
        end if; 
    end process;


    ap_phi_mux_p_Val2_21_phi_fu_625_p4_assign_proc : process(p_Val2_21_reg_622, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_5_1_reg_3221, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_21_phi_fu_625_p4 <= arr1_V_5_1_reg_3221;
        else 
            ap_phi_mux_p_Val2_21_phi_fu_625_p4 <= p_Val2_21_reg_622;
        end if; 
    end process;


    ap_phi_mux_p_Val2_23_phi_fu_616_p4_assign_proc : process(p_Val2_23_reg_613, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_6_1_reg_3226, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_23_phi_fu_616_p4 <= arr1_V_6_1_reg_3226;
        else 
            ap_phi_mux_p_Val2_23_phi_fu_616_p4 <= p_Val2_23_reg_613;
        end if; 
    end process;


    ap_phi_mux_p_Val2_25_phi_fu_607_p4_assign_proc : process(p_Val2_25_reg_604, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_7_1_reg_3231, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_25_phi_fu_607_p4 <= arr1_V_7_1_reg_3231;
        else 
            ap_phi_mux_p_Val2_25_phi_fu_607_p4 <= p_Val2_25_reg_604;
        end if; 
    end process;


    ap_phi_mux_p_Val2_27_phi_fu_598_p4_assign_proc : process(p_Val2_27_reg_595, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_8_1_reg_3236, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_27_phi_fu_598_p4 <= arr1_V_8_1_reg_3236;
        else 
            ap_phi_mux_p_Val2_27_phi_fu_598_p4 <= p_Val2_27_reg_595;
        end if; 
    end process;


    ap_phi_mux_p_Val2_29_phi_fu_589_p4_assign_proc : process(p_Val2_29_reg_586, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_9_1_reg_3241, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_29_phi_fu_589_p4 <= arr1_V_9_1_reg_3241;
        else 
            ap_phi_mux_p_Val2_29_phi_fu_589_p4 <= p_Val2_29_reg_586;
        end if; 
    end process;


    ap_phi_mux_p_Val2_31_phi_fu_580_p4_assign_proc : process(p_Val2_31_reg_577, icmp_ln189_reg_3122_pp0_iter1_reg, arr1_V_10_1_reg_3246, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln189_reg_3122_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_p_Val2_31_phi_fu_580_p4 <= arr1_V_10_1_reg_3246;
        else 
            ap_phi_mux_p_Val2_31_phi_fu_580_p4 <= p_Val2_31_reg_577;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln175_fu_847_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln175_fu_847_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arr3_V_0_1_fu_1050_p1 <= iBuff_q1(4 - 1 downto 0);
    arr3_V_0_3_fu_1684_p3 <= 
        arr3_V_0_4_fu_1667_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_0_1_fu_1050_p1;
    arr3_V_0_4_fu_1667_p4 <= call_ret_PixelProcessNew_1_s_fu_775_ap_return_0(67 downto 64);
    arr3_V_0_fu_853_p1 <= iBuff_q0(4 - 1 downto 0);
    arr3_V_10_1_fu_1292_p1 <= iBuff10_q1(4 - 1 downto 0);
    arr3_V_10_3_fu_2615_p3 <= 
        arr3_V_10_1_fu_1292_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr3_V_8_5_fu_2605_p4;
    arr3_V_10_4_fu_2622_p3 <= 
        arr3_V_10_1_fu_1292_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_10_3_fu_2615_p3;
    arr3_V_10_fu_893_p1 <= iBuff10_q0(4 - 1 downto 0);
    arr3_V_1_1_fu_1077_p1 <= iBuff1_q1(4 - 1 downto 0);
    arr3_V_1_3_fu_1677_p3 <= 
        arr3_V_0_4_fu_1667_p4 when (icmp_ln233_reg_3052(0) = '1') else 
        arr3_V_1_1_fu_1077_p1;
    arr3_V_1_5_fu_1701_p3 <= 
        arr3_V_1_6_fu_1691_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_1_3_fu_1677_p3;
    arr3_V_1_6_fu_1691_p4 <= call_ret_PixelProcessNew_1_s_fu_775_ap_return_1(67 downto 64);
    arr3_V_1_fu_857_p1 <= iBuff1_q0(4 - 1 downto 0);
    arr3_V_2_4_fu_1725_p3 <= 
        select_ln239_fu_1718_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_0_4_fu_1667_p4;
    arr3_V_2_5_fu_1708_p4 <= call_ret_PixelProcessNew_1_s_fu_775_ap_return_2(67 downto 64);
    arr3_V_2_fu_861_p1 <= iBuff2_q0(4 - 1 downto 0);
    arr3_V_3_4_fu_2121_p3 <= 
        select_ln237_fu_2114_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_1_6_fu_1691_p4;
    arr3_V_3_5_fu_2104_p4 <= call_ret1_PixelProcessNew_1_s_fu_782_ap_return_0(67 downto 64);
    arr3_V_3_fu_865_p1 <= iBuff3_q0(4 - 1 downto 0);
    arr3_V_4_4_fu_2145_p3 <= 
        select_ln238_fu_2138_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_2_5_fu_1708_p4;
    arr3_V_4_5_fu_2128_p4 <= call_ret1_PixelProcessNew_1_s_fu_782_ap_return_1(67 downto 64);
    arr3_V_4_fu_869_p1 <= iBuff4_q0(4 - 1 downto 0);
    arr3_V_5_4_fu_2169_p3 <= 
        select_ln239_2_fu_2162_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_3_5_fu_2104_p4;
    arr3_V_5_5_fu_2152_p4 <= call_ret1_PixelProcessNew_1_s_fu_782_ap_return_2(67 downto 64);
    arr3_V_5_fu_873_p1 <= iBuff5_q0(4 - 1 downto 0);
    arr3_V_6_4_fu_2574_p3 <= 
        select_ln237_3_fu_2567_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_4_5_fu_2128_p4;
    arr3_V_6_5_fu_2557_p4 <= call_ret2_PixelProcessNew_1_s_fu_789_ap_return_0(67 downto 64);
    arr3_V_6_fu_877_p1 <= iBuff6_q0(4 - 1 downto 0);
    arr3_V_7_4_fu_2598_p3 <= 
        select_ln238_3_fu_2591_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_5_5_fu_2152_p4;
    arr3_V_7_5_fu_2581_p4 <= call_ret2_PixelProcessNew_1_s_fu_789_ap_return_1(67 downto 64);
    arr3_V_7_fu_881_p1 <= iBuff7_q0(4 - 1 downto 0);
    arr3_V_8_4_fu_2650_p3 <= 
        select_ln239_8_fu_2643_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_6_5_fu_2557_p4;
    arr3_V_8_5_fu_2605_p4 <= call_ret2_PixelProcessNew_1_s_fu_789_ap_return_2(67 downto 64);
    arr3_V_8_fu_885_p1 <= iBuff8_q0(4 - 1 downto 0);
    arr3_V_9_1_fu_1265_p1 <= iBuff9_q1(4 - 1 downto 0);
    arr3_V_9_4_fu_2636_p3 <= 
        select_ln239_6_fu_2629_p3 when (or_ln239_reg_3110(0) = '1') else 
        arr3_V_7_5_fu_2581_p4;
    arr3_V_9_fu_889_p1 <= iBuff9_q0(4 - 1 downto 0);
    arr4_V_0_2_fu_1594_p3 <= 
        arr4_V_2_11_fu_1569_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        p_Result_s_504_fu_1037_p3;
    arr4_V_10_4_fu_2526_p3 <= 
        p_Result_26_fu_1279_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_10_fu_2519_p3;
    arr4_V_10_5_fu_2515_p1 <= call_ret2_PixelProcessNew_1_s_fu_789_ap_return_2(64 - 1 downto 0);
    arr4_V_10_fu_2519_p3 <= 
        p_Result_26_fu_1279_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_10_5_fu_2515_p1;
    arr4_V_1_2_fu_1587_p3 <= 
        arr4_V_2_11_fu_1569_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        p_Result_17_fu_1064_p3;
    arr4_V_1_4_fu_1626_p3 <= 
        arr4_V_3_11_fu_1601_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_1_2_fu_1587_p3;
    arr4_V_2_10_fu_1659_p3 <= 
        arr4_V_4_11_fu_1634_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_2_8_fu_1619_p3;
    arr4_V_2_11_fu_1569_p1 <= call_ret_PixelProcessNew_1_s_fu_775_ap_return_0(64 - 1 downto 0);
    arr4_V_2_5_fu_1580_p3 <= 
        p_Result_18_fu_1091_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_2_fu_1573_p3;
    arr4_V_2_8_fu_1619_p3 <= 
        arr4_V_3_11_fu_1601_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_2_5_fu_1580_p3;
    arr4_V_2_fu_1573_p3 <= 
        p_Result_18_fu_1091_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_2_11_fu_1569_p1;
    arr4_V_3_10_fu_2030_p3 <= 
        arr4_V_5_11_fu_2005_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_3_8_fu_1652_p3;
    arr4_V_3_11_fu_1601_p1 <= call_ret_PixelProcessNew_1_s_fu_775_ap_return_1(64 - 1 downto 0);
    arr4_V_3_5_fu_1612_p3 <= 
        p_Result_19_fu_1114_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_3_fu_1605_p3;
    arr4_V_3_8_fu_1652_p3 <= 
        arr4_V_4_11_fu_1634_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_3_5_fu_1612_p3;
    arr4_V_3_fu_1605_p3 <= 
        p_Result_19_fu_1114_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_3_11_fu_1601_p1;
    arr4_V_4_10_fu_2063_p3 <= 
        arr4_V_6_11_fu_2038_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_4_8_fu_2023_p3;
    arr4_V_4_11_fu_1634_p1 <= call_ret_PixelProcessNew_1_s_fu_775_ap_return_2(64 - 1 downto 0);
    arr4_V_4_5_fu_1645_p3 <= 
        p_Result_20_fu_1137_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_4_fu_1638_p3;
    arr4_V_4_8_fu_2023_p3 <= 
        arr4_V_5_11_fu_2005_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_4_5_fu_1645_p3;
    arr4_V_4_fu_1638_p3 <= 
        p_Result_20_fu_1137_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_4_11_fu_1634_p1;
    arr4_V_5_10_fu_2096_p3 <= 
        arr4_V_7_11_fu_2071_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_5_8_fu_2056_p3;
    arr4_V_5_11_fu_2005_p1 <= call_ret1_PixelProcessNew_1_s_fu_782_ap_return_0(64 - 1 downto 0);
    arr4_V_5_5_fu_2016_p3 <= 
        p_Result_21_fu_1160_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_5_fu_2009_p3;
    arr4_V_5_8_fu_2056_p3 <= 
        arr4_V_6_11_fu_2038_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_5_5_fu_2016_p3;
    arr4_V_5_fu_2009_p3 <= 
        p_Result_21_fu_1160_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_5_11_fu_2005_p1;
    arr4_V_6_10_fu_2474_p3 <= 
        arr4_V_8_11_fu_2449_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_6_8_fu_2089_p3;
    arr4_V_6_11_fu_2038_p1 <= call_ret1_PixelProcessNew_1_s_fu_782_ap_return_1(64 - 1 downto 0);
    arr4_V_6_5_fu_2049_p3 <= 
        p_Result_22_fu_1183_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_6_fu_2042_p3;
    arr4_V_6_8_fu_2089_p3 <= 
        arr4_V_7_11_fu_2071_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_6_5_fu_2049_p3;
    arr4_V_6_fu_2042_p3 <= 
        p_Result_22_fu_1183_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_6_11_fu_2038_p1;
    arr4_V_7_10_fu_2507_p3 <= 
        arr4_V_9_10_fu_2482_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_7_8_fu_2467_p3;
    arr4_V_7_11_fu_2071_p1 <= call_ret1_PixelProcessNew_1_s_fu_782_ap_return_2(64 - 1 downto 0);
    arr4_V_7_5_fu_2082_p3 <= 
        p_Result_23_fu_1206_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_7_fu_2075_p3;
    arr4_V_7_8_fu_2467_p3 <= 
        arr4_V_8_11_fu_2449_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_7_5_fu_2082_p3;
    arr4_V_7_fu_2075_p3 <= 
        p_Result_23_fu_1206_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_7_11_fu_2071_p1;
    arr4_V_8_10_fu_2549_p3 <= 
        arr4_V_10_5_fu_2515_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_8_8_fu_2500_p3;
    arr4_V_8_11_fu_2449_p1 <= call_ret2_PixelProcessNew_1_s_fu_789_ap_return_0(64 - 1 downto 0);
    arr4_V_8_5_fu_2460_p3 <= 
        p_Result_24_fu_1229_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_8_fu_2453_p3;
    arr4_V_8_8_fu_2500_p3 <= 
        arr4_V_9_10_fu_2482_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_8_5_fu_2460_p3;
    arr4_V_8_fu_2453_p3 <= 
        p_Result_24_fu_1229_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_8_11_fu_2449_p1;
    arr4_V_9_10_fu_2482_p1 <= call_ret2_PixelProcessNew_1_s_fu_789_ap_return_1(64 - 1 downto 0);
    arr4_V_9_6_fu_2493_p3 <= 
        p_Result_25_fu_1252_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_9_fu_2486_p3;
    arr4_V_9_8_fu_2534_p3 <= 
        arr4_V_10_5_fu_2515_p1 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_9_6_fu_2493_p3;
    arr4_V_9_9_fu_2541_p3 <= 
        p_Result_25_fu_1252_p3 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr4_V_9_8_fu_2534_p3;
    arr4_V_9_fu_2486_p3 <= 
        p_Result_25_fu_1252_p3 when (icmp_ln233_reg_3052(0) = '1') else 
        arr4_V_9_10_fu_2482_p1;
    bdrows_cast8_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bdrows),12));
    call_ret1_PixelProcessNew_1_s_fu_782_k1 <= (trunc_ln674_14_fu_1880_p1 & phi_ln215_3_fu_1732_p18);
    call_ret1_PixelProcessNew_1_s_fu_782_k2 <= (trunc_ln674_15_fu_1930_p1 & phi_ln215_4_fu_1769_p18);
    call_ret1_PixelProcessNew_1_s_fu_782_k3 <= (trunc_ln674_16_fu_1980_p1 & phi_ln215_5_fu_1806_p18);
    call_ret2_PixelProcessNew_1_s_fu_789_k1 <= (trunc_ln674_20_fu_2324_p1 & phi_ln215_6_fu_2176_p18);
    call_ret2_PixelProcessNew_1_s_fu_789_k2 <= (trunc_ln674_21_fu_2374_p1 & phi_ln215_7_fu_2213_p18);
    call_ret2_PixelProcessNew_1_s_fu_789_k3 <= (trunc_ln674_22_fu_2424_p1 & phi_ln215_8_fu_2250_p18);
    call_ret_PixelProcessNew_1_s_fu_775_k1 <= (trunc_ln674_fu_1444_p1 & phi_ln_fu_1296_p18);
    call_ret_PixelProcessNew_1_s_fu_775_k2 <= (trunc_ln674_9_fu_1494_p1 & phi_ln215_1_fu_1333_p18);
    call_ret_PixelProcessNew_1_s_fu_775_k3 <= (trunc_ln674_10_fu_1544_p1 & phi_ln215_2_fu_1370_p18);
    cmp144_fu_1012_p2 <= "1" when (signed(zext_ln189_1_fu_1003_p1) > signed(mul143_reg_2809)) else "0";
    empty_505_fu_2657_p2 <= std_logic_vector(unsigned(trunc_ln189_reg_3185) + unsigned(ap_const_lv10_3FF));
    empty_506_fu_2676_p2 <= std_logic_vector(signed(tmp_cast_reg_2874) + signed(trunc_ln189_reg_3185));
    empty_fu_841_p2 <= std_logic_vector(unsigned(j_reg_554) + unsigned(ap_const_lv2_1));
    grp_fu_2712_p0 <= grp_fu_2712_p00(6 - 1 downto 0);
    grp_fu_2712_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth),17));
    grp_fu_2712_p1 <= grp_fu_2712_p10(11 - 1 downto 0);
    grp_fu_2712_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bdrows),17));
    grp_fu_2718_p1 <= grp_fu_2718_p10(6 - 1 downto 0);
    grp_fu_2718_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth),18));

    iBuff10_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff10_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff10_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff10_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff10_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff10_ce0 <= ap_const_logic_1;
        else 
            iBuff10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff10_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff10_ce1 <= ap_const_logic_1;
        else 
            iBuff10_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff10_d0 <= arr4_V_10_4_fu_2526_p3;

    iBuff10_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff10_we0 <= ap_const_logic_1;
        else 
            iBuff10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff1_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff1_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff1_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff1_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff1_ce0 <= ap_const_logic_1;
        else 
            iBuff1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff1_ce1 <= ap_const_logic_1;
        else 
            iBuff1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff1_d0 <= arr4_V_1_4_fu_1626_p3;

    iBuff1_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff1_we0 <= ap_const_logic_1;
        else 
            iBuff1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff2_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff2_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff2_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff2_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff2_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff2_ce0 <= ap_const_logic_1;
        else 
            iBuff2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff2_ce1 <= ap_const_logic_1;
        else 
            iBuff2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff2_d0 <= arr4_V_2_10_fu_1659_p3;

    iBuff2_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff2_we0 <= ap_const_logic_1;
        else 
            iBuff2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff3_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff3_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff3_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff3_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff3_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff3_ce0 <= ap_const_logic_1;
        else 
            iBuff3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff3_ce1 <= ap_const_logic_1;
        else 
            iBuff3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff3_d0 <= arr4_V_3_10_fu_2030_p3;

    iBuff3_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff3_we0 <= ap_const_logic_1;
        else 
            iBuff3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff4_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff4_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff4_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff4_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff4_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff4_ce0 <= ap_const_logic_1;
        else 
            iBuff4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff4_ce1 <= ap_const_logic_1;
        else 
            iBuff4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff4_d0 <= arr4_V_4_10_fu_2063_p3;

    iBuff4_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff4_we0 <= ap_const_logic_1;
        else 
            iBuff4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff5_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff5_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff5_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff5_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff5_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff5_ce0 <= ap_const_logic_1;
        else 
            iBuff5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff5_ce1 <= ap_const_logic_1;
        else 
            iBuff5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff5_d0 <= arr4_V_5_10_fu_2096_p3;

    iBuff5_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff5_we0 <= ap_const_logic_1;
        else 
            iBuff5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff6_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff6_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff6_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff6_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff6_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff6_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff6_ce0 <= ap_const_logic_1;
        else 
            iBuff6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff6_ce1 <= ap_const_logic_1;
        else 
            iBuff6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff6_d0 <= arr4_V_6_10_fu_2474_p3;

    iBuff6_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff6_we0 <= ap_const_logic_1;
        else 
            iBuff6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff7_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff7_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff7_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff7_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff7_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff7_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff7_ce0 <= ap_const_logic_1;
        else 
            iBuff7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff7_ce1 <= ap_const_logic_1;
        else 
            iBuff7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff7_d0 <= arr4_V_7_10_fu_2507_p3;

    iBuff7_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff7_we0 <= ap_const_logic_1;
        else 
            iBuff7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff8_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff8_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff8_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff8_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff8_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff8_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff8_ce0 <= ap_const_logic_1;
        else 
            iBuff8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff8_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff8_ce1 <= ap_const_logic_1;
        else 
            iBuff8_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff8_d0 <= arr4_V_8_10_fu_2549_p3;

    iBuff8_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff8_we0 <= ap_const_logic_1;
        else 
            iBuff8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff9_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_cast_fu_2662_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff9_address0 <= p_cast_fu_2662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff9_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff9_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff9_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff9_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            iBuff9_ce0 <= ap_const_logic_1;
        else 
            iBuff9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff9_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff9_ce1 <= ap_const_logic_1;
        else 
            iBuff9_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    iBuff9_d0 <= arr4_V_9_9_fu_2541_p3;

    iBuff9_we0_assign_proc : process(icmp_ln189_reg_3122, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln189_reg_3122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff9_we0 <= ap_const_logic_1;
        else 
            iBuff9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_address0_assign_proc : process(ap_CS_fsm_state5, cmp144_reg_3181_pp0_iter1_reg, p_cast_reg_3311, iBuff_addr_2_reg_3316, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iBuff_address0 <= p_cast_reg_3311(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iBuff_address0 <= iBuff_addr_2_reg_3316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iBuff_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            iBuff_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    iBuff_address1 <= zext_ln189_fu_988_p1(10 - 1 downto 0);

    iBuff_ce0_assign_proc : process(ap_CS_fsm_state5, ap_block_pp0_stage0_11001, cmp144_reg_3181_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            iBuff_ce0 <= ap_const_logic_1;
        else 
            iBuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iBuff_ce1 <= ap_const_logic_1;
        else 
            iBuff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_d0_assign_proc : process(cmp144_reg_3181_pp0_iter1_reg, arr4_V_0_2_reg_3251, tmp_1_reg_3321, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_1)) then 
                iBuff_d0 <= arr4_V_0_2_reg_3251;
            elsif ((cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_0)) then 
                iBuff_d0 <= tmp_1_reg_3321;
            else 
                iBuff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            iBuff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_we0_assign_proc : process(ap_block_pp0_stage0_11001, cmp144_reg_3181_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (cmp144_reg_3181_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            iBuff_we0 <= ap_const_logic_1;
        else 
            iBuff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln175_fu_847_p2 <= "1" when (j_reg_554 = ap_const_lv2_3) else "0";
    icmp_ln189_fu_1007_p2 <= "1" when (unsigned(el_reg_566) < unsigned(mul_reg_2804)) else "0";
    icmp_ln233_1_fu_976_p2 <= "1" when (j_reg_554 = ap_const_lv2_0) else "0";
    icmp_ln233_fu_970_p2 <= "1" when (j_reg_554 = ap_const_lv2_1) else "0";
    j_t617_cast5_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_554),4));
    j_t617_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_554),3));
    or_ln239_fu_982_p2 <= (icmp_ln233_fu_970_p2 or icmp_ln233_1_fu_976_p2);
    p_Result_10_fu_1219_p4 <= ap_phi_mux_p_Val2_27_phi_fu_598_p4(63 downto 4);
    p_Result_12_fu_1242_p4 <= ap_phi_mux_p_Val2_29_phi_fu_589_p4(63 downto 4);
    p_Result_14_fu_1269_p4 <= ap_phi_mux_p_Val2_31_phi_fu_580_p4(63 downto 4);
    p_Result_17_fu_1064_p3 <= (p_Result_2_fu_1054_p4 & arr3_V_1_0_reg_757);
    p_Result_18_fu_1091_p3 <= (p_Result_4_fu_1081_p4 & arr3_V_2_0_reg_748);
    p_Result_19_fu_1114_p3 <= (p_Result_6_fu_1104_p4 & arr3_V_3_0_reg_739);
    p_Result_1_fu_1150_p4 <= ap_phi_mux_p_Val2_21_phi_fu_625_p4(63 downto 4);
    p_Result_20_fu_1137_p3 <= (p_Result_9_fu_1127_p4 & arr3_V_4_0_reg_730);
    p_Result_21_fu_1160_p3 <= (p_Result_1_fu_1150_p4 & arr3_V_5_0_reg_721);
    p_Result_22_fu_1183_p3 <= (p_Result_3_fu_1173_p4 & arr3_V_6_0_reg_712);
    p_Result_23_fu_1206_p3 <= (p_Result_7_fu_1196_p4 & arr3_V_7_0_reg_703);
    p_Result_24_fu_1229_p3 <= (p_Result_10_fu_1219_p4 & arr3_V_8_0_reg_694);
    p_Result_25_fu_1252_p3 <= (p_Result_12_fu_1242_p4 & arr3_V_9_0_reg_685);
    p_Result_26_fu_1279_p3 <= (p_Result_14_fu_1269_p4 & arr3_V_10_0_reg_676);
    p_Result_2_fu_1054_p4 <= ap_phi_mux_p_Val2_13_phi_fu_661_p4(63 downto 4);
    p_Result_3_fu_1173_p4 <= ap_phi_mux_p_Val2_23_phi_fu_616_p4(63 downto 4);
    p_Result_4_fu_1081_p4 <= ap_phi_mux_p_Val2_15_phi_fu_652_p4(63 downto 4);
    p_Result_6_fu_1104_p4 <= ap_phi_mux_p_Val2_17_phi_fu_643_p4(63 downto 4);
    p_Result_7_fu_1196_p4 <= ap_phi_mux_p_Val2_25_phi_fu_607_p4(63 downto 4);
    p_Result_9_fu_1127_p4 <= ap_phi_mux_p_Val2_19_phi_fu_634_p4(63 downto 4);
    p_Result_s_504_fu_1037_p3 <= (p_Result_s_fu_1027_p4 & arr3_V_0_0_reg_766);
    p_Result_s_fu_1027_p4 <= ap_phi_mux_p_Val2_11_phi_fu_670_p4(63 downto 4);
    p_cast7_fu_2680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_506_fu_2676_p2),64));
    p_cast_fu_2662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_505_fu_2657_p2),64));
    p_t1_fu_962_p3 <= (ap_const_lv2_2 & j_reg_554);
    p_t449_fu_956_p2 <= std_logic_vector(unsigned(j_t617_cast5_fu_897_p1) + unsigned(ap_const_lv4_7));
    p_t473_fu_950_p2 <= std_logic_vector(unsigned(j_t617_cast5_fu_897_p1) + unsigned(ap_const_lv4_6));
    p_t497_cast_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_t497_fu_940_p2),4));
    p_t497_fu_940_p2 <= std_logic_vector(unsigned(j_t617_cast_fu_901_p1) + unsigned(ap_const_lv3_5));
    p_t521_cast_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_t_fu_928_p3),4));
    p_t545_cast_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_t545_fu_918_p2),4));
    p_t545_fu_918_p2 <= std_logic_vector(unsigned(j_t617_cast_fu_901_p1) + unsigned(ap_const_lv3_3));
    p_t569_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_t569_fu_908_p2),4));
    p_t569_fu_908_p2 <= std_logic_vector(unsigned(j_t617_cast_fu_901_p1) + unsigned(ap_const_lv3_2));
    p_t593_cast_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_2879),4));
    p_t_fu_928_p3 <= (ap_const_lv1_1 & j_reg_554);
    select_ln237_3_fu_2567_p3 <= 
        arr3_V_6_5_fu_2557_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_5_5_fu_2152_p4;
    select_ln237_fu_2114_p3 <= 
        arr3_V_3_5_fu_2104_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_2_5_fu_1708_p4;
    select_ln238_3_fu_2591_p3 <= 
        arr3_V_7_5_fu_2581_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_6_5_fu_2557_p4;
    select_ln238_fu_2138_p3 <= 
        arr3_V_4_5_fu_2128_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_3_5_fu_2104_p4;
    select_ln239_2_fu_2162_p3 <= 
        arr3_V_5_5_fu_2152_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_4_5_fu_2128_p4;
    select_ln239_6_fu_2629_p3 <= 
        arr3_V_9_1_fu_1265_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_8_5_fu_2605_p4;
    select_ln239_8_fu_2643_p3 <= 
        arr3_V_8_5_fu_2605_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_7_5_fu_2581_p4;
    select_ln239_fu_1718_p3 <= 
        arr3_V_2_5_fu_1708_p4 when (icmp_ln233_1_reg_3076(0) = '1') else 
        arr3_V_1_6_fu_1691_p4;
    sub142_fu_812_p2 <= std_logic_vector(unsigned(bdrows_cast8_fu_800_p1) + unsigned(ap_const_lv12_FFF));
    sub145_t_fu_822_p2 <= std_logic_vector(unsigned(bramtotal) + unsigned(ap_const_lv4_F));
    tmp_1_fu_2685_p1 <= 
        arr4_V_2_11_fu_1569_p1 when (icmp_ln233_1_reg_3076(0) = '1') else 
        p_Result_s_504_fu_1037_p3;
        tmp_cast_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_831_p2),10));

    tmp_fu_831_p2 <= std_logic_vector(unsigned(zext_ln175_fu_828_p1) + unsigned(ap_const_lv7_7F));
    trunc_ln189_fu_1017_p1 <= el_reg_566(10 - 1 downto 0);
    trunc_ln674_10_fu_1544_p1 <= p_Val2_35_fu_1507_p18(4 - 1 downto 0);
    trunc_ln674_14_fu_1880_p1 <= p_Val2_42_fu_1843_p18(4 - 1 downto 0);
    trunc_ln674_15_fu_1930_p1 <= p_Val2_43_fu_1893_p18(4 - 1 downto 0);
    trunc_ln674_16_fu_1980_p1 <= p_Val2_44_fu_1943_p18(4 - 1 downto 0);
    trunc_ln674_20_fu_2324_p1 <= p_Val2_51_fu_2287_p18(4 - 1 downto 0);
    trunc_ln674_21_fu_2374_p1 <= p_Val2_52_fu_2337_p18(4 - 1 downto 0);
    trunc_ln674_22_fu_2424_p1 <= p_Val2_53_fu_2387_p18(4 - 1 downto 0);
    trunc_ln674_9_fu_1494_p1 <= p_Val2_34_fu_1457_p18(4 - 1 downto 0);
    trunc_ln674_fu_1444_p1 <= p_Val2_33_fu_1407_p18(4 - 1 downto 0);
    zext_ln175_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth),7));
    zext_ln189_1_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(el_reg_566),18));
    zext_ln189_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(el_reg_566),64));
end behav;
