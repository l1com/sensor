-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgetracing_accel is
generic (
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM4_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    m_axi_gmem4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem4_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_WREADY : IN STD_LOGIC;
    m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem4_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_WUSER_WIDTH-1 downto 0);
    m_axi_gmem4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RVALID : IN STD_LOGIC;
    m_axi_gmem4_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_RLAST : IN STD_LOGIC;
    m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_RUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BVALID : IN STD_LOGIC;
    m_axi_gmem4_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of edgetracing_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "edgetracing_accel_edgetracing_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu2cg-sfvc784-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=452554,HLS_SYN_TPT=none,HLS_SYN_MEM=54,HLS_SYN_DSP=0,HLS_SYN_FF=5364,HLS_SYN_LUT=17804,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (92 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (92 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (92 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (92 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (92 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (92 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (92 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (92 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (92 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (92 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (92 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (92 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_20 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000011";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal img_inp : STD_LOGIC_VECTOR (63 downto 0);
    signal img_out : STD_LOGIC_VECTOR (63 downto 0);
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln332_1_reg_2838 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal gmem3_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln387_reg_2946 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln387_reg_2946_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal icmp_ln332_reg_2829 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal cmp119_i_i270_reg_2775 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln422_reg_3069 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln433_reg_3088 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln452_reg_3112 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal icmp_ln452_reg_3112_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal icmp_ln452_reg_3112_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWVALID : STD_LOGIC;
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_WVALID : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARVALID : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RREADY : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem3_RLAST : STD_LOGIC;
    signal gmem3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BREADY : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_AWVALID : STD_LOGIC;
    signal gmem4_AWREADY : STD_LOGIC;
    signal gmem4_WVALID : STD_LOGIC;
    signal gmem4_WREADY : STD_LOGIC;
    signal gmem4_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem4_ARREADY : STD_LOGIC;
    signal gmem4_RVALID : STD_LOGIC;
    signal gmem4_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem4_RLAST : STD_LOGIC;
    signal gmem4_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_BVALID : STD_LOGIC;
    signal gmem4_BREADY : STD_LOGIC;
    signal gmem4_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_719 : STD_LOGIC_VECTOR (28 downto 0);
    signal idx1_V_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal dep_V_reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_reg_752 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_774 : STD_LOGIC_VECTOR (28 downto 0);
    signal idx1_V_2_reg_785 : STD_LOGIC_VECTOR (15 downto 0);
    signal dep_V_2_reg_796 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_3_reg_807 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_830 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_reg_830_pp2_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state92_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state93_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state94_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal j_reg_842 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_V_reg_853 : STD_LOGIC_VECTOR (8 downto 0);
    signal id_V_reg_864 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_out_read_reg_2547 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_inp_read_reg_2552 : STD_LOGIC_VECTOR (63 downto 0);
    signal npcCols_fu_984_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal npcCols_reg_2558 : STD_LOGIC_VECTOR (10 downto 0);
    signal npcCols_8_fu_1046_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal npcCols_8_reg_2563 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln302_fu_1054_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln302_reg_2568 : STD_LOGIC_VECTOR (9 downto 0);
    signal slice_h_reg_2573 : STD_LOGIC_VECTOR (7 downto 0);
    signal ram_row_depth_fu_1068_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ram_row_depth_reg_2582 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1082_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bdrows_reg_2601 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln304_fu_1091_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln304_reg_2607 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln305_2_fu_1117_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln305_2_reg_2618 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal bramsetsval_fu_1135_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bramsetsval_reg_2634 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln305_fu_1140_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln305_reg_2640 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln302_1_fu_1157_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln302_1_reg_2655 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal zext_ln302_fu_1160_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln302_reg_2660 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln302_2_fu_1163_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln302_2_reg_2665 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln303_fu_1169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln303_reg_2670 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln303_4_fu_1172_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln303_4_reg_2675 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln303_5_fu_1175_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln303_5_reg_2680 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln303_2_fu_1178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln303_2_reg_2685 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln305_1_fu_1181_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln305_1_reg_2693 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln307_fu_1184_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln307_reg_2698 : STD_LOGIC_VECTOR (22 downto 0);
    signal bramtotal_fu_1187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bramtotal_reg_2703 : STD_LOGIC_VECTOR (3 downto 0);
    signal op2_assign_1_cast_cast_fu_1197_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_assign_1_cast_cast_reg_2708 : STD_LOGIC_VECTOR (15 downto 0);
    signal ram_row_depth_cast35_cast_fu_1201_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ram_row_depth_cast35_cast_reg_2714 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2513_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal op2_assign_reg_2720 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln324_fu_1204_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln324_fu_1204_p2 : signal is "no";
    signal sub_ln324_reg_2725 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln312_fu_1209_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln312_reg_2730 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal select_ln312_fu_1227_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln312_reg_2738 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln312_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln312_1_fu_1253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln312_1_reg_2744 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln312_2_fu_1261_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln312_2_reg_2750 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln318_fu_1269_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln318_reg_2755 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln319_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_2760 : STD_LOGIC_VECTOR (0 downto 0);
    signal div153_i_i_fu_1289_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal div153_i_i_reg_2770 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp119_i_i270_fu_1298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln414_fu_1303_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln414_reg_2779 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln417_2_reg_2784 : STD_LOGIC_VECTOR (7 downto 0);
    signal ram_row_depth_cast25_fu_1316_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ram_row_depth_cast25_reg_2789 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_2519_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal lBound_reg_2799 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal trunc_ln536_1_reg_2812 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal zext_ln315_fu_1394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln315_reg_2817 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_1_reg_2822 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln332_fu_1408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal i_3_fu_1413_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state65_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln332_1_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln332_1_reg_2838_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idx2_V_7_fu_1465_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_7_reg_2842 : STD_LOGIC_VECTOR (15 downto 0);
    signal dep_V_5_fu_1473_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal dep_V_5_reg_2849 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_fu_1485_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_reg_2856 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_reg_2856_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal index_reg_2856_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln353_fu_1491_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln353_reg_2863 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln353_reg_2863_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal idx1_V_5_fu_1495_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal iReg_V_reg_2872 : STD_LOGIC_VECTOR (63 downto 0);
    signal iReg_V_reg_2872_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln870_2_fu_1501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_2_reg_2892 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_2_reg_2892_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_5_fu_1506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_5_reg_2896 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_5_reg_2896_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_6_fu_1513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_6_reg_2900 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_6_reg_2900_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_4_fu_1518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_4_reg_2904 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_4_reg_2904_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal iBuff_V_0_addr_reg_2908 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_1_addr_reg_2913 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_4_addr_reg_2918 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_7_addr_reg_2923 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_10_addr_reg_2928 : STD_LOGIC_VECTOR (9 downto 0);
    signal intra_i_1_fu_1558_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal intra_i_1_reg_2933 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal i_2_fu_1570_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state73_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state74_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state75_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state75_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln387_fu_1576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx2_V_6_fu_1618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_6_reg_2950 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_fu_1626_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_reg_2955 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln402_fu_1663_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln402_reg_2960 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx1_V_4_fu_1667_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal oReg_V_fu_1673_p13 : STD_LOGIC_VECTOR (63 downto 0);
    signal oReg_V_reg_3025 : STD_LOGIC_VECTOR (63 downto 0);
    signal slice_1_fu_1700_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln417_fu_1705_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln417_reg_3035 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal icmp_ln417_fu_1711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_38_fu_1731_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_38_reg_3048 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal zext_ln414_1_fu_1736_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln414_1_reg_3053 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln422_fu_1760_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln422_reg_3064 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln422_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln422_reg_3069_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_addr_read_reg_3073 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2543_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln414_reg_3078 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal add_ln433_fu_1776_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state99_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state100_pp3_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op669_writereq_state100 : BOOLEAN;
    signal ap_block_state100_io : BOOLEAN;
    signal ap_block_state101_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state101_io : BOOLEAN;
    signal ap_block_state102_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state103_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state104_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state105_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state106_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln433_fu_1782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_3_fu_1791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_3_reg_3092 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_V_2_fu_1803_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixel_V_2_reg_3097 : STD_LOGIC_VECTOR (8 downto 0);
    signal id_V_1_fu_1822_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln452_fu_1830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln452_reg_3112_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln452_reg_3112_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln452_reg_3112_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln452_reg_3112_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_reg_3116 : STD_LOGIC_VECTOR (60 downto 0);
    signal select_ln870_fu_1898_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_reg_3121 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_1_fu_1980_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_1_reg_3126 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_2_fu_2062_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_2_reg_3131 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_3_fu_2144_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_3_reg_3136 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_4_fu_2226_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_4_reg_3141 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_5_fu_2308_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_5_reg_3146 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_6_fu_2390_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln870_6_reg_3151 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln870_16_fu_2466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_16_reg_3156 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_2_fu_2482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state65 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state73 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state92 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_condition_pp3_exit_iter1_state100 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal iBuff_V_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_0_ce0 : STD_LOGIC;
    signal iBuff_V_0_we0 : STD_LOGIC;
    signal iBuff_V_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_0_ce1 : STD_LOGIC;
    signal iBuff_V_0_we1 : STD_LOGIC;
    signal iBuff_V_0_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_1_ce0 : STD_LOGIC;
    signal iBuff_V_1_we0 : STD_LOGIC;
    signal iBuff_V_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_1_ce1 : STD_LOGIC;
    signal iBuff_V_1_we1 : STD_LOGIC;
    signal iBuff_V_1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_2_ce0 : STD_LOGIC;
    signal iBuff_V_2_we0 : STD_LOGIC;
    signal iBuff_V_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_2_ce1 : STD_LOGIC;
    signal iBuff_V_2_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_3_ce0 : STD_LOGIC;
    signal iBuff_V_3_we0 : STD_LOGIC;
    signal iBuff_V_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_3_ce1 : STD_LOGIC;
    signal iBuff_V_3_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_4_ce0 : STD_LOGIC;
    signal iBuff_V_4_we0 : STD_LOGIC;
    signal iBuff_V_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_4_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_4_ce1 : STD_LOGIC;
    signal iBuff_V_4_we1 : STD_LOGIC;
    signal iBuff_V_4_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_5_ce0 : STD_LOGIC;
    signal iBuff_V_5_we0 : STD_LOGIC;
    signal iBuff_V_5_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_5_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_5_ce1 : STD_LOGIC;
    signal iBuff_V_5_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_6_ce0 : STD_LOGIC;
    signal iBuff_V_6_we0 : STD_LOGIC;
    signal iBuff_V_6_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_6_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_6_ce1 : STD_LOGIC;
    signal iBuff_V_6_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_7_ce0 : STD_LOGIC;
    signal iBuff_V_7_we0 : STD_LOGIC;
    signal iBuff_V_7_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_7_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_7_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_7_ce1 : STD_LOGIC;
    signal iBuff_V_7_we1 : STD_LOGIC;
    signal iBuff_V_7_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_8_ce0 : STD_LOGIC;
    signal iBuff_V_8_we0 : STD_LOGIC;
    signal iBuff_V_8_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_8_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_8_ce1 : STD_LOGIC;
    signal iBuff_V_8_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_9_ce0 : STD_LOGIC;
    signal iBuff_V_9_we0 : STD_LOGIC;
    signal iBuff_V_9_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_9_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_9_ce1 : STD_LOGIC;
    signal iBuff_V_9_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_10_ce0 : STD_LOGIC;
    signal iBuff_V_10_we0 : STD_LOGIC;
    signal iBuff_V_10_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_10_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iBuff_V_10_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal iBuff_V_10_ce1 : STD_LOGIC;
    signal iBuff_V_10_we1 : STD_LOGIC;
    signal iBuff_V_10_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal oBuff_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal oBuff_V_ce0 : STD_LOGIC;
    signal oBuff_V_we0 : STD_LOGIC;
    signal oBuff_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_ap_start : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_ap_done : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_ap_idle : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_ap_ready : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff1_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff2_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff3_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff4_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff5_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff5_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff6_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff6_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff7_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff7_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff7_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff8_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff8_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff8_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff9_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff9_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff9_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce1 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff10_we0 : STD_LOGIC;
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff10_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff10_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce1 : STD_LOGIC;
    signal indvar_flatten_reg_686 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state80 : BOOLEAN;
    signal inter_i_reg_697 : STD_LOGIC_VECTOR (1 downto 0);
    signal slice_reg_708 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_dep_V_phi_fu_745_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_idx2_V_phi_fu_756_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal intra_i_reg_763 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_phi_mux_dep_V_2_phi_fu_800_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_idx2_V_3_phi_fu_811_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_818 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_phi_mux_k_phi_fu_834_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_pixel_V_phi_fu_857_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_TopDown_11_3_1024_s_fu_886_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln377_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln534_fu_1523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_2_fu_1541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_3_fu_1550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_1_fu_1648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln422_fu_1771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i_i_fu_1811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln536_1_fu_1398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln422_fu_1749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln548_fu_2472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_block_state85_io : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal empty_34_fu_912_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln24_fu_924_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln24_1_fu_930_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_916_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln24_1_fu_940_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_946_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln24_fu_956_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_964_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_33_fu_908_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln26_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal npcColsNxt_fu_972_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1_fu_992_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln31_fu_1002_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_1008_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln31_fu_1018_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_1026_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_904_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln33_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal npcColsNxt_8_fu_1034_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1082_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln305_fu_1095_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln302_3_fu_1088_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1107_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1107_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1107_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln305_fu_1113_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1123_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1123_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1123_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub66_i_i_fu_1148_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2505_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal op2_assign_1_cast_fu_1192_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln302_4_fu_1166_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln318_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln312_1_fu_1235_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp31_i_i_mid1_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp31_i_i4_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_fu_1279_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln324_fu_1319_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln322_fu_1331_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln322_fu_1331_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln322_fu_1331_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln324_fu_1336_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2524_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sel_tmp_v_fu_1340_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln312_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln319_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_2531_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal offset_fu_1360_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_1367_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln536_fu_1375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln536_fu_1379_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln870_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx2_V_1_fu_1429_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx1_V_1_fu_1443_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_2_fu_1435_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln870_1_fu_1455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dep_V_1_fu_1460_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln208_fu_1481_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln327_fu_1451_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln870_fu_1510_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_2_fu_1537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_fu_1546_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln870_8_fu_1581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx2_V_4_fu_1586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx2_V_5_fu_1592_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln870_9_fu_1608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dep_V_3_fu_1613_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx1_V_6_fu_1600_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1346_1_fu_1638_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1346_fu_1634_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_1_fu_1642_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2537_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_1720_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_cast38_fu_1727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_1740_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal pixel_V_1_fu_1797_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln691_fu_1816_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln433_fu_1787_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln452_fu_1835_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 of add_ln452_fu_1835_p2 : signal is "no";
    signal shl_ln3_fu_1840_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln548_fu_1848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln548_fu_1852_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_1_fu_1867_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_fu_1874_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln674_fu_1878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_fu_1882_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_1_fu_1888_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln870_7_fu_1892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_fu_1906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln444_1_fu_1912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_2_fu_1924_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln674_fu_1918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1928_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_fu_1938_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_1_fu_1952_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_fu_1944_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_1_fu_1960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_1_fu_1964_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln358_fu_1970_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln870_10_fu_1974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_2_fu_1988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln444_8_fu_1994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_3_fu_2006_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln674_1_fu_2000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_2010_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_1_fu_2020_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_3_fu_2034_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_2_fu_2026_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_2_fu_2042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_2_fu_2046_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln358_1_fu_2052_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln870_11_fu_2056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_3_fu_2070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln444_9_fu_2076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_4_fu_2088_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln674_2_fu_2082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_2092_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_2_fu_2102_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_5_fu_2116_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_4_fu_2108_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_3_fu_2124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_3_fu_2128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln358_2_fu_2134_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln870_12_fu_2138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_4_fu_2152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln444_10_fu_2158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_5_fu_2170_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln674_3_fu_2164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_2174_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_3_fu_2184_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_7_fu_2198_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_6_fu_2190_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_4_fu_2206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_4_fu_2210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln358_3_fu_2216_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln870_13_fu_2220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_5_fu_2234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln444_11_fu_2240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_6_fu_2252_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln674_4_fu_2246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_2256_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_4_fu_2266_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_9_fu_2280_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_8_fu_2272_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_5_fu_2288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_5_fu_2292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln358_4_fu_2298_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln870_14_fu_2302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_6_fu_2316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln444_12_fu_2322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_7_fu_2334_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln674_5_fu_2328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_2338_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_5_fu_2348_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_11_fu_2362_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_10_fu_2354_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_6_fu_2370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_6_fu_2374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln358_5_fu_2380_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln870_15_fu_2384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_7_fu_2398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln444_13_fu_2404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_8_fu_2416_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln674_6_fu_2410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_2420_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_6_fu_2430_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_13_fu_2444_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_12_fu_2436_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_7_fu_2452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_7_fu_2456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln358_6_fu_2462_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_2488_p9 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_2505_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_2505_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2513_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2519_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2519_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2524_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_2524_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2531_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2537_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2537_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2543_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2543_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_fu_1082_ap_start : STD_LOGIC;
    signal grp_fu_1082_ap_done : STD_LOGIC;
    signal grp_fu_1107_ap_start : STD_LOGIC;
    signal grp_fu_1107_ap_done : STD_LOGIC;
    signal grp_fu_1123_ap_start : STD_LOGIC;
    signal grp_fu_1123_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (92 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_block_pp1 : BOOLEAN;
    signal ap_block_pp2 : BOOLEAN;
    signal ap_block_pp3 : BOOLEAN;
    signal ap_enable_operation_381 : BOOLEAN;
    signal ap_enable_state67_pp0_iter2_stage0 : BOOLEAN;
    signal ap_predicate_op395_store_state68 : BOOLEAN;
    signal ap_enable_operation_395 : BOOLEAN;
    signal ap_enable_state68_pp0_iter3_stage0 : BOOLEAN;
    signal ap_predicate_op409_store_state68 : BOOLEAN;
    signal ap_enable_operation_409 : BOOLEAN;
    signal ap_enable_operation_384 : BOOLEAN;
    signal ap_predicate_op397_store_state68 : BOOLEAN;
    signal ap_enable_operation_397 : BOOLEAN;
    signal ap_predicate_op411_store_state68 : BOOLEAN;
    signal ap_enable_operation_411 : BOOLEAN;
    signal ap_enable_operation_387 : BOOLEAN;
    signal ap_predicate_op399_store_state68 : BOOLEAN;
    signal ap_enable_operation_399 : BOOLEAN;
    signal ap_predicate_op413_store_state68 : BOOLEAN;
    signal ap_enable_operation_413 : BOOLEAN;
    signal ap_enable_operation_388 : BOOLEAN;
    signal ap_predicate_op393_store_state68 : BOOLEAN;
    signal ap_enable_operation_393 : BOOLEAN;
    signal ap_predicate_op417_store_state68 : BOOLEAN;
    signal ap_enable_operation_417 : BOOLEAN;
    signal ap_predicate_op389_store_state67 : BOOLEAN;
    signal ap_enable_operation_389 : BOOLEAN;
    signal ap_predicate_op401_store_state68 : BOOLEAN;
    signal ap_enable_operation_401 : BOOLEAN;
    signal ap_predicate_op415_store_state68 : BOOLEAN;
    signal ap_enable_operation_415 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_1082_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2505_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2505_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2513_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2519_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_2524_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2537_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln322_fu_1331_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgetracing_accel_TopDown_11_3_1024_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        iBuff_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff_ce0 : OUT STD_LOGIC;
        iBuff_we0 : OUT STD_LOGIC;
        iBuff_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff_ce1 : OUT STD_LOGIC;
        iBuff_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff1_ce0 : OUT STD_LOGIC;
        iBuff1_we0 : OUT STD_LOGIC;
        iBuff1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff1_ce1 : OUT STD_LOGIC;
        iBuff1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff2_ce0 : OUT STD_LOGIC;
        iBuff2_we0 : OUT STD_LOGIC;
        iBuff2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff2_ce1 : OUT STD_LOGIC;
        iBuff2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff3_ce0 : OUT STD_LOGIC;
        iBuff3_we0 : OUT STD_LOGIC;
        iBuff3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff3_ce1 : OUT STD_LOGIC;
        iBuff3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff4_ce0 : OUT STD_LOGIC;
        iBuff4_we0 : OUT STD_LOGIC;
        iBuff4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff4_ce1 : OUT STD_LOGIC;
        iBuff4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff5_ce0 : OUT STD_LOGIC;
        iBuff5_we0 : OUT STD_LOGIC;
        iBuff5_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff5_ce1 : OUT STD_LOGIC;
        iBuff5_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff6_ce0 : OUT STD_LOGIC;
        iBuff6_we0 : OUT STD_LOGIC;
        iBuff6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff6_ce1 : OUT STD_LOGIC;
        iBuff6_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff7_ce0 : OUT STD_LOGIC;
        iBuff7_we0 : OUT STD_LOGIC;
        iBuff7_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff7_ce1 : OUT STD_LOGIC;
        iBuff7_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff8_ce0 : OUT STD_LOGIC;
        iBuff8_we0 : OUT STD_LOGIC;
        iBuff8_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff8_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff8_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff8_ce1 : OUT STD_LOGIC;
        iBuff8_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff9_ce0 : OUT STD_LOGIC;
        iBuff9_we0 : OUT STD_LOGIC;
        iBuff9_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff9_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff9_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff9_ce1 : OUT STD_LOGIC;
        iBuff9_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff10_ce0 : OUT STD_LOGIC;
        iBuff10_we0 : OUT STD_LOGIC;
        iBuff10_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        iBuff10_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        iBuff10_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        iBuff10_ce1 : OUT STD_LOGIC;
        iBuff10_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bramtotal : IN STD_LOGIC_VECTOR (3 downto 0);
        bdrows : IN STD_LOGIC_VECTOR (10 downto 0);
        ram_row_depth : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component edgetracing_accel_udiv_11s_6ns_11_15_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component edgetracing_accel_udiv_12ns_11ns_12_16_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component edgetracing_accel_urem_13ns_3ns_13_17_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component edgetracing_accel_mul_8ns_3ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component edgetracing_accel_mux_114_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_13ns_11ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_12s_6ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_23ns_6ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component edgetracing_accel_mac_muladd_2ns_8ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_24s_6ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_10ns_6ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component edgetracing_accel_mul_mul_10ns_8ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component edgetracing_accel_iBuff_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgetracing_accel_iBuff_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgetracing_accel_oBuff_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgetracing_accel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        img_inp : OUT STD_LOGIC_VECTOR (63 downto 0);
        img_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component edgetracing_accel_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component edgetracing_accel_gmem4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component edgetracing_accel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        img_inp => img_inp,
        img_out => img_out,
        rows => rows,
        cols => cols,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem3_m_axi_U : component edgetracing_accel_gmem3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem3_ARVALID,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => gmem3_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem3_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem3_RVALID,
        I_RREADY => gmem3_RREADY,
        I_RDATA => gmem3_RDATA,
        I_RID => gmem3_RID,
        I_RUSER => gmem3_RUSER,
        I_RRESP => gmem3_RRESP,
        I_RLAST => gmem3_RLAST,
        I_AWVALID => gmem3_AWVALID,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => gmem3_addr_1_reg_2822,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => zext_ln315_reg_2817,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem3_WVALID,
        I_WREADY => gmem3_WREADY,
        I_WDATA => oReg_V_reg_3025,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => gmem3_BVALID,
        I_BREADY => gmem3_BREADY,
        I_BRESP => gmem3_BRESP,
        I_BID => gmem3_BID,
        I_BUSER => gmem3_BUSER);

    gmem4_m_axi_U : component edgetracing_accel_gmem4_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM4_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem4_AWVALID,
        AWREADY => m_axi_gmem4_AWREADY,
        AWADDR => m_axi_gmem4_AWADDR,
        AWID => m_axi_gmem4_AWID,
        AWLEN => m_axi_gmem4_AWLEN,
        AWSIZE => m_axi_gmem4_AWSIZE,
        AWBURST => m_axi_gmem4_AWBURST,
        AWLOCK => m_axi_gmem4_AWLOCK,
        AWCACHE => m_axi_gmem4_AWCACHE,
        AWPROT => m_axi_gmem4_AWPROT,
        AWQOS => m_axi_gmem4_AWQOS,
        AWREGION => m_axi_gmem4_AWREGION,
        AWUSER => m_axi_gmem4_AWUSER,
        WVALID => m_axi_gmem4_WVALID,
        WREADY => m_axi_gmem4_WREADY,
        WDATA => m_axi_gmem4_WDATA,
        WSTRB => m_axi_gmem4_WSTRB,
        WLAST => m_axi_gmem4_WLAST,
        WID => m_axi_gmem4_WID,
        WUSER => m_axi_gmem4_WUSER,
        ARVALID => m_axi_gmem4_ARVALID,
        ARREADY => m_axi_gmem4_ARREADY,
        ARADDR => m_axi_gmem4_ARADDR,
        ARID => m_axi_gmem4_ARID,
        ARLEN => m_axi_gmem4_ARLEN,
        ARSIZE => m_axi_gmem4_ARSIZE,
        ARBURST => m_axi_gmem4_ARBURST,
        ARLOCK => m_axi_gmem4_ARLOCK,
        ARCACHE => m_axi_gmem4_ARCACHE,
        ARPROT => m_axi_gmem4_ARPROT,
        ARQOS => m_axi_gmem4_ARQOS,
        ARREGION => m_axi_gmem4_ARREGION,
        ARUSER => m_axi_gmem4_ARUSER,
        RVALID => m_axi_gmem4_RVALID,
        RREADY => m_axi_gmem4_RREADY,
        RDATA => m_axi_gmem4_RDATA,
        RLAST => m_axi_gmem4_RLAST,
        RID => m_axi_gmem4_RID,
        RUSER => m_axi_gmem4_RUSER,
        RRESP => m_axi_gmem4_RRESP,
        BVALID => m_axi_gmem4_BVALID,
        BREADY => m_axi_gmem4_BREADY,
        BRESP => m_axi_gmem4_BRESP,
        BID => m_axi_gmem4_BID,
        BUSER => m_axi_gmem4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem4_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem4_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem4_RDATA,
        I_RID => gmem4_RID,
        I_RUSER => gmem4_RUSER,
        I_RRESP => gmem4_RRESP,
        I_RLAST => gmem4_RLAST,
        I_AWVALID => gmem4_AWVALID,
        I_AWREADY => gmem4_AWREADY,
        I_AWADDR => sext_ln548_fu_2472_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem4_WVALID,
        I_WREADY => gmem4_WREADY,
        I_WDATA => gmem4_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => gmem4_BVALID,
        I_BREADY => gmem4_BREADY,
        I_BRESP => gmem4_BRESP,
        I_BID => gmem4_BID,
        I_BUSER => gmem4_BUSER);

    iBuff_V_0_U : component edgetracing_accel_iBuff_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_0_address0,
        ce0 => iBuff_V_0_ce0,
        we0 => iBuff_V_0_we0,
        d0 => iBuff_V_0_d0,
        q0 => iBuff_V_0_q0,
        address1 => iBuff_V_0_address1,
        ce1 => iBuff_V_0_ce1,
        we1 => iBuff_V_0_we1,
        d1 => iReg_V_reg_2872,
        q1 => iBuff_V_0_q1);

    iBuff_V_1_U : component edgetracing_accel_iBuff_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_1_address0,
        ce0 => iBuff_V_1_ce0,
        we0 => iBuff_V_1_we0,
        d0 => iBuff_V_1_d0,
        q0 => iBuff_V_1_q0,
        address1 => iBuff_V_1_address1,
        ce1 => iBuff_V_1_ce1,
        we1 => iBuff_V_1_we1,
        d1 => iReg_V_reg_2872,
        q1 => iBuff_V_1_q1);

    iBuff_V_2_U : component edgetracing_accel_iBuff_V_2
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_2_address0,
        ce0 => iBuff_V_2_ce0,
        we0 => iBuff_V_2_we0,
        d0 => iBuff_V_2_d0,
        q0 => iBuff_V_2_q0,
        address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff2_address1,
        ce1 => iBuff_V_2_ce1,
        q1 => iBuff_V_2_q1);

    iBuff_V_3_U : component edgetracing_accel_iBuff_V_2
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_3_address0,
        ce0 => iBuff_V_3_ce0,
        we0 => iBuff_V_3_we0,
        d0 => iBuff_V_3_d0,
        q0 => iBuff_V_3_q0,
        address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff3_address1,
        ce1 => iBuff_V_3_ce1,
        q1 => iBuff_V_3_q1);

    iBuff_V_4_U : component edgetracing_accel_iBuff_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_4_address0,
        ce0 => iBuff_V_4_ce0,
        we0 => iBuff_V_4_we0,
        d0 => iBuff_V_4_d0,
        q0 => iBuff_V_4_q0,
        address1 => iBuff_V_4_address1,
        ce1 => iBuff_V_4_ce1,
        we1 => iBuff_V_4_we1,
        d1 => iReg_V_reg_2872,
        q1 => iBuff_V_4_q1);

    iBuff_V_5_U : component edgetracing_accel_iBuff_V_2
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_5_address0,
        ce0 => iBuff_V_5_ce0,
        we0 => iBuff_V_5_we0,
        d0 => iBuff_V_5_d0,
        q0 => iBuff_V_5_q0,
        address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff5_address1,
        ce1 => iBuff_V_5_ce1,
        q1 => iBuff_V_5_q1);

    iBuff_V_6_U : component edgetracing_accel_iBuff_V_2
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_6_address0,
        ce0 => iBuff_V_6_ce0,
        we0 => iBuff_V_6_we0,
        d0 => iBuff_V_6_d0,
        q0 => iBuff_V_6_q0,
        address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff6_address1,
        ce1 => iBuff_V_6_ce1,
        q1 => iBuff_V_6_q1);

    iBuff_V_7_U : component edgetracing_accel_iBuff_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_7_address0,
        ce0 => iBuff_V_7_ce0,
        we0 => iBuff_V_7_we0,
        d0 => iBuff_V_7_d0,
        q0 => iBuff_V_7_q0,
        address1 => iBuff_V_7_address1,
        ce1 => iBuff_V_7_ce1,
        we1 => iBuff_V_7_we1,
        d1 => iReg_V_reg_2872,
        q1 => iBuff_V_7_q1);

    iBuff_V_8_U : component edgetracing_accel_iBuff_V_2
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_8_address0,
        ce0 => iBuff_V_8_ce0,
        we0 => iBuff_V_8_we0,
        d0 => iBuff_V_8_d0,
        q0 => iBuff_V_8_q0,
        address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff8_address1,
        ce1 => iBuff_V_8_ce1,
        q1 => iBuff_V_8_q1);

    iBuff_V_9_U : component edgetracing_accel_iBuff_V_2
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_9_address0,
        ce0 => iBuff_V_9_ce0,
        we0 => iBuff_V_9_we0,
        d0 => iBuff_V_9_d0,
        q0 => iBuff_V_9_q0,
        address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff9_address1,
        ce1 => iBuff_V_9_ce1,
        q1 => iBuff_V_9_q1);

    iBuff_V_10_U : component edgetracing_accel_iBuff_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iBuff_V_10_address0,
        ce0 => iBuff_V_10_ce0,
        we0 => iBuff_V_10_we0,
        d0 => iBuff_V_10_d0,
        q0 => iBuff_V_10_q0,
        address1 => iBuff_V_10_address1,
        ce1 => iBuff_V_10_ce1,
        we1 => iBuff_V_10_we1,
        d1 => iReg_V_reg_2872,
        q1 => iBuff_V_10_q1);

    oBuff_V_U : component edgetracing_accel_oBuff_V
    generic map (
        DataWidth => 64,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => oBuff_V_address0,
        ce0 => oBuff_V_ce0,
        we0 => oBuff_V_we0,
        d0 => gmem3_addr_read_reg_3073,
        q0 => oBuff_V_q0);

    grp_TopDown_11_3_1024_s_fu_886 : component edgetracing_accel_TopDown_11_3_1024_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_TopDown_11_3_1024_s_fu_886_ap_start,
        ap_done => grp_TopDown_11_3_1024_s_fu_886_ap_done,
        ap_idle => grp_TopDown_11_3_1024_s_fu_886_ap_idle,
        ap_ready => grp_TopDown_11_3_1024_s_fu_886_ap_ready,
        iBuff_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff_address0,
        iBuff_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff_ce0,
        iBuff_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff_we0,
        iBuff_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff_d0,
        iBuff_q0 => iBuff_V_0_q0,
        iBuff_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff_address1,
        iBuff_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff_ce1,
        iBuff_q1 => iBuff_V_0_q1,
        iBuff1_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff1_address0,
        iBuff1_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce0,
        iBuff1_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff1_we0,
        iBuff1_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff1_d0,
        iBuff1_q0 => iBuff_V_1_q0,
        iBuff1_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff1_address1,
        iBuff1_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce1,
        iBuff1_q1 => iBuff_V_1_q1,
        iBuff2_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff2_address0,
        iBuff2_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce0,
        iBuff2_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff2_we0,
        iBuff2_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff2_d0,
        iBuff2_q0 => iBuff_V_2_q0,
        iBuff2_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff2_address1,
        iBuff2_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce1,
        iBuff2_q1 => iBuff_V_2_q1,
        iBuff3_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff3_address0,
        iBuff3_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce0,
        iBuff3_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff3_we0,
        iBuff3_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff3_d0,
        iBuff3_q0 => iBuff_V_3_q0,
        iBuff3_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff3_address1,
        iBuff3_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce1,
        iBuff3_q1 => iBuff_V_3_q1,
        iBuff4_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff4_address0,
        iBuff4_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce0,
        iBuff4_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff4_we0,
        iBuff4_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff4_d0,
        iBuff4_q0 => iBuff_V_4_q0,
        iBuff4_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff4_address1,
        iBuff4_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce1,
        iBuff4_q1 => iBuff_V_4_q1,
        iBuff5_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff5_address0,
        iBuff5_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce0,
        iBuff5_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff5_we0,
        iBuff5_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff5_d0,
        iBuff5_q0 => iBuff_V_5_q0,
        iBuff5_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff5_address1,
        iBuff5_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce1,
        iBuff5_q1 => iBuff_V_5_q1,
        iBuff6_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff6_address0,
        iBuff6_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce0,
        iBuff6_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff6_we0,
        iBuff6_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff6_d0,
        iBuff6_q0 => iBuff_V_6_q0,
        iBuff6_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff6_address1,
        iBuff6_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce1,
        iBuff6_q1 => iBuff_V_6_q1,
        iBuff7_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff7_address0,
        iBuff7_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce0,
        iBuff7_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff7_we0,
        iBuff7_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff7_d0,
        iBuff7_q0 => iBuff_V_7_q0,
        iBuff7_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff7_address1,
        iBuff7_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce1,
        iBuff7_q1 => iBuff_V_7_q1,
        iBuff8_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff8_address0,
        iBuff8_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce0,
        iBuff8_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff8_we0,
        iBuff8_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff8_d0,
        iBuff8_q0 => iBuff_V_8_q0,
        iBuff8_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff8_address1,
        iBuff8_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce1,
        iBuff8_q1 => iBuff_V_8_q1,
        iBuff9_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff9_address0,
        iBuff9_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce0,
        iBuff9_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff9_we0,
        iBuff9_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff9_d0,
        iBuff9_q0 => iBuff_V_9_q0,
        iBuff9_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff9_address1,
        iBuff9_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce1,
        iBuff9_q1 => iBuff_V_9_q1,
        iBuff10_address0 => grp_TopDown_11_3_1024_s_fu_886_iBuff10_address0,
        iBuff10_ce0 => grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce0,
        iBuff10_we0 => grp_TopDown_11_3_1024_s_fu_886_iBuff10_we0,
        iBuff10_d0 => grp_TopDown_11_3_1024_s_fu_886_iBuff10_d0,
        iBuff10_q0 => iBuff_V_10_q0,
        iBuff10_address1 => grp_TopDown_11_3_1024_s_fu_886_iBuff10_address1,
        iBuff10_ce1 => grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce1,
        iBuff10_q1 => iBuff_V_10_q1,
        bramtotal => bramtotal_reg_2703,
        bdrows => bdrows_reg_2601,
        ram_row_depth => ram_row_depth_reg_2582);

    udiv_11s_6ns_11_15_seq_1_U43 : component edgetracing_accel_udiv_11s_6ns_11_15_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1082_ap_start,
        done => grp_fu_1082_ap_done,
        din0 => ap_const_lv11_400,
        din1 => grp_fu_1082_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1082_p2);

    udiv_12ns_11ns_12_16_seq_1_U44 : component edgetracing_accel_udiv_12ns_11ns_12_16_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1107_ap_start,
        done => grp_fu_1107_ap_done,
        din0 => grp_fu_1107_p0,
        din1 => grp_fu_1107_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1107_p2);

    urem_13ns_3ns_13_17_seq_1_U45 : component edgetracing_accel_urem_13ns_3ns_13_17_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 13,
        din1_WIDTH => 3,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1123_ap_start,
        done => grp_fu_1123_ap_done,
        din0 => grp_fu_1123_p0,
        din1 => grp_fu_1123_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1123_p2);

    mul_8ns_3ns_11_1_1_U46 : component edgetracing_accel_mul_8ns_3ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln322_fu_1331_p0,
        din1 => mul_ln322_fu_1331_p1,
        dout => mul_ln322_fu_1331_p2);

    mux_114_64_1_1_U47 : component edgetracing_accel_mux_114_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => iBuff_V_0_q1,
        din1 => iBuff_V_1_q1,
        din2 => iBuff_V_2_q0,
        din3 => iBuff_V_3_q0,
        din4 => iBuff_V_4_q1,
        din5 => iBuff_V_5_q0,
        din6 => iBuff_V_6_q0,
        din7 => iBuff_V_7_q1,
        din8 => iBuff_V_8_q0,
        din9 => iBuff_V_9_q0,
        din10 => iBuff_V_10_q1,
        din11 => trunc_ln402_reg_2960,
        dout => oReg_V_fu_1673_p13);

    mul_mul_13ns_11ns_24_4_1_U48 : component edgetracing_accel_mul_mul_13ns_11ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2505_p0,
        din1 => grp_fu_2505_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2505_p2);

    mul_mul_12s_6ns_18_4_1_U49 : component edgetracing_accel_mul_mul_12s_6ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 6,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sub66_i_i_fu_1148_p2,
        din1 => grp_fu_2513_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2513_p2);

    mul_mul_23ns_6ns_29_4_1_U50 : component edgetracing_accel_mul_mul_23ns_6ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 23,
        din1_WIDTH => 6,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2519_p0,
        din1 => grp_fu_2519_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2519_p2);

    mac_muladd_2ns_8ns_24ns_24_4_1_U51 : component edgetracing_accel_mac_muladd_2ns_8ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2524_p0,
        din1 => grp_fu_2524_p1,
        din2 => sub_ln324_reg_2725,
        ce => ap_const_logic_1,
        dout => grp_fu_2524_p3);

    mul_mul_24s_6ns_30_4_1_U52 : component edgetracing_accel_mul_mul_24s_6ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 6,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sel_tmp_v_fu_1340_p3,
        din1 => grp_fu_2531_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2531_p2);

    mul_mul_10ns_6ns_15_4_1_U53 : component edgetracing_accel_mul_mul_10ns_6ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 6,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2537_p0,
        din1 => grp_fu_2537_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2537_p2);

    mul_mul_10ns_8ns_17_4_1_U54 : component edgetracing_accel_mul_mul_10ns_8ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2543_p0,
        din1 => grp_fu_2543_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2543_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state65) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state65)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state65);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state73))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state73)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state73);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state92))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state92)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state92);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter1_state100)) then 
                        ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                    ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_TopDown_11_3_1024_s_fu_886_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_TopDown_11_3_1024_s_fu_886_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (icmp_ln377_fu_1564_p2 = ap_const_lv1_0))) then 
                    grp_TopDown_11_3_1024_s_fu_886_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_TopDown_11_3_1024_s_fu_886_ap_ready = ap_const_logic_1)) then 
                    grp_TopDown_11_3_1024_s_fu_886_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bit_reg_875_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_reg_3088 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                bit_reg_875 <= bit_2_fu_2482_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                bit_reg_875 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    dep_V_2_reg_796_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_reg_2946 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                dep_V_2_reg_796 <= rhs_reg_2955;
            elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                dep_V_2_reg_796 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    dep_V_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dep_V_reg_741 <= dep_V_5_reg_2849;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                dep_V_reg_741 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_1_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_1576_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_774 <= i_2_fu_1570_p2;
            elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                i_1_reg_774 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;

    i_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_fu_1419_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_719 <= i_3_fu_1413_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                i_reg_719 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;

    id_V_reg_864_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_fu_1782_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                id_V_reg_864 <= id_V_1_fu_1822_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                id_V_reg_864 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    idx1_V_2_reg_785_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_1576_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                idx1_V_2_reg_785 <= idx1_V_4_fu_1667_p2;
            elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                idx1_V_2_reg_785 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    idx1_V_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_fu_1419_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idx1_V_reg_730 <= idx1_V_5_fu_1495_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                idx1_V_reg_730 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    idx2_V_3_reg_807_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_reg_2946 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                idx2_V_3_reg_807 <= idx2_V_6_reg_2950;
            elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                idx2_V_3_reg_807 <= ap_const_lv16_1;
            end if; 
        end if;
    end process;

    idx2_V_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idx2_V_reg_752 <= idx2_V_7_reg_2842;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                idx2_V_reg_752 <= ap_const_lv16_1;
            end if; 
        end if;
    end process;

    ii_reg_818_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                ii_reg_818 <= add_ln417_reg_3035;
            elsif (((icmp_ln312_fu_1215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                ii_reg_818 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_686_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem3_BVALID = ap_const_logic_0) and (icmp_ln332_reg_2829 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                indvar_flatten_reg_686 <= add_ln312_reg_2730;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                indvar_flatten_reg_686 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    inter_i_reg_697_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem3_BVALID = ap_const_logic_0) and (icmp_ln332_reg_2829 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                inter_i_reg_697 <= select_ln312_2_reg_2750;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                inter_i_reg_697 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    intra_i_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                intra_i_reg_763 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state71) and (grp_TopDown_11_3_1024_s_fu_886_ap_done = ap_const_logic_1))) then 
                intra_i_reg_763 <= intra_i_1_reg_2933;
            end if; 
        end if;
    end process;

    j_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_fu_1782_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                j_reg_842 <= add_ln433_fu_1776_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                j_reg_842 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k_reg_830_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_reg_3069 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                k_reg_830 <= add_ln422_reg_3064;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                k_reg_830 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    pixel_V_reg_853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_reg_3088 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                pixel_V_reg_853 <= pixel_V_2_reg_3097;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                pixel_V_reg_853 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    slice_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem3_BVALID = ap_const_logic_0) and (icmp_ln332_reg_2829 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                slice_reg_708 <= slice_1_fu_1700_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                slice_reg_708 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln305_2_reg_2618 <= add_ln305_2_fu_1117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                add_ln312_reg_2730 <= add_ln312_fu_1209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                add_ln417_reg_3035 <= add_ln417_fu_1705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln422_reg_3064 <= add_ln422_fu_1760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                bdrows_reg_2601 <= grp_fu_1082_p2;
                    zext_ln304_reg_2607(10 downto 0) <= zext_ln304_fu_1091_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                bramsetsval_reg_2634 <= bramsetsval_fu_1135_p2;
                trunc_ln305_reg_2640 <= trunc_ln305_fu_1140_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                bramtotal_reg_2703 <= bramtotal_fu_1187_p2;
                    op2_assign_1_cast_cast_reg_2708(12 downto 0) <= op2_assign_1_cast_cast_fu_1197_p1(12 downto 0);
                op2_assign_reg_2720 <= grp_fu_2513_p2;
                    ram_row_depth_cast35_cast_reg_2714(5 downto 0) <= ram_row_depth_cast35_cast_fu_1201_p1(5 downto 0);
                sub_ln324_reg_2725 <= sub_ln324_fu_1204_p2;
                trunc_ln307_reg_2698 <= trunc_ln307_fu_1184_p1;
                    zext_ln302_1_reg_2655(7 downto 0) <= zext_ln302_1_fu_1157_p1(7 downto 0);
                    zext_ln302_2_reg_2665(7 downto 0) <= zext_ln302_2_fu_1163_p1(7 downto 0);
                    zext_ln302_reg_2660(7 downto 0) <= zext_ln302_fu_1160_p1(7 downto 0);
                    zext_ln303_2_reg_2685(5 downto 0) <= zext_ln303_2_fu_1178_p1(5 downto 0);
                    zext_ln303_4_reg_2675(5 downto 0) <= zext_ln303_4_fu_1172_p1(5 downto 0);
                    zext_ln303_5_reg_2680(5 downto 0) <= zext_ln303_5_fu_1175_p1(5 downto 0);
                    zext_ln303_reg_2670(5 downto 0) <= zext_ln303_fu_1169_p1(5 downto 0);
                    zext_ln305_1_reg_2693(12 downto 0) <= zext_ln305_1_fu_1181_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln312_fu_1215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                cmp119_i_i270_reg_2775 <= cmp119_i_i270_fu_1298_p2;
                div153_i_i_reg_2770 <= npcCols_8_reg_2563(10 downto 3);
                    ram_row_depth_cast25_reg_2789(5 downto 0) <= ram_row_depth_cast25_fu_1316_p1(5 downto 0);
                trunc_ln417_2_reg_2784 <= npcCols_reg_2558(10 downto 3);
                    zext_ln414_reg_2779(7 downto 0) <= zext_ln414_fu_1303_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_fu_1419_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dep_V_5_reg_2849 <= dep_V_5_fu_1473_p3;
                idx2_V_7_reg_2842 <= idx2_V_7_fu_1465_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                empty_38_reg_3048 <= empty_38_fu_1731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                gmem3_addr_1_reg_2822 <= sext_ln536_1_fu_1398_p1;
                    zext_ln315_reg_2817(28 downto 0) <= zext_ln315_fu_1394_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_reg_3069 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                gmem3_addr_read_reg_3073 <= gmem3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_reg_2838_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                iBuff_V_0_addr_reg_2908 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
                iBuff_V_10_addr_reg_2928 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
                iBuff_V_1_addr_reg_2913 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
                iBuff_V_4_addr_reg_2918 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
                iBuff_V_7_addr_reg_2923 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iReg_V_reg_2872 <= gmem3_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                iReg_V_reg_2872_pp0_iter2_reg <= iReg_V_reg_2872;
                icmp_ln870_2_reg_2892_pp0_iter2_reg <= icmp_ln870_2_reg_2892;
                icmp_ln870_4_reg_2904_pp0_iter2_reg <= icmp_ln870_4_reg_2904;
                icmp_ln870_5_reg_2896_pp0_iter2_reg <= icmp_ln870_5_reg_2896;
                icmp_ln870_6_reg_2900_pp0_iter2_reg <= icmp_ln870_6_reg_2900;
                index_reg_2856_pp0_iter2_reg <= index_reg_2856_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln312_fu_1215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                icmp_ln319_reg_2760 <= icmp_ln319_fu_1273_p2;
                select_ln312_1_reg_2744 <= select_ln312_1_fu_1253_p3;
                select_ln312_2_reg_2750 <= select_ln312_2_fu_1261_p3;
                select_ln312_reg_2738 <= select_ln312_fu_1227_p3;
                trunc_ln318_reg_2755 <= trunc_ln318_fu_1269_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln332_1_reg_2838 <= icmp_ln332_1_fu_1419_p2;
                icmp_ln332_1_reg_2838_pp0_iter1_reg <= icmp_ln332_1_reg_2838;
                icmp_ln870_2_reg_2892 <= icmp_ln870_2_fu_1501_p2;
                index_reg_2856_pp0_iter1_reg <= index_reg_2856;
                trunc_ln353_reg_2863_pp0_iter1_reg <= trunc_ln353_reg_2863;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                icmp_ln332_reg_2829 <= icmp_ln332_fu_1408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln387_reg_2946 <= icmp_ln387_fu_1576_p2;
                icmp_ln387_reg_2946_pp1_iter1_reg <= icmp_ln387_reg_2946;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln422_reg_3069 <= icmp_ln422_fu_1766_p2;
                icmp_ln422_reg_3069_pp2_iter1_reg <= icmp_ln422_reg_3069;
                k_reg_830_pp2_iter1_reg <= k_reg_830;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln433_reg_3088 <= icmp_ln433_fu_1782_p2;
                icmp_ln452_reg_3112_pp3_iter1_reg <= icmp_ln452_reg_3112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_fu_1782_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln452_reg_3112 <= icmp_ln452_fu_1830_p2;
                icmp_ln870_3_reg_3092 <= icmp_ln870_3_fu_1791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln452_reg_3112_pp3_iter2_reg <= icmp_ln452_reg_3112_pp3_iter1_reg;
                icmp_ln452_reg_3112_pp3_iter3_reg <= icmp_ln452_reg_3112_pp3_iter2_reg;
                icmp_ln452_reg_3112_pp3_iter4_reg <= icmp_ln452_reg_3112_pp3_iter3_reg;
                icmp_ln452_reg_3112_pp3_iter5_reg <= icmp_ln452_reg_3112_pp3_iter4_reg;
                icmp_ln452_reg_3112_pp3_iter6_reg <= icmp_ln452_reg_3112_pp3_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_reg_3088 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln870_16_reg_3156 <= icmp_ln870_16_fu_2466_p2;
                select_ln870_1_reg_3126 <= select_ln870_1_fu_1980_p3;
                select_ln870_2_reg_3131 <= select_ln870_2_fu_2062_p3;
                select_ln870_3_reg_3136 <= select_ln870_3_fu_2144_p3;
                select_ln870_4_reg_3141 <= select_ln870_4_fu_2226_p3;
                select_ln870_5_reg_3146 <= select_ln870_5_fu_2308_p3;
                select_ln870_6_reg_3151 <= select_ln870_6_fu_2390_p3;
                select_ln870_reg_3121 <= select_ln870_fu_1898_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_2_fu_1501_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln870_4_reg_2904 <= icmp_ln870_4_fu_1518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_2_fu_1501_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln870_5_reg_2896 <= icmp_ln870_5_fu_1506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_5_fu_1506_p2 = ap_const_lv1_1) and (icmp_ln870_2_fu_1501_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln870_6_reg_2900 <= icmp_ln870_6_fu_1513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_1576_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                idx2_V_6_reg_2950 <= idx2_V_6_fu_1618_p3;
                rhs_reg_2955 <= rhs_fu_1626_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                img_inp_read_reg_2552 <= img_inp;
                img_out_read_reg_2547 <= img_out;
                npcCols_8_reg_2563 <= npcCols_8_fu_1046_p3;
                npcCols_reg_2558 <= npcCols_fu_984_p3;
                ram_row_depth_reg_2582 <= npcCols_fu_984_p3(10 downto 5);
                slice_h_reg_2573 <= rows(9 downto 2);
                trunc_ln302_reg_2568 <= trunc_ln302_fu_1054_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln332_1_fu_1419_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                index_reg_2856 <= index_fu_1485_p2;
                trunc_ln353_reg_2863 <= trunc_ln353_fu_1491_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                intra_i_1_reg_2933 <= intra_i_1_fu_1558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                lBound_reg_2799 <= grp_fu_2519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                mul_ln414_reg_3078 <= grp_fu_2543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_reg_2946 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                oReg_V_reg_3025 <= oReg_V_fu_1673_p13;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_fu_1782_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                pixel_V_2_reg_3097 <= pixel_V_2_fu_1803_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln452_fu_1830_p2 = ap_const_lv1_1) and (icmp_ln433_fu_1782_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                trunc_ln2_reg_3116 <= add_ln548_fu_1852_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_1576_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                trunc_ln402_reg_2960 <= trunc_ln402_fu_1663_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                trunc_ln536_1_reg_2812 <= add_ln536_fu_1379_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                    zext_ln414_1_reg_3053(9 downto 0) <= zext_ln414_1_fu_1736_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln304_reg_2607(11) <= '0';
    zext_ln302_1_reg_2655(9 downto 8) <= "00";
    zext_ln302_reg_2660(10 downto 8) <= "000";
    zext_ln302_2_reg_2665(22 downto 8) <= "000000000000000";
    zext_ln303_reg_2670(31 downto 6) <= "00000000000000000000000000";
    zext_ln303_4_reg_2675(29 downto 6) <= "000000000000000000000000";
    zext_ln303_5_reg_2680(28 downto 6) <= "00000000000000000000000";
    zext_ln303_2_reg_2685(15 downto 6) <= "0000000000";
    zext_ln305_1_reg_2693(15 downto 13) <= "000";
    op2_assign_1_cast_cast_reg_2708(15 downto 13) <= "000";
    ram_row_depth_cast35_cast_reg_2714(9 downto 6) <= "0000";
    zext_ln414_reg_2779(16 downto 8) <= "000000000";
    ram_row_depth_cast25_reg_2789(14 downto 6) <= "000000000";
    zext_ln315_reg_2817(31 downto 29) <= "000";
    zext_ln414_1_reg_3053(16 downto 10) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state72, ap_enable_reg_pp1_iter2, ap_CS_fsm_state80, icmp_ln332_reg_2829, ap_CS_fsm_state58, ap_CS_fsm_state85, cmp119_i_i270_reg_2775, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter7, gmem3_AWREADY, gmem3_ARREADY, gmem3_BVALID, ap_CS_fsm_state50, icmp_ln312_fu_1215_p2, ap_enable_reg_pp0_iter0, icmp_ln332_1_fu_1419_p2, ap_CS_fsm_state70, ap_enable_reg_pp1_iter0, icmp_ln387_fu_1576_p2, ap_CS_fsm_state81, icmp_ln417_fu_1711_p2, ap_enable_reg_pp2_iter0, icmp_ln422_fu_1766_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter6, grp_TopDown_11_3_1024_s_fu_886_ap_done, ap_CS_fsm_state71, icmp_ln377_fu_1564_p2, ap_block_state85_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln312_fu_1215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((gmem3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln332_1_fu_1419_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln332_1_fu_1419_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((icmp_ln332_reg_2829 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70) and (icmp_ln377_fu_1564_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                elsif (((icmp_ln332_reg_2829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70) and (icmp_ln377_fu_1564_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (grp_TopDown_11_3_1024_s_fu_886_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                if (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln387_fu_1576_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((icmp_ln387_fu_1576_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if ((not(((gmem3_BVALID = ap_const_logic_0) and (icmp_ln332_reg_2829 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((icmp_ln417_fu_1711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((cmp119_i_i270_reg_2775 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state85_io) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                elsif (((cmp119_i_i270_reg_2775 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state85_io) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln422_fu_1766_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((icmp_ln422_fu_1766_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) and not(((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln305_2_fu_1117_p2 <= std_logic_vector(unsigned(zext_ln305_fu_1113_p1) + unsigned(ap_const_lv13_2));
    add_ln305_fu_1095_p2 <= std_logic_vector(unsigned(zext_ln304_fu_1091_p1) + unsigned(ap_const_lv12_9));
    add_ln312_1_fu_1235_p2 <= std_logic_vector(unsigned(inter_i_reg_697) + unsigned(ap_const_lv2_1));
    add_ln312_fu_1209_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_686) + unsigned(ap_const_lv4_1));
    add_ln417_fu_1705_p2 <= std_logic_vector(unsigned(ii_reg_818) + unsigned(ap_const_lv10_1));
    add_ln422_fu_1760_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_834_p4) + unsigned(ap_const_lv6_1));
    add_ln433_fu_1776_p2 <= std_logic_vector(unsigned(j_reg_842) + unsigned(ap_const_lv8_1));
    add_ln444_10_fu_2158_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_9));
    add_ln444_11_fu_2240_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_B));
    add_ln444_12_fu_2322_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_D));
    add_ln444_13_fu_2404_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_F));
    add_ln444_1_fu_1912_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_3));
    add_ln444_2_fu_1988_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_4));
    add_ln444_3_fu_2070_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_6));
    add_ln444_4_fu_2152_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_8));
    add_ln444_5_fu_2234_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_A));
    add_ln444_6_fu_2316_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_C));
    add_ln444_7_fu_2398_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_E));
    add_ln444_8_fu_1994_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_5));
    add_ln444_9_fu_2076_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_7));
    add_ln444_fu_1906_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_2));
    add_ln452_fu_1835_p2 <= std_logic_vector(unsigned(zext_ln433_fu_1787_p1) + unsigned(mul_ln414_reg_3078));
    add_ln536_fu_1379_p2 <= std_logic_vector(signed(sext_ln536_fu_1375_p1) + signed(img_inp_read_reg_2552));
    add_ln548_fu_1852_p2 <= std_logic_vector(unsigned(zext_ln548_fu_1848_p1) + unsigned(img_out_read_reg_2547));
    add_ln691_fu_1816_p2 <= std_logic_vector(unsigned(id_V_reg_864) + unsigned(ap_const_lv3_1));
    and_ln319_fu_1355_p2 <= (xor_ln312_fu_1350_p2 and icmp_ln319_reg_2760);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(64);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(69);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(86);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(91);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state107 <= ap_CS_fsm(92);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state69 <= ap_CS_fsm(65);
    ap_CS_fsm_state70 <= ap_CS_fsm(66);
    ap_CS_fsm_state71 <= ap_CS_fsm(67);
    ap_CS_fsm_state72 <= ap_CS_fsm(68);
    ap_CS_fsm_state80 <= ap_CS_fsm(74);
    ap_CS_fsm_state81 <= ap_CS_fsm(75);
    ap_CS_fsm_state84 <= ap_CS_fsm(78);
    ap_CS_fsm_state85 <= ap_CS_fsm(79);
    ap_CS_fsm_state91 <= ap_CS_fsm(85);
    ap_CS_fsm_state95 <= ap_CS_fsm(87);
    ap_CS_fsm_state98 <= ap_CS_fsm(90);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln332_1_reg_2838, gmem3_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem3_RVALID = ap_const_logic_0) and (icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln332_1_reg_2838, gmem3_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem3_RVALID = ap_const_logic_0) and (icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_assign_proc : process(ap_CS_fsm, ap_block_pp1_stage0_subdone)
    begin
                ap_block_pp1 <= ((ap_ST_fsm_pp1_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp1_stage0_subdone));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state75_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_io));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state75_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_io));
    end process;


    ap_block_pp2_assign_proc : process(ap_CS_fsm, ap_block_pp2_stage0_subdone)
    begin
                ap_block_pp2 <= ((ap_ST_fsm_pp2_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp2_stage0_subdone));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln422_reg_3069, gmem3_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((gmem3_RVALID = ap_const_logic_0) and (icmp_ln422_reg_3069 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln422_reg_3069, gmem3_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((gmem3_RVALID = ap_const_logic_0) and (icmp_ln422_reg_3069 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_assign_proc : process(ap_CS_fsm, ap_block_pp3_stage0_subdone)
    begin
                ap_block_pp3 <= ((ap_ST_fsm_pp3_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp3_stage0_subdone));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(ap_enable_reg_pp3_iter7, icmp_ln452_reg_3112_pp3_iter6_reg, gmem4_BVALID)
    begin
                ap_block_pp3_stage0_01001 <= ((gmem4_BVALID = ap_const_logic_0) and (icmp_ln452_reg_3112_pp3_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter7, icmp_ln452_reg_3112_pp3_iter6_reg, gmem4_BVALID, ap_block_state100_io, ap_block_state101_io)
    begin
                ap_block_pp3_stage0_11001 <= (((gmem4_BVALID = ap_const_logic_0) and (icmp_ln452_reg_3112_pp3_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state101_io)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state100_io)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter7, icmp_ln452_reg_3112_pp3_iter6_reg, gmem4_BVALID, ap_block_state100_io, ap_block_state101_io)
    begin
                ap_block_pp3_stage0_subdone <= (((gmem4_BVALID = ap_const_logic_0) and (icmp_ln452_reg_3112_pp3_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state101_io)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state100_io)));
    end process;


    ap_block_state100_io_assign_proc : process(gmem4_AWREADY, ap_predicate_op669_writereq_state100)
    begin
                ap_block_state100_io <= ((ap_predicate_op669_writereq_state100 = ap_const_boolean_1) and (gmem4_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state100_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state101_io_assign_proc : process(icmp_ln452_reg_3112_pp3_iter1_reg, gmem4_WREADY)
    begin
                ap_block_state101_io <= ((gmem4_WREADY = ap_const_logic_0) and (icmp_ln452_reg_3112_pp3_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state101_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state106_pp3_stage0_iter7_assign_proc : process(icmp_ln452_reg_3112_pp3_iter6_reg, gmem4_BVALID)
    begin
                ap_block_state106_pp3_stage0_iter7 <= ((gmem4_BVALID = ap_const_logic_0) and (icmp_ln452_reg_3112_pp3_iter6_reg = ap_const_lv1_1));
    end process;

        ap_block_state65_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state66_pp0_stage0_iter1_assign_proc : process(icmp_ln332_1_reg_2838, gmem3_RVALID)
    begin
                ap_block_state66_pp0_stage0_iter1 <= ((gmem3_RVALID = ap_const_logic_0) and (icmp_ln332_1_reg_2838 = ap_const_lv1_0));
    end process;

        ap_block_state67_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_io_assign_proc : process(icmp_ln387_reg_2946_pp1_iter1_reg, gmem3_WREADY)
    begin
                ap_block_state75_io <= ((gmem3_WREADY = ap_const_logic_0) and (icmp_ln387_reg_2946_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state75_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state80_assign_proc : process(icmp_ln332_reg_2829, gmem3_BVALID)
    begin
                ap_block_state80 <= ((gmem3_BVALID = ap_const_logic_0) and (icmp_ln332_reg_2829 = ap_const_lv1_0));
    end process;


    ap_block_state85_io_assign_proc : process(cmp119_i_i270_reg_2775, gmem3_ARREADY)
    begin
                ap_block_state85_io <= ((gmem3_ARREADY = ap_const_logic_0) and (cmp119_i_i270_reg_2775 = ap_const_lv1_0));
    end process;

        ap_block_state92_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state93_pp2_stage0_iter1_assign_proc : process(icmp_ln422_reg_3069, gmem3_RVALID)
    begin
                ap_block_state93_pp2_stage0_iter1 <= ((gmem3_RVALID = ap_const_logic_0) and (icmp_ln422_reg_3069 = ap_const_lv1_0));
    end process;

        ap_block_state94_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state65_assign_proc : process(icmp_ln332_1_fu_1419_p2)
    begin
        if ((icmp_ln332_1_fu_1419_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state65 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state73_assign_proc : process(icmp_ln387_fu_1576_p2)
    begin
        if ((icmp_ln387_fu_1576_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state73 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state73 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state92_assign_proc : process(icmp_ln422_fu_1766_p2)
    begin
        if ((icmp_ln422_fu_1766_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state92 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state92 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter1_state100_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            ap_condition_pp3_exit_iter1_state100 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter1_state100 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(ap_CS_fsm_pp3_stage0, icmp_ln433_fu_1782_p2, ap_block_pp3_stage0_subdone)
    begin
        if (((icmp_ln433_fu_1782_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state81, icmp_ln417_fu_1711_p2)
    begin
        if (((icmp_ln417_fu_1711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_381_assign_proc : process(trunc_ln353_reg_2863_pp0_iter1_reg)
    begin
                ap_enable_operation_381 <= (trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_7);
    end process;


    ap_enable_operation_384_assign_proc : process(trunc_ln353_reg_2863_pp0_iter1_reg)
    begin
                ap_enable_operation_384 <= (trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_4);
    end process;


    ap_enable_operation_387_assign_proc : process(trunc_ln353_reg_2863_pp0_iter1_reg)
    begin
                ap_enable_operation_387 <= (trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_1);
    end process;


    ap_enable_operation_388_assign_proc : process(trunc_ln353_reg_2863_pp0_iter1_reg)
    begin
                ap_enable_operation_388 <= (trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_0);
    end process;


    ap_enable_operation_389_assign_proc : process(ap_predicate_op389_store_state67)
    begin
                ap_enable_operation_389 <= (ap_predicate_op389_store_state67 = ap_const_boolean_1);
    end process;


    ap_enable_operation_393_assign_proc : process(ap_predicate_op393_store_state68)
    begin
                ap_enable_operation_393 <= (ap_predicate_op393_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_395_assign_proc : process(ap_predicate_op395_store_state68)
    begin
                ap_enable_operation_395 <= (ap_predicate_op395_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_397_assign_proc : process(ap_predicate_op397_store_state68)
    begin
                ap_enable_operation_397 <= (ap_predicate_op397_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_399_assign_proc : process(ap_predicate_op399_store_state68)
    begin
                ap_enable_operation_399 <= (ap_predicate_op399_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_401_assign_proc : process(ap_predicate_op401_store_state68)
    begin
                ap_enable_operation_401 <= (ap_predicate_op401_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_409_assign_proc : process(ap_predicate_op409_store_state68)
    begin
                ap_enable_operation_409 <= (ap_predicate_op409_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_411_assign_proc : process(ap_predicate_op411_store_state68)
    begin
                ap_enable_operation_411 <= (ap_predicate_op411_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_413_assign_proc : process(ap_predicate_op413_store_state68)
    begin
                ap_enable_operation_413 <= (ap_predicate_op413_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_415_assign_proc : process(ap_predicate_op415_store_state68)
    begin
                ap_enable_operation_415 <= (ap_predicate_op415_store_state68 = ap_const_boolean_1);
    end process;


    ap_enable_operation_417_assign_proc : process(ap_predicate_op417_store_state68)
    begin
                ap_enable_operation_417 <= (ap_predicate_op417_store_state68 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_enable_state67_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state67_pp0_iter2_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_enable_state68_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state68_pp0_iter3_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dep_V_2_phi_fu_800_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln387_reg_2946, dep_V_2_reg_796, ap_CS_fsm_pp1_stage0, rhs_reg_2955, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln387_reg_2946 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_dep_V_2_phi_fu_800_p4 <= rhs_reg_2955;
        else 
            ap_phi_mux_dep_V_2_phi_fu_800_p4 <= dep_V_2_reg_796;
        end if; 
    end process;


    ap_phi_mux_dep_V_phi_fu_745_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln332_1_reg_2838, dep_V_reg_741, dep_V_5_reg_2849)
    begin
        if (((icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_dep_V_phi_fu_745_p4 <= dep_V_5_reg_2849;
        else 
            ap_phi_mux_dep_V_phi_fu_745_p4 <= dep_V_reg_741;
        end if; 
    end process;


    ap_phi_mux_idx2_V_3_phi_fu_811_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln387_reg_2946, idx2_V_3_reg_807, ap_CS_fsm_pp1_stage0, idx2_V_6_reg_2950, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln387_reg_2946 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_idx2_V_3_phi_fu_811_p4 <= idx2_V_6_reg_2950;
        else 
            ap_phi_mux_idx2_V_3_phi_fu_811_p4 <= idx2_V_3_reg_807;
        end if; 
    end process;


    ap_phi_mux_idx2_V_phi_fu_756_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln332_1_reg_2838, idx2_V_reg_752, idx2_V_7_reg_2842)
    begin
        if (((icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_idx2_V_phi_fu_756_p4 <= idx2_V_7_reg_2842;
        else 
            ap_phi_mux_idx2_V_phi_fu_756_p4 <= idx2_V_reg_752;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_834_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln422_reg_3069, k_reg_830, add_ln422_reg_3064)
    begin
        if (((icmp_ln422_reg_3069 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_k_phi_fu_834_p4 <= add_ln422_reg_3064;
        else 
            ap_phi_mux_k_phi_fu_834_p4 <= k_reg_830;
        end if; 
    end process;


    ap_phi_mux_pixel_V_phi_fu_857_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln433_reg_3088, pixel_V_reg_853, pixel_V_2_reg_3097)
    begin
        if (((icmp_ln433_reg_3088 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_pixel_V_phi_fu_857_p4 <= pixel_V_2_reg_3097;
        else 
            ap_phi_mux_pixel_V_phi_fu_857_p4 <= pixel_V_reg_853;
        end if; 
    end process;


    ap_predicate_op389_store_state67_assign_proc : process(trunc_ln353_reg_2863_pp0_iter1_reg)
    begin
                ap_predicate_op389_store_state67 <= ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_A) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_B) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_C) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_D) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_E) or (trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_F))))));
    end process;


    ap_predicate_op393_store_state68_assign_proc : process(icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg)
    begin
                ap_predicate_op393_store_state68 <= ((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op395_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg)
    begin
                ap_predicate_op395_store_state68 <= ((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_6));
    end process;


    ap_predicate_op397_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg)
    begin
                ap_predicate_op397_store_state68 <= ((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_3));
    end process;


    ap_predicate_op399_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg)
    begin
                ap_predicate_op399_store_state68 <= ((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_0));
    end process;


    ap_predicate_op401_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg)
    begin
                ap_predicate_op401_store_state68 <= (not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op409_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg)
    begin
                ap_predicate_op409_store_state68 <= ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_6));
    end process;


    ap_predicate_op411_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg)
    begin
                ap_predicate_op411_store_state68 <= ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_3));
    end process;


    ap_predicate_op413_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg)
    begin
                ap_predicate_op413_store_state68 <= ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_0));
    end process;


    ap_predicate_op415_store_state68_assign_proc : process(trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg)
    begin
                ap_predicate_op415_store_state68 <= (not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op417_store_state68_assign_proc : process(icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg)
    begin
                ap_predicate_op417_store_state68 <= ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op669_writereq_state100_assign_proc : process(icmp_ln433_reg_3088, icmp_ln452_reg_3112)
    begin
                ap_predicate_op669_writereq_state100 <= ((icmp_ln452_reg_3112 = ap_const_lv1_1) and (icmp_ln433_reg_3088 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state81, icmp_ln417_fu_1711_p2)
    begin
        if (((icmp_ln417_fu_1711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bit_1_fu_1867_p3 <= 
        ap_const_lv32_0 when (icmp_ln870_3_reg_3092(0) = '1') else 
        bit_reg_875;
    bit_2_fu_2482_p2 <= std_logic_vector(unsigned(bit_1_fu_1867_p3) + unsigned(ap_const_lv32_10));
    bramsetsval_fu_1135_p2 <= std_logic_vector(unsigned(add_ln305_2_reg_2618) - unsigned(grp_fu_1123_p2));
    bramtotal_fu_1187_p2 <= std_logic_vector(unsigned(trunc_ln305_reg_2640) + unsigned(ap_const_lv4_2));
    cmp119_i_i270_fu_1298_p2 <= "1" when (ram_row_depth_reg_2582 = ap_const_lv6_0) else "0";
    cmp31_i_i4_fu_1247_p2 <= "1" when (inter_i_reg_697 = ap_const_lv2_0) else "0";
    cmp31_i_i_mid1_fu_1241_p2 <= "1" when (add_ln312_1_fu_1235_p2 = ap_const_lv2_0) else "0";
    conv_i_i_i_fu_1811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_V_2_fu_1803_p3),64));
    dep_V_1_fu_1460_p2 <= std_logic_vector(unsigned(ap_phi_mux_dep_V_phi_fu_745_p4) + unsigned(zext_ln303_2_reg_2685));
    dep_V_3_fu_1613_p2 <= std_logic_vector(unsigned(ap_phi_mux_dep_V_2_phi_fu_800_p4) + unsigned(zext_ln303_2_reg_2685));
    dep_V_5_fu_1473_p3 <= 
        dep_V_1_fu_1460_p2 when (icmp_ln870_1_fu_1455_p2(0) = '1') else 
        ap_phi_mux_dep_V_phi_fu_745_p4;
    div153_i_i_fu_1289_p4 <= npcCols_8_reg_2563(10 downto 3);
    empty_33_fu_908_p1 <= cols(5 - 1 downto 0);
    empty_34_fu_912_p1 <= cols(11 - 1 downto 0);
    empty_38_fu_1731_p2 <= std_logic_vector(unsigned(p_cast38_fu_1727_p1) + unsigned(img_inp_read_reg_2552));
    empty_fu_904_p1 <= cols(3 - 1 downto 0);

    gmem3_ARADDR_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state85, cmp119_i_i270_reg_2775, gmem3_ARREADY, sext_ln536_1_fu_1398_p1, sext_ln422_fu_1749_p1, ap_block_state85_io)
    begin
        if (((cmp119_i_i270_reg_2775 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state85_io) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            gmem3_ARADDR <= sext_ln422_fu_1749_p1;
        elsif (((gmem3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            gmem3_ARADDR <= sext_ln536_1_fu_1398_p1;
        else 
            gmem3_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_ARLEN_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state85, cmp119_i_i270_reg_2775, gmem3_ARREADY, zext_ln303_reg_2670, zext_ln315_fu_1394_p1, ap_block_state85_io)
    begin
        if (((cmp119_i_i270_reg_2775 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state85_io) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            gmem3_ARLEN <= zext_ln303_reg_2670;
        elsif (((gmem3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            gmem3_ARLEN <= zext_ln315_fu_1394_p1;
        else 
            gmem3_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_ARVALID_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state85, cmp119_i_i270_reg_2775, gmem3_ARREADY, ap_block_state85_io)
    begin
        if ((((cmp119_i_i270_reg_2775 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state85_io) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((gmem3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
            gmem3_ARVALID <= ap_const_logic_1;
        else 
            gmem3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_AWVALID_assign_proc : process(ap_CS_fsm_state72, gmem3_AWREADY)
    begin
        if (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            gmem3_AWVALID <= ap_const_logic_1;
        else 
            gmem3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_BREADY_assign_proc : process(ap_CS_fsm_state80, icmp_ln332_reg_2829, gmem3_BVALID)
    begin
        if ((not(((gmem3_BVALID = ap_const_logic_0) and (icmp_ln332_reg_2829 = ap_const_lv1_0))) and (icmp_ln332_reg_2829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem3_BREADY <= ap_const_logic_1;
        else 
            gmem3_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln332_1_reg_2838, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln422_reg_3069, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln422_reg_3069 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem3_RREADY <= ap_const_logic_1;
        else 
            gmem3_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln387_reg_2946_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln387_reg_2946_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            gmem3_WVALID <= ap_const_logic_1;
        else 
            gmem3_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_blk_n_AR_assign_proc : process(m_axi_gmem3_ARREADY, ap_CS_fsm_state58, ap_CS_fsm_state85, cmp119_i_i270_reg_2775)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or ((cmp119_i_i270_reg_2775 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            gmem3_blk_n_AR <= m_axi_gmem3_ARREADY;
        else 
            gmem3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_AW_assign_proc : process(m_axi_gmem3_AWREADY, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            gmem3_blk_n_AW <= m_axi_gmem3_AWREADY;
        else 
            gmem3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_B_assign_proc : process(m_axi_gmem3_BVALID, ap_CS_fsm_state80, icmp_ln332_reg_2829)
    begin
        if (((icmp_ln332_reg_2829 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem3_blk_n_B <= m_axi_gmem3_BVALID;
        else 
            gmem3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_R_assign_proc : process(m_axi_gmem3_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln332_1_reg_2838, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln422_reg_3069)
    begin
        if ((((icmp_ln422_reg_3069 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln332_1_reg_2838 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem3_blk_n_R <= m_axi_gmem3_RVALID;
        else 
            gmem3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_W_assign_proc : process(m_axi_gmem3_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln387_reg_2946_pp1_iter1_reg)
    begin
        if (((icmp_ln387_reg_2946_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gmem3_blk_n_W <= m_axi_gmem3_WREADY;
        else 
            gmem3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    gmem4_AWVALID_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_predicate_op669_writereq_state100, ap_block_pp3_stage0_11001)
    begin
        if (((ap_predicate_op669_writereq_state100 = ap_const_boolean_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            gmem4_AWVALID <= ap_const_logic_1;
        else 
            gmem4_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem4_BREADY_assign_proc : process(ap_enable_reg_pp3_iter7, icmp_ln452_reg_3112_pp3_iter6_reg, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln452_reg_3112_pp3_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            gmem4_BREADY <= ap_const_logic_1;
        else 
            gmem4_BREADY <= ap_const_logic_0;
        end if; 
    end process;

        gmem4_WDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_2488_p9),64));


    gmem4_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, icmp_ln452_reg_3112_pp3_iter1_reg, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln452_reg_3112_pp3_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            gmem4_WVALID <= ap_const_logic_1;
        else 
            gmem4_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem4_blk_n_AW_assign_proc : process(m_axi_gmem4_AWREADY, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln433_reg_3088, icmp_ln452_reg_3112)
    begin
        if (((icmp_ln452_reg_3112 = ap_const_lv1_1) and (icmp_ln433_reg_3088 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            gmem4_blk_n_AW <= m_axi_gmem4_AWREADY;
        else 
            gmem4_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem4_blk_n_B_assign_proc : process(m_axi_gmem4_BVALID, ap_block_pp3_stage0, ap_enable_reg_pp3_iter7, icmp_ln452_reg_3112_pp3_iter6_reg)
    begin
        if (((icmp_ln452_reg_3112_pp3_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            gmem4_blk_n_B <= m_axi_gmem4_BVALID;
        else 
            gmem4_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem4_blk_n_W_assign_proc : process(m_axi_gmem4_WREADY, ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, icmp_ln452_reg_3112_pp3_iter1_reg)
    begin
        if (((icmp_ln452_reg_3112_pp3_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            gmem4_blk_n_W <= m_axi_gmem4_WREADY;
        else 
            gmem4_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_TopDown_11_3_1024_s_fu_886_ap_start <= grp_TopDown_11_3_1024_s_fu_886_ap_start_reg;

    grp_fu_1082_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_1082_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1082_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1082_p1 <= grp_fu_1082_p10(6 - 1 downto 0);
    grp_fu_1082_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_fu_1068_p4),11));

    grp_fu_1107_ap_start_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_1107_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1107_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1107_p0 <= std_logic_vector(unsigned(add_ln305_fu_1095_p2) + unsigned(zext_ln302_3_fu_1088_p1));
    grp_fu_1107_p1 <= zext_ln304_fu_1091_p1(11 - 1 downto 0);

    grp_fu_1123_ap_start_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_1123_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1123_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1123_p0 <= std_logic_vector(unsigned(zext_ln305_fu_1113_p1) + unsigned(ap_const_lv13_2));
    grp_fu_1123_p1 <= ap_const_lv13_3(3 - 1 downto 0);
    grp_fu_2505_p0 <= grp_fu_2505_p00(13 - 1 downto 0);
    grp_fu_2505_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bramsetsval_fu_1135_p2),24));
    grp_fu_2505_p1 <= grp_fu_2505_p10(11 - 1 downto 0);
    grp_fu_2505_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bdrows_reg_2601),24));
    grp_fu_2513_p1 <= grp_fu_2513_p10(6 - 1 downto 0);
    grp_fu_2513_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_reg_2582),18));
    grp_fu_2519_p0 <= grp_fu_2519_p00(23 - 1 downto 0);
    grp_fu_2519_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln319_fu_1279_p3),29));
    grp_fu_2519_p1 <= zext_ln303_5_reg_2680(6 - 1 downto 0);
    grp_fu_2524_p0 <= grp_fu_2524_p00(2 - 1 downto 0);
    grp_fu_2524_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln324_fu_1319_p2),10));
    grp_fu_2524_p1 <= zext_ln302_1_reg_2655(8 - 1 downto 0);
    grp_fu_2531_p1 <= zext_ln303_4_reg_2675(6 - 1 downto 0);
    grp_fu_2537_p0 <= grp_fu_2537_p00(10 - 1 downto 0);
    grp_fu_2537_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_818),15));
    grp_fu_2537_p1 <= ram_row_depth_cast25_reg_2789(6 - 1 downto 0);
    grp_fu_2543_p0 <= zext_ln414_1_reg_3053(10 - 1 downto 0);
    grp_fu_2543_p1 <= zext_ln414_reg_2779(8 - 1 downto 0);

    iBuff_V_0_address0_assign_proc : process(ap_block_pp0_stage0, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, iBuff_V_0_addr_reg_2908, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff_address0, ap_CS_fsm_state71, zext_ln534_2_fu_1541_p1)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_0_address0 <= iBuff_V_0_addr_reg_2908;
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_0_address0 <= zext_ln534_2_fu_1541_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_0_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff_address0;
        else 
            iBuff_V_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_0_address1_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff_address1, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_0_address1 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_0_address1 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_0_address1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff_address1;
        else 
            iBuff_V_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff_ce0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_0_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff_ce0;
        else 
            iBuff_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff_ce1, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_0_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_0_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff_ce1;
        else 
            iBuff_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_0_d0_assign_proc : process(ap_block_pp0_stage0, iReg_V_reg_2872_pp0_iter2_reg, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff_d0, ap_CS_fsm_state71)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_0_d0 <= ap_const_lv64_0;
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_0_d0 <= iReg_V_reg_2872_pp0_iter2_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_0_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff_d0;
        else 
            iBuff_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff_we0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_0_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff_we0;
        else 
            iBuff_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_0_we1 <= ap_const_logic_1;
        else 
            iBuff_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_10_address0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, iBuff_V_10_addr_reg_2928, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff10_address0, ap_CS_fsm_state71, zext_ln534_3_fu_1550_p1)
    begin
        if ((not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_10_address0 <= zext_ln534_3_fu_1550_p1(10 - 1 downto 0);
        elsif ((not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_10_address0 <= iBuff_V_10_addr_reg_2928;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_10_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff10_address0;
        else 
            iBuff_V_10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_10_address1_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff10_address1, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_10_address1 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_10_address1 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_10_address1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff10_address1;
        else 
            iBuff_V_10_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_10_ce0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce0, ap_CS_fsm_state71)
    begin
        if (((not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_10_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce0;
        else 
            iBuff_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_10_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce1, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_10_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_10_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff10_ce1;
        else 
            iBuff_V_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_10_d0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, iReg_V_reg_2872_pp0_iter2_reg, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff10_d0, ap_CS_fsm_state71)
    begin
        if ((not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_10_d0 <= iReg_V_reg_2872_pp0_iter2_reg;
        elsif ((not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_10_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_10_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff10_d0;
        else 
            iBuff_V_10_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_10_we0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff10_we0, ap_CS_fsm_state71)
    begin
        if (((not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not((trunc_ln305_reg_2640 = ap_const_lv4_0)) and not((trunc_ln305_reg_2640 = ap_const_lv4_3)) and not((trunc_ln305_reg_2640 = ap_const_lv4_6)) and (icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_10_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_10_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff10_we0;
        else 
            iBuff_V_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_10_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_A) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_B) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_C) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_D) or ((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_E) or (trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_F)))))))) then 
            iBuff_V_10_we1 <= ap_const_logic_1;
        else 
            iBuff_V_10_we1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_1_address0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, iBuff_V_1_addr_reg_2913, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff1_address0, ap_CS_fsm_state71, zext_ln534_3_fu_1550_p1)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_1_address0 <= zext_ln534_3_fu_1550_p1(10 - 1 downto 0);
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_1_address0 <= iBuff_V_1_addr_reg_2913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_1_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff1_address0;
        else 
            iBuff_V_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_1_address1_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff1_address1, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_1_address1 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_1_address1 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_1_address1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff1_address1;
        else 
            iBuff_V_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_1_ce0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_1_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce0;
        else 
            iBuff_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce1, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_1_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_1_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff1_ce1;
        else 
            iBuff_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_1_d0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, iReg_V_reg_2872_pp0_iter2_reg, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff1_d0, ap_CS_fsm_state71)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_1_d0 <= iReg_V_reg_2872_pp0_iter2_reg;
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_1_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_1_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff1_d0;
        else 
            iBuff_V_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_1_we0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff1_we0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_1_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff1_we0;
        else 
            iBuff_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_1_we1 <= ap_const_logic_1;
        else 
            iBuff_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_2_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff2_address0, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_2_address0 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_2_address0 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_2_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff2_address0;
        else 
            iBuff_V_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_2_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce0;
        else 
            iBuff_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_2_ce1_assign_proc : process(grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_2_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff2_ce1;
        else 
            iBuff_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_2_d0_assign_proc : process(ap_block_pp0_stage0, iReg_V_reg_2872, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff2_d0, ap_CS_fsm_state71)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_2_d0 <= iReg_V_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_2_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff2_d0;
        else 
            iBuff_V_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff2_we0, ap_CS_fsm_state71)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_2_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff2_we0;
        else 
            iBuff_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_3_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff3_address0, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_3_address0 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_3_address0 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_3_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff3_address0;
        else 
            iBuff_V_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_3_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce0;
        else 
            iBuff_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_3_ce1_assign_proc : process(grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_3_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff3_ce1;
        else 
            iBuff_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_3_d0_assign_proc : process(ap_block_pp0_stage0, iReg_V_reg_2872, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff3_d0, ap_CS_fsm_state71)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_3_d0 <= iReg_V_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_3_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff3_d0;
        else 
            iBuff_V_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff3_we0, ap_CS_fsm_state71)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_3_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_3_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff3_we0;
        else 
            iBuff_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_4_address0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, iBuff_V_4_addr_reg_2918, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff4_address0, ap_CS_fsm_state71, zext_ln534_3_fu_1550_p1)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_4_address0 <= zext_ln534_3_fu_1550_p1(10 - 1 downto 0);
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_4_address0 <= iBuff_V_4_addr_reg_2918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_4_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff4_address0;
        else 
            iBuff_V_4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_4_address1_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff4_address1, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_4_address1 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_4_address1 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_4_address1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff4_address1;
        else 
            iBuff_V_4_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_4_ce0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_4_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce0;
        else 
            iBuff_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_4_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce1, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_4_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_4_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff4_ce1;
        else 
            iBuff_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_4_d0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, iReg_V_reg_2872_pp0_iter2_reg, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff4_d0, ap_CS_fsm_state71)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_4_d0 <= iReg_V_reg_2872_pp0_iter2_reg;
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_4_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_4_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff4_d0;
        else 
            iBuff_V_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_4_we0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff4_we0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_4_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_4_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff4_we0;
        else 
            iBuff_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_4_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_4_we1 <= ap_const_logic_1;
        else 
            iBuff_V_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_5_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff5_address0, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_5_address0 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_5_address0 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_5_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff5_address0;
        else 
            iBuff_V_5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_5_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce0;
        else 
            iBuff_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_5_ce1_assign_proc : process(grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_5_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff5_ce1;
        else 
            iBuff_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_5_d0_assign_proc : process(ap_block_pp0_stage0, iReg_V_reg_2872, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff5_d0, ap_CS_fsm_state71)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_5_d0 <= iReg_V_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_5_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff5_d0;
        else 
            iBuff_V_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff5_we0, ap_CS_fsm_state71)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_5_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_5_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff5_we0;
        else 
            iBuff_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_6_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff6_address0, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_6_address0 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_6_address0 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_6_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff6_address0;
        else 
            iBuff_V_6_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_6_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce0;
        else 
            iBuff_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_6_ce1_assign_proc : process(grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_6_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff6_ce1;
        else 
            iBuff_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_6_d0_assign_proc : process(ap_block_pp0_stage0, iReg_V_reg_2872, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff6_d0, ap_CS_fsm_state71)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_6_d0 <= iReg_V_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_6_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff6_d0;
        else 
            iBuff_V_6_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff6_we0, ap_CS_fsm_state71)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_6_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_6_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff6_we0;
        else 
            iBuff_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_7_address0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, iBuff_V_7_addr_reg_2923, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff7_address0, ap_CS_fsm_state71, zext_ln534_3_fu_1550_p1)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_7_address0 <= zext_ln534_3_fu_1550_p1(10 - 1 downto 0);
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_7_address0 <= iBuff_V_7_addr_reg_2923;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_7_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff7_address0;
        else 
            iBuff_V_7_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_7_address1_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff7_address1, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_7_address1 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_7_address1 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_7_address1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff7_address1;
        else 
            iBuff_V_7_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_7_ce0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_7_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce0;
        else 
            iBuff_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_7_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce1, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_7_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_7_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff7_ce1;
        else 
            iBuff_V_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_7_d0_assign_proc : process(ap_block_pp0_stage0, trunc_ln305_reg_2640, iReg_V_reg_2872_pp0_iter2_reg, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff7_d0, ap_CS_fsm_state71)
    begin
        if (((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_7_d0 <= iReg_V_reg_2872_pp0_iter2_reg;
        elsif (((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iBuff_V_7_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_7_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff7_d0;
        else 
            iBuff_V_7_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_7_we0_assign_proc : process(trunc_ln305_reg_2640, ap_block_pp0_stage0_11001, icmp_ln870_2_reg_2892_pp0_iter2_reg, icmp_ln870_5_reg_2896_pp0_iter2_reg, icmp_ln870_6_reg_2900_pp0_iter2_reg, icmp_ln870_4_reg_2904_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_TopDown_11_3_1024_s_fu_886_iBuff7_we0, ap_CS_fsm_state71)
    begin
        if ((((icmp_ln870_6_reg_2900_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_5_reg_2896_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_0) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln870_4_reg_2904_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln870_2_reg_2892_pp0_iter2_reg = ap_const_lv1_1) and (trunc_ln305_reg_2640 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            iBuff_V_7_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_7_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff7_we0;
        else 
            iBuff_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_7_we1_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_7_we1 <= ap_const_logic_1;
        else 
            iBuff_V_7_we1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_8_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff8_address0, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_8_address0 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_8_address0 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_8_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff8_address0;
        else 
            iBuff_V_8_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_8_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_8_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce0;
        else 
            iBuff_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_8_ce1_assign_proc : process(grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_8_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff8_ce1;
        else 
            iBuff_V_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_8_d0_assign_proc : process(ap_block_pp0_stage0, iReg_V_reg_2872, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff8_d0, ap_CS_fsm_state71)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_8_d0 <= iReg_V_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_8_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff8_d0;
        else 
            iBuff_V_8_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff8_we0, ap_CS_fsm_state71)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_8_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_8_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff8_we0;
        else 
            iBuff_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_9_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff9_address0, ap_CS_fsm_state71, zext_ln534_fu_1523_p1, zext_ln534_1_fu_1648_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            iBuff_V_9_address0 <= zext_ln534_1_fu_1648_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_9_address0 <= zext_ln534_fu_1523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_9_address0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff9_address0;
        else 
            iBuff_V_9_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_9_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce0, ap_CS_fsm_state71)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            iBuff_V_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_9_ce0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce0;
        else 
            iBuff_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_9_ce1_assign_proc : process(grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_9_ce1 <= grp_TopDown_11_3_1024_s_fu_886_iBuff9_ce1;
        else 
            iBuff_V_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    iBuff_V_9_d0_assign_proc : process(ap_block_pp0_stage0, iReg_V_reg_2872, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff9_d0, ap_CS_fsm_state71)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_9_d0 <= iReg_V_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_9_d0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff9_d0;
        else 
            iBuff_V_9_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    iBuff_V_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln353_reg_2863_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_TopDown_11_3_1024_s_fu_886_iBuff9_we0, ap_CS_fsm_state71)
    begin
        if (((trunc_ln353_reg_2863_pp0_iter1_reg = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iBuff_V_9_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            iBuff_V_9_we0 <= grp_TopDown_11_3_1024_s_fu_886_iBuff9_we0;
        else 
            iBuff_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_1570_p2 <= std_logic_vector(unsigned(i_1_reg_774) + unsigned(ap_const_lv29_1));
    i_3_fu_1413_p2 <= std_logic_vector(unsigned(i_reg_719) + unsigned(ap_const_lv29_1));
    icmp_ln26_fu_978_p2 <= "0" when (empty_33_fu_908_p1 = ap_const_lv5_0) else "1";
    icmp_ln312_fu_1215_p2 <= "1" when (indvar_flatten_reg_686 = ap_const_lv4_8) else "0";
    icmp_ln318_fu_1221_p2 <= "1" when (slice_reg_708 = ap_const_lv3_4) else "0";
    icmp_ln319_fu_1273_p2 <= "1" when (select_ln312_fu_1227_p3 = ap_const_lv3_3) else "0";
    icmp_ln332_1_fu_1419_p2 <= "1" when (i_reg_719 = lBound_reg_2799) else "0";
    icmp_ln332_fu_1408_p2 <= "1" when (lBound_reg_2799 = ap_const_lv29_0) else "0";
    icmp_ln33_fu_1040_p2 <= "0" when (empty_fu_904_p1 = ap_const_lv3_0) else "1";
    icmp_ln377_fu_1564_p2 <= "1" when (intra_i_reg_763 = ap_const_lv4_8) else "0";
    icmp_ln387_fu_1576_p2 <= "1" when (i_1_reg_774 = lBound_reg_2799) else "0";
    icmp_ln417_fu_1711_p2 <= "1" when (ii_reg_818 = trunc_ln302_reg_2568) else "0";
    icmp_ln422_fu_1766_p2 <= "1" when (ap_phi_mux_k_phi_fu_834_p4 = ram_row_depth_reg_2582) else "0";
    icmp_ln433_fu_1782_p2 <= "1" when (j_reg_842 = trunc_ln417_2_reg_2784) else "0";
    icmp_ln452_fu_1830_p2 <= "1" when (unsigned(j_reg_842) < unsigned(div153_i_i_reg_2770)) else "0";
    icmp_ln674_1_fu_2000_p2 <= "1" when (unsigned(add_ln444_2_fu_1988_p2) > unsigned(add_ln444_8_fu_1994_p2)) else "0";
    icmp_ln674_2_fu_2082_p2 <= "1" when (unsigned(add_ln444_3_fu_2070_p2) > unsigned(add_ln444_9_fu_2076_p2)) else "0";
    icmp_ln674_3_fu_2164_p2 <= "1" when (unsigned(add_ln444_4_fu_2152_p2) > unsigned(add_ln444_10_fu_2158_p2)) else "0";
    icmp_ln674_4_fu_2246_p2 <= "1" when (unsigned(add_ln444_5_fu_2234_p2) > unsigned(add_ln444_11_fu_2240_p2)) else "0";
    icmp_ln674_5_fu_2328_p2 <= "1" when (unsigned(add_ln444_6_fu_2316_p2) > unsigned(add_ln444_12_fu_2322_p2)) else "0";
    icmp_ln674_6_fu_2410_p2 <= "1" when (unsigned(add_ln444_7_fu_2398_p2) > unsigned(add_ln444_13_fu_2404_p2)) else "0";
    icmp_ln674_fu_1918_p2 <= "1" when (unsigned(add_ln444_fu_1906_p2) > unsigned(add_ln444_1_fu_1912_p2)) else "0";
    icmp_ln870_10_fu_1974_p2 <= "1" when (trunc_ln358_fu_1970_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_11_fu_2056_p2 <= "1" when (trunc_ln358_1_fu_2052_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_12_fu_2138_p2 <= "1" when (trunc_ln358_2_fu_2134_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_13_fu_2220_p2 <= "1" when (trunc_ln358_3_fu_2216_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_14_fu_2302_p2 <= "1" when (trunc_ln358_4_fu_2298_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_15_fu_2384_p2 <= "1" when (trunc_ln358_5_fu_2380_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_16_fu_2466_p2 <= "1" when (trunc_ln358_6_fu_2462_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_1_fu_1455_p2 <= "1" when (idx2_V_2_fu_1435_p3 = op2_assign_1_cast_cast_reg_2708) else "0";
    icmp_ln870_2_fu_1501_p2 <= "1" when (idx2_V_7_reg_2842 = ap_const_lv16_1) else "0";
    icmp_ln870_3_fu_1791_p2 <= "1" when (id_V_reg_864 = ap_const_lv3_4) else "0";
    icmp_ln870_4_fu_1518_p2 <= "1" when (dep_V_5_reg_2849 = ap_const_lv16_0) else "0";
    icmp_ln870_5_fu_1506_p2 <= "1" when (idx2_V_7_reg_2842 = zext_ln305_1_reg_2693) else "0";
    icmp_ln870_6_fu_1513_p2 <= "1" when (zext_ln870_fu_1510_p1 = op2_assign_reg_2720) else "0";
    icmp_ln870_7_fu_1892_p2 <= "1" when (trunc_ln674_1_fu_1888_p1 = ap_const_lv2_3) else "0";
    icmp_ln870_8_fu_1581_p2 <= "1" when (idx1_V_2_reg_785 = zext_ln303_2_reg_2685) else "0";
    icmp_ln870_9_fu_1608_p2 <= "1" when (idx2_V_5_fu_1592_p3 = op2_assign_1_cast_cast_reg_2708) else "0";
    icmp_ln870_fu_1424_p2 <= "1" when (idx1_V_reg_730 = zext_ln303_2_reg_2685) else "0";
    id_V_1_fu_1822_p3 <= 
        ap_const_lv3_1 when (icmp_ln870_3_fu_1791_p2(0) = '1') else 
        add_ln691_fu_1816_p2;
    idx1_V_1_fu_1443_p3 <= 
        ap_const_lv16_0 when (icmp_ln870_fu_1424_p2(0) = '1') else 
        idx1_V_reg_730;
    idx1_V_4_fu_1667_p2 <= std_logic_vector(unsigned(idx1_V_6_fu_1600_p3) + unsigned(ap_const_lv16_1));
    idx1_V_5_fu_1495_p2 <= std_logic_vector(unsigned(idx1_V_1_fu_1443_p3) + unsigned(ap_const_lv16_1));
    idx1_V_6_fu_1600_p3 <= 
        ap_const_lv16_0 when (icmp_ln870_8_fu_1581_p2(0) = '1') else 
        idx1_V_2_reg_785;
    idx2_V_1_fu_1429_p2 <= std_logic_vector(unsigned(ap_phi_mux_idx2_V_phi_fu_756_p4) + unsigned(ap_const_lv16_1));
    idx2_V_2_fu_1435_p3 <= 
        idx2_V_1_fu_1429_p2 when (icmp_ln870_fu_1424_p2(0) = '1') else 
        ap_phi_mux_idx2_V_phi_fu_756_p4;
    idx2_V_4_fu_1586_p2 <= std_logic_vector(unsigned(ap_phi_mux_idx2_V_3_phi_fu_811_p4) + unsigned(ap_const_lv16_1));
    idx2_V_5_fu_1592_p3 <= 
        idx2_V_4_fu_1586_p2 when (icmp_ln870_8_fu_1581_p2(0) = '1') else 
        ap_phi_mux_idx2_V_3_phi_fu_811_p4;
    idx2_V_6_fu_1618_p3 <= 
        ap_const_lv16_1 when (icmp_ln870_9_fu_1608_p2(0) = '1') else 
        idx2_V_5_fu_1592_p3;
    idx2_V_7_fu_1465_p3 <= 
        ap_const_lv16_1 when (icmp_ln870_1_fu_1455_p2(0) = '1') else 
        idx2_V_2_fu_1435_p3;
    index_fu_1485_p2 <= std_logic_vector(unsigned(trunc_ln208_fu_1481_p1) + unsigned(trunc_ln327_fu_1451_p1));
    intra_i_1_fu_1558_p2 <= std_logic_vector(unsigned(intra_i_reg_763) + unsigned(ap_const_lv4_1));
    lshr_ln674_1_fu_1964_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_fu_1944_p3),to_integer(unsigned('0' & zext_ln674_1_fu_1960_p1(31-1 downto 0)))));
    lshr_ln674_2_fu_2046_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_2_fu_2026_p3),to_integer(unsigned('0' & zext_ln674_2_fu_2042_p1(31-1 downto 0)))));
    lshr_ln674_3_fu_2128_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_4_fu_2108_p3),to_integer(unsigned('0' & zext_ln674_3_fu_2124_p1(31-1 downto 0)))));
    lshr_ln674_4_fu_2210_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_6_fu_2190_p3),to_integer(unsigned('0' & zext_ln674_4_fu_2206_p1(31-1 downto 0)))));
    lshr_ln674_5_fu_2292_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_8_fu_2272_p3),to_integer(unsigned('0' & zext_ln674_5_fu_2288_p1(31-1 downto 0)))));
    lshr_ln674_6_fu_2374_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_10_fu_2354_p3),to_integer(unsigned('0' & zext_ln674_6_fu_2370_p1(31-1 downto 0)))));
    lshr_ln674_7_fu_2456_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_12_fu_2436_p3),to_integer(unsigned('0' & zext_ln674_7_fu_2452_p1(31-1 downto 0)))));
    lshr_ln674_fu_1882_p2 <= std_logic_vector(shift_right(unsigned(oBuff_V_q0),to_integer(unsigned('0' & zext_ln674_fu_1878_p1(31-1 downto 0)))));
    mul_ln322_fu_1331_p0 <= zext_ln302_reg_2660(8 - 1 downto 0);
    mul_ln322_fu_1331_p1 <= mul_ln322_fu_1331_p10(3 - 1 downto 0);
    mul_ln322_fu_1331_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln312_reg_2738),11));
    npcColsNxt_8_fu_1034_p2 <= std_logic_vector(unsigned(shl_ln1_fu_1026_p3) + unsigned(ap_const_lv11_8));
    npcColsNxt_fu_972_p2 <= std_logic_vector(unsigned(shl_ln_fu_964_p3) + unsigned(ap_const_lv11_20));
    npcCols_8_fu_1046_p3 <= 
        npcColsNxt_8_fu_1034_p2 when (icmp_ln33_fu_1040_p2(0) = '1') else 
        empty_34_fu_912_p1;
    npcCols_fu_984_p3 <= 
        npcColsNxt_fu_972_p2 when (icmp_ln26_fu_978_p2(0) = '1') else 
        empty_34_fu_912_p1;

    oBuff_V_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter2, zext_ln422_fu_1771_p1, conv_i_i_i_fu_1811_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            oBuff_V_address0 <= conv_i_i_i_fu_1811_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            oBuff_V_address0 <= zext_ln422_fu_1771_p1(6 - 1 downto 0);
        else 
            oBuff_V_address0 <= "XXXXXX";
        end if; 
    end process;


    oBuff_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            oBuff_V_ce0 <= ap_const_logic_1;
        else 
            oBuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    oBuff_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln422_reg_3069_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((icmp_ln422_reg_3069_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            oBuff_V_we0 <= ap_const_logic_1;
        else 
            oBuff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    offset_fu_1360_p3 <= 
        ap_const_lv30_0 when (and_ln319_fu_1355_p2(0) = '1') else 
        grp_fu_2531_p2;
    op2_assign_1_cast_cast_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_1_cast_fu_1192_p2),16));
    op2_assign_1_cast_fu_1192_p2 <= std_logic_vector(unsigned(bramsetsval_reg_2634) + unsigned(ap_const_lv13_1));
    p_cast38_fu_1727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1720_p3),64));
    pixel_V_1_fu_1797_p2 <= std_logic_vector(unsigned(ap_phi_mux_pixel_V_phi_fu_857_p4) + unsigned(ap_const_lv9_1));
    pixel_V_2_fu_1803_p3 <= 
        pixel_V_1_fu_1797_p2 when (icmp_ln870_3_fu_1791_p2(0) = '1') else 
        ap_phi_mux_pixel_V_phi_fu_857_p4;
    ram_row_depth_cast25_fu_1316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_reg_2582),15));
    ram_row_depth_cast35_cast_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_reg_2582),10));
    ram_row_depth_fu_1068_p4 <= npcCols_fu_984_p3(10 downto 5);
    ret_1_fu_1642_p2 <= std_logic_vector(unsigned(trunc_ln1346_1_fu_1638_p1) + unsigned(trunc_ln1346_fu_1634_p1));
    ret_2_fu_1537_p2 <= std_logic_vector(unsigned(ram_row_depth_cast35_cast_reg_2714) + unsigned(index_reg_2856_pp0_iter2_reg));
    ret_fu_1546_p2 <= std_logic_vector(unsigned(index_reg_2856_pp0_iter2_reg) - unsigned(ram_row_depth_cast35_cast_reg_2714));
    rhs_fu_1626_p3 <= 
        dep_V_3_fu_1613_p2 when (icmp_ln870_9_fu_1608_p2(0) = '1') else 
        ap_phi_mux_dep_V_2_phi_fu_800_p4;
    sel_tmp_v_fu_1340_p3 <= 
        zext_ln324_fu_1336_p1 when (select_ln312_1_reg_2744(0) = '1') else 
        grp_fu_2524_p3;
    select_ln24_fu_956_p3 <= 
        sub_ln24_1_fu_940_p2 when (tmp_4_fu_916_p3(0) = '1') else 
        tmp_fu_946_p4;
    select_ln312_1_fu_1253_p3 <= 
        cmp31_i_i_mid1_fu_1241_p2 when (icmp_ln318_fu_1221_p2(0) = '1') else 
        cmp31_i_i4_fu_1247_p2;
    select_ln312_2_fu_1261_p3 <= 
        add_ln312_1_fu_1235_p2 when (icmp_ln318_fu_1221_p2(0) = '1') else 
        inter_i_reg_697;
    select_ln312_fu_1227_p3 <= 
        ap_const_lv3_0 when (icmp_ln318_fu_1221_p2(0) = '1') else 
        slice_reg_708;
    select_ln319_fu_1279_p3 <= 
        zext_ln302_2_reg_2665 when (icmp_ln319_fu_1273_p2(0) = '1') else 
        trunc_ln307_reg_2698;
    select_ln31_fu_1018_p3 <= 
        sub_ln31_fu_1002_p2 when (tmp_4_fu_916_p3(0) = '1') else 
        tmp_1_fu_1008_p4;
    select_ln674_10_fu_2354_p3 <= 
        tmp_11_fu_2338_p4 when (icmp_ln674_5_fu_2328_p2(0) = '1') else 
        oBuff_V_q0;
    select_ln674_11_fu_2362_p3 <= 
        sub_ln674_5_fu_2348_p2 when (icmp_ln674_5_fu_2328_p2(0) = '1') else 
        trunc_ln674_7_fu_2334_p1;
    select_ln674_12_fu_2436_p3 <= 
        tmp_12_fu_2420_p4 when (icmp_ln674_6_fu_2410_p2(0) = '1') else 
        oBuff_V_q0;
    select_ln674_13_fu_2444_p3 <= 
        sub_ln674_6_fu_2430_p2 when (icmp_ln674_6_fu_2410_p2(0) = '1') else 
        trunc_ln674_8_fu_2416_p1;
    select_ln674_1_fu_1952_p3 <= 
        sub_ln674_fu_1938_p2 when (icmp_ln674_fu_1918_p2(0) = '1') else 
        trunc_ln674_2_fu_1924_p1;
    select_ln674_2_fu_2026_p3 <= 
        tmp_7_fu_2010_p4 when (icmp_ln674_1_fu_2000_p2(0) = '1') else 
        oBuff_V_q0;
    select_ln674_3_fu_2034_p3 <= 
        sub_ln674_1_fu_2020_p2 when (icmp_ln674_1_fu_2000_p2(0) = '1') else 
        trunc_ln674_3_fu_2006_p1;
    select_ln674_4_fu_2108_p3 <= 
        tmp_8_fu_2092_p4 when (icmp_ln674_2_fu_2082_p2(0) = '1') else 
        oBuff_V_q0;
    select_ln674_5_fu_2116_p3 <= 
        sub_ln674_2_fu_2102_p2 when (icmp_ln674_2_fu_2082_p2(0) = '1') else 
        trunc_ln674_4_fu_2088_p1;
    select_ln674_6_fu_2190_p3 <= 
        tmp_9_fu_2174_p4 when (icmp_ln674_3_fu_2164_p2(0) = '1') else 
        oBuff_V_q0;
    select_ln674_7_fu_2198_p3 <= 
        sub_ln674_3_fu_2184_p2 when (icmp_ln674_3_fu_2164_p2(0) = '1') else 
        trunc_ln674_5_fu_2170_p1;
    select_ln674_8_fu_2272_p3 <= 
        tmp_10_fu_2256_p4 when (icmp_ln674_4_fu_2246_p2(0) = '1') else 
        oBuff_V_q0;
    select_ln674_9_fu_2280_p3 <= 
        sub_ln674_4_fu_2266_p2 when (icmp_ln674_4_fu_2246_p2(0) = '1') else 
        trunc_ln674_6_fu_2252_p1;
    select_ln674_fu_1944_p3 <= 
        tmp_6_fu_1928_p4 when (icmp_ln674_fu_1918_p2(0) = '1') else 
        oBuff_V_q0;
    select_ln870_1_fu_1980_p3 <= 
        ap_const_lv8_FF when (icmp_ln870_10_fu_1974_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln870_2_fu_2062_p3 <= 
        ap_const_lv8_FF when (icmp_ln870_11_fu_2056_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln870_3_fu_2144_p3 <= 
        ap_const_lv8_FF when (icmp_ln870_12_fu_2138_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln870_4_fu_2226_p3 <= 
        ap_const_lv8_FF when (icmp_ln870_13_fu_2220_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln870_5_fu_2308_p3 <= 
        ap_const_lv8_FF when (icmp_ln870_14_fu_2302_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln870_6_fu_2390_p3 <= 
        ap_const_lv8_FF when (icmp_ln870_15_fu_2384_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln870_fu_1898_p3 <= 
        ap_const_lv8_FF when (icmp_ln870_7_fu_1892_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln422_fu_1749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1740_p4),64));

        sext_ln536_1_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln536_1_reg_2812),64));

        sext_ln536_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_1367_p3),64));

        sext_ln548_fu_2472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_3116),64));

    shl_ln1_fu_1026_p3 <= (select_ln31_fu_1018_p3 & ap_const_lv3_0);
    shl_ln3_fu_1840_p3 <= (add_ln452_fu_1835_p2 & ap_const_lv3_0);
    shl_ln_fu_964_p3 <= (select_ln24_fu_956_p3 & ap_const_lv5_0);
    slice_1_fu_1700_p2 <= std_logic_vector(unsigned(select_ln312_reg_2738) + unsigned(ap_const_lv3_1));
    sub66_i_i_fu_1148_p2 <= std_logic_vector(unsigned(zext_ln304_reg_2607) + unsigned(ap_const_lv12_FFF));
    sub_ln24_1_fu_940_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(trunc_ln24_1_fu_930_p4));
    sub_ln24_fu_924_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(empty_34_fu_912_p1));
    sub_ln31_fu_1002_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln1_fu_992_p4));
    sub_ln324_fu_1204_p2 <= std_logic_vector(unsigned(zext_ln302_4_fu_1166_p1) - unsigned(grp_fu_2505_p2));
    sub_ln674_1_fu_2020_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_3_fu_2006_p1));
    sub_ln674_2_fu_2102_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_4_fu_2088_p1));
    sub_ln674_3_fu_2184_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_5_fu_2170_p1));
    sub_ln674_4_fu_2266_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_6_fu_2252_p1));
    sub_ln674_5_fu_2348_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_7_fu_2334_p1));
    sub_ln674_6_fu_2430_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_8_fu_2416_p1));
    sub_ln674_fu_1938_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_2_fu_1924_p1));
    
    tmp_10_fu_2256_p4_proc : process(oBuff_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_10_fu_2256_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := oBuff_V_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_10_fu_2256_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_10_fu_2256_p4_i) := oBuff_V_q0(64-1-tmp_10_fu_2256_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_2256_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_11_fu_2338_p4_proc : process(oBuff_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_11_fu_2338_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := oBuff_V_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_11_fu_2338_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_11_fu_2338_p4_i) := oBuff_V_q0(64-1-tmp_11_fu_2338_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_2338_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_12_fu_2420_p4_proc : process(oBuff_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_12_fu_2420_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := oBuff_V_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_12_fu_2420_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_12_fu_2420_p4_i) := oBuff_V_q0(64-1-tmp_12_fu_2420_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_2420_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_1_fu_1008_p4 <= cols(10 downto 3);
    tmp_2_fu_1720_p3 <= (grp_fu_2537_p2 & ap_const_lv3_0);
    tmp_3_fu_2488_p9 <= (((((((icmp_ln870_16_reg_3156 & select_ln870_6_reg_3151) & select_ln870_5_reg_3146) & select_ln870_4_reg_3141) & select_ln870_3_reg_3136) & select_ln870_2_reg_3131) & select_ln870_1_reg_3126) & select_ln870_reg_3121);
    tmp_4_fu_916_p3 <= cols(31 downto 31);
    tmp_5_fu_1367_p3 <= (offset_fu_1360_p3 & ap_const_lv3_0);
    
    tmp_6_fu_1928_p4_proc : process(oBuff_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_6_fu_1928_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := oBuff_V_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_6_fu_1928_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_6_fu_1928_p4_i) := oBuff_V_q0(64-1-tmp_6_fu_1928_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_1928_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_7_fu_2010_p4_proc : process(oBuff_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_7_fu_2010_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := oBuff_V_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_7_fu_2010_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_7_fu_2010_p4_i) := oBuff_V_q0(64-1-tmp_7_fu_2010_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_2010_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_8_fu_2092_p4_proc : process(oBuff_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_8_fu_2092_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := oBuff_V_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_8_fu_2092_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_8_fu_2092_p4_i) := oBuff_V_q0(64-1-tmp_8_fu_2092_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_2092_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_9_fu_2174_p4_proc : process(oBuff_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_9_fu_2174_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := oBuff_V_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_9_fu_2174_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_9_fu_2174_p4_i) := oBuff_V_q0(64-1-tmp_9_fu_2174_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_2174_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_fu_946_p4 <= cols(10 downto 5);
    trunc_ln1346_1_fu_1638_p1 <= rhs_fu_1626_p3(10 - 1 downto 0);
    trunc_ln1346_fu_1634_p1 <= idx1_V_6_fu_1600_p3(10 - 1 downto 0);
    trunc_ln1_fu_992_p4 <= sub_ln24_fu_924_p2(10 downto 3);
    trunc_ln208_fu_1481_p1 <= dep_V_5_fu_1473_p3(10 - 1 downto 0);
    trunc_ln24_1_fu_930_p4 <= sub_ln24_fu_924_p2(10 downto 5);
    trunc_ln302_fu_1054_p1 <= rows(10 - 1 downto 0);
    trunc_ln305_fu_1140_p1 <= bramsetsval_fu_1135_p2(4 - 1 downto 0);
    trunc_ln307_fu_1184_p1 <= grp_fu_2505_p2(23 - 1 downto 0);
    trunc_ln318_fu_1269_p1 <= select_ln312_fu_1227_p3(2 - 1 downto 0);
    trunc_ln327_fu_1451_p1 <= idx1_V_1_fu_1443_p3(10 - 1 downto 0);
    trunc_ln353_fu_1491_p1 <= idx2_V_7_fu_1465_p3(4 - 1 downto 0);
    trunc_ln358_1_fu_2052_p1 <= lshr_ln674_2_fu_2046_p2(2 - 1 downto 0);
    trunc_ln358_2_fu_2134_p1 <= lshr_ln674_3_fu_2128_p2(2 - 1 downto 0);
    trunc_ln358_3_fu_2216_p1 <= lshr_ln674_4_fu_2210_p2(2 - 1 downto 0);
    trunc_ln358_4_fu_2298_p1 <= lshr_ln674_5_fu_2292_p2(2 - 1 downto 0);
    trunc_ln358_5_fu_2380_p1 <= lshr_ln674_6_fu_2374_p2(2 - 1 downto 0);
    trunc_ln358_6_fu_2462_p1 <= lshr_ln674_7_fu_2456_p2(2 - 1 downto 0);
    trunc_ln358_fu_1970_p1 <= lshr_ln674_1_fu_1964_p2(2 - 1 downto 0);
    trunc_ln402_fu_1663_p1 <= idx2_V_6_fu_1618_p3(4 - 1 downto 0);
    trunc_ln674_1_fu_1888_p1 <= lshr_ln674_fu_1882_p2(2 - 1 downto 0);
    trunc_ln674_2_fu_1924_p1 <= add_ln444_fu_1906_p2(7 - 1 downto 0);
    trunc_ln674_3_fu_2006_p1 <= add_ln444_2_fu_1988_p2(7 - 1 downto 0);
    trunc_ln674_4_fu_2088_p1 <= add_ln444_3_fu_2070_p2(7 - 1 downto 0);
    trunc_ln674_5_fu_2170_p1 <= add_ln444_4_fu_2152_p2(7 - 1 downto 0);
    trunc_ln674_6_fu_2252_p1 <= add_ln444_5_fu_2234_p2(7 - 1 downto 0);
    trunc_ln674_7_fu_2334_p1 <= add_ln444_6_fu_2316_p2(7 - 1 downto 0);
    trunc_ln674_8_fu_2416_p1 <= add_ln444_7_fu_2398_p2(7 - 1 downto 0);
    trunc_ln674_fu_1874_p1 <= bit_1_fu_1867_p3(6 - 1 downto 0);
    trunc_ln_fu_1740_p4 <= empty_38_reg_3048(63 downto 3);
    xor_ln312_fu_1350_p2 <= (select_ln312_1_reg_2744 xor ap_const_lv1_1);
    xor_ln324_fu_1319_p2 <= (trunc_ln318_reg_2755 xor ap_const_lv2_3);
    zext_ln302_1_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slice_h_reg_2573),10));
    zext_ln302_2_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slice_h_reg_2573),23));
    zext_ln302_3_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slice_h_reg_2573),12));
    zext_ln302_4_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slice_h_reg_2573),24));
    zext_ln302_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slice_h_reg_2573),11));
    zext_ln303_2_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_reg_2582),16));
    zext_ln303_4_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_reg_2582),30));
    zext_ln303_5_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_reg_2582),29));
    zext_ln303_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_row_depth_reg_2582),32));
    zext_ln304_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1082_p2),12));
    zext_ln305_1_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bramsetsval_reg_2634),16));
    zext_ln305_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1107_p2),13));
    zext_ln315_fu_1394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lBound_reg_2799),32));
    zext_ln324_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln322_fu_1331_p2),24));
    zext_ln414_1_fu_1736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_818),17));
    zext_ln414_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div153_i_i_fu_1289_p4),17));
    zext_ln422_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_830_pp2_iter1_reg),64));
    zext_ln433_fu_1787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_842),17));
    zext_ln534_1_fu_1648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_1_fu_1642_p2),64));
    zext_ln534_2_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_2_fu_1537_p2),64));
    zext_ln534_3_fu_1550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_fu_1546_p2),64));
    zext_ln534_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_reg_2856_pp0_iter1_reg),64));
    zext_ln548_fu_1848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_1840_p3),64));
    zext_ln674_1_fu_1960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_1_fu_1952_p3),64));
    zext_ln674_2_fu_2042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_3_fu_2034_p3),64));
    zext_ln674_3_fu_2124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_5_fu_2116_p3),64));
    zext_ln674_4_fu_2206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_7_fu_2198_p3),64));
    zext_ln674_5_fu_2288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_9_fu_2280_p3),64));
    zext_ln674_6_fu_2370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_11_fu_2362_p3),64));
    zext_ln674_7_fu_2452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_13_fu_2444_p3),64));
    zext_ln674_fu_1878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln674_fu_1874_p1),64));
    zext_ln870_fu_1510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dep_V_5_reg_2849),18));
end behav;
