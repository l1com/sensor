// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFDuplicate_rows_3_800_1280_4_8_2_2_2_2_2_2_32_160_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gradx_mat_42_dout,
        gradx_mat_42_empty_n,
        gradx_mat_42_read,
        grady_mat_45_dout,
        grady_mat_45_empty_n,
        grady_mat_45_read,
        gradx1_mat_43_din,
        gradx1_mat_43_full_n,
        gradx1_mat_43_write,
        gradx2_mat_44_din,
        gradx2_mat_44_full_n,
        gradx2_mat_44_write,
        grady1_mat_46_din,
        grady1_mat_46_full_n,
        grady1_mat_46_write,
        grady2_mat_47_din,
        grady2_mat_47_full_n,
        grady2_mat_47_write,
        img_height_dout,
        img_height_empty_n,
        img_height_read,
        img_width_dout,
        img_width_empty_n,
        img_width_read,
        img_height_out_din,
        img_height_out_full_n,
        img_height_out_write,
        img_height_out1_din,
        img_height_out1_full_n,
        img_height_out1_write,
        img_width_out_din,
        img_width_out_full_n,
        img_width_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] gradx_mat_42_dout;
input   gradx_mat_42_empty_n;
output   gradx_mat_42_read;
input  [127:0] grady_mat_45_dout;
input   grady_mat_45_empty_n;
output   grady_mat_45_read;
output  [127:0] gradx1_mat_43_din;
input   gradx1_mat_43_full_n;
output   gradx1_mat_43_write;
output  [127:0] gradx2_mat_44_din;
input   gradx2_mat_44_full_n;
output   gradx2_mat_44_write;
output  [127:0] grady1_mat_46_din;
input   grady1_mat_46_full_n;
output   grady1_mat_46_write;
output  [127:0] grady2_mat_47_din;
input   grady2_mat_47_full_n;
output   grady2_mat_47_write;
input  [9:0] img_height_dout;
input   img_height_empty_n;
output   img_height_read;
input  [10:0] img_width_dout;
input   img_width_empty_n;
output   img_width_read;
output  [9:0] img_height_out_din;
input   img_height_out_full_n;
output   img_height_out_write;
output  [9:0] img_height_out1_din;
input   img_height_out1_full_n;
output   img_height_out1_write;
output  [10:0] img_width_out_din;
input   img_width_out_full_n;
output   img_width_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gradx_mat_42_read;
reg grady_mat_45_read;
reg gradx1_mat_43_write;
reg gradx2_mat_44_write;
reg grady1_mat_46_write;
reg grady2_mat_47_write;
reg img_height_read;
reg img_width_read;
reg img_height_out_write;
reg img_height_out1_write;
reg img_width_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gradx_mat_42_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln75_reg_240;
reg    grady_mat_45_blk_n;
reg    gradx1_mat_43_blk_n;
reg    gradx2_mat_44_blk_n;
reg    grady1_mat_46_blk_n;
reg    grady2_mat_47_blk_n;
reg    img_height_blk_n;
reg    img_width_blk_n;
reg    img_height_out_blk_n;
reg    img_height_out1_blk_n;
reg    img_width_out_blk_n;
reg   [7:0] col_V_reg_173;
reg   [9:0] img_height_read_reg_216;
reg   [7:0] img_width_assign_cast_reg_221;
wire   [9:0] row_V_3_fu_194_p2;
reg   [9:0] row_V_3_reg_226;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_200_p2;
wire   [7:0] col_V_9_fu_205_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln75_fu_211_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] row_V_reg_162;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_200_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_200_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_200_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln75_fu_211_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        col_V_reg_173 <= col_V_9_fu_205_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_200_p2 == 1'd0))) begin
        col_V_reg_173 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_V_reg_162 <= row_V_3_reg_226;
    end else if ((~((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_V_reg_162 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln75_reg_240 <= icmp_ln75_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        img_height_read_reg_216 <= img_height_dout;
        img_width_assign_cast_reg_221 <= {{img_width_dout[10:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_V_3_reg_226 <= row_V_3_fu_194_p2;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_211_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_200_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_200_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx1_mat_43_blk_n = gradx1_mat_43_full_n;
    end else begin
        gradx1_mat_43_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx1_mat_43_write = 1'b1;
    end else begin
        gradx1_mat_43_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2_mat_44_blk_n = gradx2_mat_44_full_n;
    end else begin
        gradx2_mat_44_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2_mat_44_write = 1'b1;
    end else begin
        gradx2_mat_44_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx_mat_42_blk_n = gradx_mat_42_empty_n;
    end else begin
        gradx_mat_42_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx_mat_42_read = 1'b1;
    end else begin
        gradx_mat_42_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady1_mat_46_blk_n = grady1_mat_46_full_n;
    end else begin
        grady1_mat_46_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady1_mat_46_write = 1'b1;
    end else begin
        grady1_mat_46_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2_mat_47_blk_n = grady2_mat_47_full_n;
    end else begin
        grady2_mat_47_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2_mat_47_write = 1'b1;
    end else begin
        grady2_mat_47_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady_mat_45_blk_n = grady_mat_45_empty_n;
    end else begin
        grady_mat_45_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady_mat_45_read = 1'b1;
    end else begin
        grady_mat_45_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_blk_n = img_height_empty_n;
    end else begin
        img_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_out1_blk_n = img_height_out1_full_n;
    end else begin
        img_height_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_out1_write = 1'b1;
    end else begin
        img_height_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_out_blk_n = img_height_out_full_n;
    end else begin
        img_height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_out_write = 1'b1;
    end else begin
        img_height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_read = 1'b1;
    end else begin
        img_height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_blk_n = img_width_empty_n;
    end else begin
        img_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_out_blk_n = img_width_out_full_n;
    end else begin
        img_width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_out_write = 1'b1;
    end else begin
        img_width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_read = 1'b1;
    end else begin
        img_width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_200_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln75_fu_211_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln75_fu_211_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln75_reg_240 == 1'd0) & (grady2_mat_47_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady1_mat_46_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx2_mat_44_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx1_mat_43_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx_mat_42_empty_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady_mat_45_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln75_reg_240 == 1'd0) & (grady2_mat_47_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady1_mat_46_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx2_mat_44_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx1_mat_43_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx_mat_42_empty_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady_mat_45_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln75_reg_240 == 1'd0) & (grady2_mat_47_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady1_mat_46_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx2_mat_44_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx1_mat_43_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx_mat_42_empty_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady_mat_45_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_width_out_full_n == 1'b0) | (img_height_out1_full_n == 1'b0) | (img_height_out_full_n == 1'b0) | (img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln75_reg_240 == 1'd0) & (grady2_mat_47_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady1_mat_46_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx2_mat_44_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx1_mat_43_full_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (gradx_mat_42_empty_n == 1'b0)) | ((icmp_ln75_reg_240 == 1'd0) & (grady_mat_45_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_V_9_fu_205_p2 = (col_V_reg_173 + 8'd1);

assign gradx1_mat_43_din = gradx_mat_42_dout;

assign gradx2_mat_44_din = gradx_mat_42_dout;

assign grady1_mat_46_din = grady_mat_45_dout;

assign grady2_mat_47_din = grady_mat_45_dout;

assign icmp_ln69_fu_200_p2 = ((row_V_reg_162 == img_height_read_reg_216) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_211_p2 = ((col_V_reg_173 == img_width_assign_cast_reg_221) ? 1'b1 : 1'b0);

assign img_height_out1_din = img_height_dout;

assign img_height_out_din = img_height_dout;

assign img_width_out_din = img_width_dout;

assign row_V_3_fu_194_p2 = (row_V_reg_162 + 10'd1);

endmodule //canny_accel_xFDuplicate_rows_3_800_1280_4_8_2_2_2_2_2_2_32_160_s
