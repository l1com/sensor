// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_accel_xFSobel_0_3_800_1280_0_4_8_2_2_2_24_32_3_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        gaussian_mat_41_dout,
        gaussian_mat_41_empty_n,
        gaussian_mat_41_read,
        gradx_mat_42_din,
        gradx_mat_42_full_n,
        gradx_mat_42_write,
        grady_mat_45_din,
        grady_mat_45_full_n,
        grady_mat_45_write,
        imgheight_dout,
        imgheight_empty_n,
        imgheight_read,
        imgwidth_dout,
        imgwidth_empty_n,
        imgwidth_read,
        imgheight_out_din,
        imgheight_out_full_n,
        imgheight_out_write,
        imgwidth_out_din,
        imgwidth_out_full_n,
        imgwidth_out_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] gaussian_mat_41_dout;
input   gaussian_mat_41_empty_n;
output   gaussian_mat_41_read;
output  [127:0] gradx_mat_42_din;
input   gradx_mat_42_full_n;
output   gradx_mat_42_write;
output  [127:0] grady_mat_45_din;
input   grady_mat_45_full_n;
output   grady_mat_45_write;
input  [9:0] imgheight_dout;
input   imgheight_empty_n;
output   imgheight_read;
input  [10:0] imgwidth_dout;
input   imgwidth_empty_n;
output   imgwidth_read;
output  [9:0] imgheight_out_din;
input   imgheight_out_full_n;
output   imgheight_out_write;
output  [10:0] imgwidth_out_din;
input   imgwidth_out_full_n;
output   imgwidth_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg gaussian_mat_41_read;
reg gradx_mat_42_write;
reg grady_mat_45_write;
reg imgheight_read;
reg imgwidth_read;
reg imgheight_out_write;
reg imgwidth_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    imgheight_blk_n;
reg    imgwidth_blk_n;
reg    imgheight_out_blk_n;
reg    imgwidth_out_blk_n;
reg   [9:0] imgheight_read_reg_84;
reg   [10:0] imgwidth_read_reg_89;
wire    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start;
wire    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_done;
wire    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_idle;
wire    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_ready;
wire    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gaussian_mat_41_read;
wire   [127:0] grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gradx_mat_42_din;
wire    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gradx_mat_42_write;
wire   [127:0] grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_grady_mat_45_din;
wire    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_grady_mat_45_write;
reg    grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start_reg;
reg    ap_block_state1_ignore_call14;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start_reg = 1'b0;
end

canny_accel_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start),
    .ap_done(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_done),
    .ap_idle(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_idle),
    .ap_ready(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_ready),
    .gaussian_mat_41_dout(gaussian_mat_41_dout),
    .gaussian_mat_41_empty_n(gaussian_mat_41_empty_n),
    .gaussian_mat_41_read(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gaussian_mat_41_read),
    .gradx_mat_42_din(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gradx_mat_42_din),
    .gradx_mat_42_full_n(gradx_mat_42_full_n),
    .gradx_mat_42_write(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gradx_mat_42_write),
    .grady_mat_45_din(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_grady_mat_45_din),
    .grady_mat_45_full_n(grady_mat_45_full_n),
    .grady_mat_45_write(grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_grady_mat_45_write),
    .img_height(imgheight_read_reg_84),
    .img_width(imgwidth_read_reg_89)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_ready == 1'b1)) begin
            grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        imgheight_read_reg_84 <= imgheight_dout;
        imgwidth_read_reg_89 <= imgwidth_dout;
    end
end

always @ (*) begin
    if (((grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gaussian_mat_41_read = grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gaussian_mat_41_read;
    end else begin
        gaussian_mat_41_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gradx_mat_42_write = grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gradx_mat_42_write;
    end else begin
        gradx_mat_42_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grady_mat_45_write = grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_grady_mat_45_write;
    end else begin
        grady_mat_45_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_blk_n = imgheight_empty_n;
    end else begin
        imgheight_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_out_blk_n = imgheight_out_full_n;
    end else begin
        imgheight_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_out_write = 1'b1;
    end else begin
        imgheight_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgheight_read = 1'b1;
    end else begin
        imgheight_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_blk_n = imgwidth_empty_n;
    end else begin
        imgwidth_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_out_blk_n = imgwidth_out_full_n;
    end else begin
        imgwidth_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_out_write = 1'b1;
    end else begin
        imgwidth_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgwidth_read = 1'b1;
    end else begin
        imgwidth_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call14 = ((real_start == 1'b0) | (imgwidth_out_full_n == 1'b0) | (imgheight_out_full_n == 1'b0) | (imgwidth_empty_n == 1'b0) | (imgheight_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign gradx_mat_42_din = grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_gradx_mat_42_din;

assign grady_mat_45_din = grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_grady_mat_45_din;

assign grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start = grp_xFSobel3x3_0_3_800_1280_0_4_8_2_2_2_24_32_161_3_9_false_s_fu_70_ap_start_reg;

assign imgheight_out_din = imgheight_dout;

assign imgwidth_out_din = imgwidth_dout;

assign start_out = real_start;

endmodule //canny_accel_xFSobel_0_3_800_1280_0_4_8_2_2_2_24_32_3_false_s
